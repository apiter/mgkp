define("first-screen.js", function(require, module, exports) {
    'use strict';

    var _slicedToArray = function() {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        return function(arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var VSHADER_SOURCE = 'attribute vec4 a_Position;\n' + 'attribute vec2 a_TexCoord;\n' + 'varying vec2 v_TexCoord;\n' + 'void main() {\n' + '  gl_Position = a_Position;\n' + '  v_TexCoord = a_TexCoord;\n' + '}\n';

    var FSHADER_SOURCE = '#ifdef GL_ES\n' + 'precision mediump float;\n' + '#endif\n' + 'uniform sampler2D u_Sampler;\n' + 'varying vec2 v_TexCoord;\n' + 'void main() {\n' + '  gl_FragColor = texture2D(u_Sampler, v_TexCoord);\n' + '}\n';

    var VERTICES = new Float32Array([-1, 1, 0.0, 1.0, -1, -1, 0.0, 0.0, 1, 1, 1.0, 1.0, 1, -1, 1.0, 0.0]);

    var INITENV = false;
    var TEXTURE, USAMPLE, IMAGE;

    function initShaders(gl, vshader, fshader) {
        var program = createProgram(gl, vshader, fshader);
        if (!program) {
            console.log('Failed to create program');
            return false;
        }

        gl.useProgram(program);
        gl.program = program;

        return true;
    }

    function createProgram(gl, vshader, fshader) {
        // Create shader object
        var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);
        var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);
        if (!vertexShader || !fragmentShader) {
            return null;
        }

        // Create a program object
        var program = gl.createProgram();
        if (!program) {
            return null;
        }

        // Attach the shader objects
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);

        // Link the program object
        gl.linkProgram(program);

        // Check the result of linking
        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
        if (!linked) {
            var error = gl.getProgramInfoLog(program);
            console.log('Failed to link program: ' + error);
            gl.deleteProgram(program);
            gl.deleteShader(fragmentShader);
            gl.deleteShader(vertexShader);
            return null;
        }
        return program;
    }

    function loadShader(gl, type, source) {
        // Create shader object
        var shader = gl.createShader(type);
        if (shader == null) {
            console.log('unable to create shader');
            return null;
        }

        // Set the shader program
        gl.shaderSource(shader, source);

        // Compile the shader
        gl.compileShader(shader);

        // Check the result of compilation
        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
        if (!compiled) {
            var error = gl.getShaderInfoLog(shader);
            console.log('Failed to compile shader: ' + error);
            gl.deleteShader(shader);
            return null;
        }

        return shader;
    }

    function initVertexBuffers(gl, vertices) {
        var verticesTexCoords = vertices || new Float32Array([
            // Vertex coordinates, texture coordinate
            -1, 1, 0.0, 1.0, -1, -1, 0.0, 0.0, 1, 1, 1.0, 1.0, 1, -1, 1.0, 0.0
        ]);

        var n = 4; // The number of vertices

        // Create the buffer object
        var vertexTexCoordBuffer = gl.createBuffer();
        if (!vertexTexCoordBuffer) {
            console.log('Failed to create the buffer object');
            return -1;
        }

        // Bind the buffer object to target
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexTexCoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);

        var FSIZE = verticesTexCoords.BYTES_PER_ELEMENT;
        //Get the storage location of a_Position, assign and enable buffer
        var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
        if (a_Position < 0) {
            console.log('Failed to get the storage location of a_Position');
            return -1;
        }
        gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, FSIZE * 4, 0);
        gl.enableVertexAttribArray(a_Position); // Enable the assignment of the buffer object

        // Get the storage location of a_TexCoord
        var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');
        if (a_TexCoord < 0) {
            console.log('Failed to get the storage location of a_TexCoord');
            return -1;
        }
        // Assign the buffer object to a_TexCoord variable
        gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 4, FSIZE * 2);
        gl.enableVertexAttribArray(a_TexCoord); // Enable the assignment of the buffer object

        return n;
    }

    function initTextures(gl, n, imgPath) {
        var texture = gl.createTexture(); // Create a texture object
        if (!texture) {
            console.log('Failed to create the texture object');
            return [null, null, null, false];
        }

        // Get the storage location of u_Sampler
        var u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');
        if (!u_Sampler) {
            console.log('Failed to get the storage location of u_Sampler');
            return [null, null, null, false];
        }
        var image = wx.createImage(); // Create the image object
        if (!image) {
            console.log('Failed to create the image object');
            return [null, null, null, false];
        }
        // Register the event handler to be called on loading an image
        image.onload = function() {
            loadTexture(gl, n, TEXTURE, u_Sampler, image);
            IMAGE = image;
        };
        // Tell the browser to load an image
        image.src = imgPath;
        return [texture, u_Sampler, true];
    }

    function loadTexture(gl, n, texture, u_Sampler, image) {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y axis
        // Enable texture unit0
        gl.activeTexture(gl.TEXTURE0);
        // Bind the texture object to the target
        gl.bindTexture(gl.TEXTURE_2D, texture);

        // Set the texture parameters
        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // Set the texture image
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);

        // Set the texture unit 0 to the sampler
        gl.uniform1i(u_Sampler, 0);

        gl.clear(gl.COLOR_BUFFER_BIT); // Clear <canvas>

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, n); // Draw the rectangle
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0); // Flip the image's y axis
    }

    function InitGLEnv(imgPath, gl, vertices) {
        if (!gl) {
            console.log('Failed to get the rendering context for WebGL');
            return [-1];
        }

        // Initialize shaders
        if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
            console.log('Failed to intialize shaders.');
            return -1;
        }

        // Set the vertex information
        var n = initVertexBuffers(gl, vertices);
        if (n < 0) {
            console.log('Failed to set the vertex information');
            return -1;
        }

        // Specify the color for clearing <canvas>
        gl.clearColor(0.85, 0.78, 0.63, 1.0);

        // Set texture
        var ret = true;
        var teture, u_sample;

        var _initTextures = initTextures(gl, n, imgPath);

        var _initTextures2 = _slicedToArray(_initTextures, 3);

        teture = _initTextures2[0];
        u_sample = _initTextures2[1];
        ret = _initTextures2[2];

        if (!ret) {
            console.log('Failed to intialize the texture.');
            return -1;
        }
        return [teture, u_sample, ret];
    }

    var stretch = true; // 图片是否拉伸
    var imgWidth = 720,
        imgHeight = 1440;

    function resetVertices() {
        var data = wx.getSystemInfoSync();
        var screenHeight = data.screenHeight;
        var screenWidth = data.screenWidth;
        var widthScale = imgWidth / screenWidth;
        var heightScale = imgHeight / screenHeight;

        var minScale = Math.min(widthScale, heightScale);

        var x = widthScale / minScale;
        var y = heightScale / minScale;
        VERTICES = new Float32Array([-x, y, 0.0, 1.0, -x, -y, 0.0, 0.0, x, y, 1.0, 1.0, x, -y, 1.0, 0.0]);
    }

    function drawImg(imgPath, gl) {
        if (!INITENV) {
            if (stretch) {
                resetVertices();
            }

            var r = 0;

            var _InitGLEnv = InitGLEnv(imgPath, gl, VERTICES);

            var _InitGLEnv2 = _slicedToArray(_InitGLEnv, 3);

            TEXTURE = _InitGLEnv2[0];
            USAMPLE = _InitGLEnv2[1];
            r = _InitGLEnv2[2];

            if (r < 0) {
                return;
            }
            INITENV = true;
        }
        var n = initVertexBuffers(gl, VERTICES);
        if (n < 0) {
            console.log('Failed to set the vertex information');
            return;
        }
        if (IMAGE) {
            loadTexture(gl, n, TEXTURE, USAMPLE, IMAGE);
        }
    }

    exports.drawImg = drawImg;
});
define("index.js", function(require, module, exports) {
    /**
     * 设置LayaNative屏幕方向，可设置以下值
     * landscape           横屏
     * portrait            竖屏
     * sensor_landscape    横屏(双方向)
     * sensor_portrait     竖屏(双方向)
     */
    window.screenOrientation = "sensor_portrait";

    loadLib("js/bundle.js");

});
define("js/bundle.js", function(require, module, exports) {
    var BundleJs = function(e) {
        "use strict";
        class t {}
        var i;
        e.AssetType = void 0, (i = e.AssetType || (e.AssetType = {}))[i.Prefab = 1] = "Prefab", i[i.Spine = 2] = "Spine", i[i.Sprite = 3] = "Sprite", i[i.Bmfont = 4] = "Bmfont";
        const s = {
                Coin: "res/ui/icon/icon_coin.png",
                Jewel: "res/ui/icon/icon_jewel.png",
                TipsBg: "res/utils/tips/bg.png"
            },
            a = {
                main: "res/font/maintxt.fnt"
            },
            n = {},
            r = {
                GuideUI: "scenes/prefab/guide/GuideUI.json",
                GuideUnlock: "scenes/prefab/guide/GuideUnlock.json",
                FingerGuide: "scenes/prefab/guide/FingerGuide.json",
                BossWeekGuide: "scenes/prefab/guide/BossWeekGuide.json",
                Hit: "scenes/ani/hit.json",
                ClickEff: "scenes/ani/clickEff.json",
                CoinEff: "scenes/prefab/coin_fly.json"
            },
            o = {
                loading: ["loading", e.AssetType.Prefab, "scenes/ani/loadingEff.json"]
            },
            l = {
                MessageDialog: "MessageDialog",
                MainScene: "MainScene",
                GameScene: "GameScene",
                SettingDialog: "SettingDialog",
                SelectCityDialog: "SelectCityDialog",
                CityRankDialog: "CityRankDialog",
                WinDialog: "WinDialog",
                FailDialog: "FailDialog",
                SkinView: "SkinView",
                TipsView: "TipsView",
                GameEndBoxDialog: "GameEndBoxDialog",
                MatchingView: "MatchingView",
                HunterMatchingView: "HunterMatchingView",
                ShopDialog: "ShopDialog",
                DifficultChooseDialog: "DifficultChooseDialog",
                RankView: "RankView",
                SkinFragmentDialog: "SkinFragmentDialog",
                SkinFragmentGetDialog: "SkinFragmentGetDialog",
                ExitView: "ExitView",
                NoticeDialog: "NoticeDialog",
                TurntableView: "TurntableView",
                TurntableRewardDialog: "TurntableRewardDialog",
                BuffChooseDialog: "BuffChooseDialog",
                BuffOwnerDialog: "BuffOwnerDialog",
                BuffShowDialog: "BuffShowDialog",
                DailyShareDialog: "DailyShareDialog",
                BuyTianDialog: "BuyTianDialog",
                InviteDialog: "InviteDialog",
                QuestionDialog: "QuestionDialog",
                AogFailDialog: "AogFailDialog",
                AogWinDialog: "AogWinDialog",
                AogChooseDialog: "AogChooseDialog",
                AogUnlockDialog: "AogUnlockDialog",
                HunterChooseView: "HunterChooseView",
                HunterFailDialog: "HunterFailDialog",
                HunterWinDialog: "HunterWinDialog",
                HunterUnlockDialog: "HunterUnlockDialog",
                HunterDifficultChooseDialog: "HunterDifficultChooseDialog",
                SevenGhostUnlockDialog: "SevenGhostUnlockDialog",
                SevenGhostView: "SevenGhostView",
                SevenGhostFailDialog: "SevenGhostFailDialog",
                SevenGhostWinDialog: "SevenGhostWinDialog",
                ClubRewardDialog: "ClubRewardDialog",
                EvaluateDialog: "EvaluateDialog",
                RewardDialog: "RewardDialog",
                SkinRewardDialog: "SkinRewardDialog"
            };
        var h, d, u, g, c = fx.BaseScene,
            p = fx.BaseView,
            f = fx.BaseDialog,
            m = Laya.ClassUtils.regClass;
        e.ui = void 0,
            function(e) {
                class t extends c {
                    constructor() {
                        super()
                    }
                    createChildren() {
                        super.createChildren(), this.loadScene("scenes/GameScene")
                    }
                }
                e.GameSceneUI = t, m("ui.scenes.GameSceneUI", t);
                class i extends c {
                    constructor() {
                        super()
                    }
                    createChildren() {
                        super.createChildren(), this.loadScene("scenes/MainScene")
                    }
                }
                e.MainSceneUI = i, m("ui.scenes.MainSceneUI", i)
            }((h = e.ui || (e.ui = {})).scenes || (h.scenes = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        ! function(e) {
                            class t extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/angelOrGhost/AogChooseDialog")
                                }
                            }
                            e.AogChooseDialogUI = t, m("ui.scenes.panel.angelOrGhost.AogChooseDialogUI", t);
                            class i extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/angelOrGhost/AogFailDialog")
                                }
                            }
                            e.AogFailDialogUI = i, m("ui.scenes.panel.angelOrGhost.AogFailDialogUI", i);
                            class s extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/angelOrGhost/AogUnlockDialog")
                                }
                            }
                            e.AogUnlockDialogUI = s, m("ui.scenes.panel.angelOrGhost.AogUnlockDialogUI", s);
                            class a extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/angelOrGhost/AogWinDialog")
                                }
                            }
                            e.AogWinDialogUI = a, m("ui.scenes.panel.angelOrGhost.AogWinDialogUI", a)
                        }(e.angelOrGhost || (e.angelOrGhost = {}))
                    }(e.panel || (e.panel = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        class t extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/BuffChooseDialog")
                            }
                        }
                        e.BuffChooseDialogUI = t, m("ui.scenes.panel.BuffChooseDialogUI", t);
                        class i extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/BuffOwnerDialog")
                            }
                        }
                        e.BuffOwnerDialogUI = i, m("ui.scenes.panel.BuffOwnerDialogUI", i);
                        class s extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/BuffShowDialog")
                            }
                        }
                        e.BuffShowDialogUI = s, m("ui.scenes.panel.BuffShowDialogUI", s);
                        class a extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/BuyTianDialog")
                            }
                        }
                        e.BuyTianDialogUI = a, m("ui.scenes.panel.BuyTianDialogUI", a);
                        class n extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/ClubRewardDialog")
                            }
                        }
                        e.ClubRewardDialogUI = n, m("ui.scenes.panel.ClubRewardDialogUI", n);
                        class r extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/DailyShareDialog")
                            }
                        }
                        e.DailyShareDialogUI = r, m("ui.scenes.panel.DailyShareDialogUI", r);
                        class o extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/DifficultChooseDialog")
                            }
                        }
                        e.DifficultChooseDialogUI = o, m("ui.scenes.panel.DifficultChooseDialogUI", o);
                        class l extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/EvaluateDialog")
                            }
                        }
                        e.EvaluateDialogUI = l, m("ui.scenes.panel.EvaluateDialogUI", l);
                        class h extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/FailDialog")
                            }
                        }
                        e.FailDialogUI = h, m("ui.scenes.panel.FailDialogUI", h);
                        class d extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/GameEndBoxDialog")
                            }
                        }
                        e.GameEndBoxDialogUI = d, m("ui.scenes.panel.GameEndBoxDialogUI", d);
                        class u extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/InviteDialog")
                            }
                        }
                        e.InviteDialogUI = u, m("ui.scenes.panel.InviteDialogUI", u);
                        class g extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/MessageDialog")
                            }
                        }
                        e.MessageDialogUI = g, m("ui.scenes.panel.MessageDialogUI", g);
                        class c extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/NoticeDialog")
                            }
                        }
                        e.NoticeDialogUI = c, m("ui.scenes.panel.NoticeDialogUI", c);
                        class p extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/QuestionDialog")
                            }
                        }
                        e.QuestionDialogUI = p, m("ui.scenes.panel.QuestionDialogUI", p);
                        class y extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/RewardDialog")
                            }
                        }
                        e.RewardDialogUI = y, m("ui.scenes.panel.RewardDialogUI", y);
                        class C extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/SettingDialog")
                            }
                        }
                        e.SettingDialogUI = C, m("ui.scenes.panel.SettingDialogUI", C);
                        class _ extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/ShopDialog")
                            }
                        }
                        e.ShopDialogUI = _, m("ui.scenes.panel.ShopDialogUI", _);
                        class k extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/SkinFragmentDialog")
                            }
                        }
                        e.SkinFragmentDialogUI = k, m("ui.scenes.panel.SkinFragmentDialogUI", k);
                        class b extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/SkinFragmentGetDialog")
                            }
                        }
                        e.SkinFragmentGetDialogUI = b, m("ui.scenes.panel.SkinFragmentGetDialogUI", b);
                        class w extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/SkinRewardDialog")
                            }
                        }
                        e.SkinRewardDialogUI = w, m("ui.scenes.panel.SkinRewardDialogUI", w);
                        class S extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/TurntableRewardDialog")
                            }
                        }
                        e.TurntableRewardDialogUI = S, m("ui.scenes.panel.TurntableRewardDialogUI", S);
                        class I extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/panel/WinDialog")
                            }
                        }
                        e.WinDialogUI = I, m("ui.scenes.panel.WinDialogUI", I)
                    }(e.panel || (e.panel = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        ! function(e) {
                            class t extends p {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/hunter/HunterChooseView")
                                }
                            }
                            e.HunterChooseViewUI = t, m("ui.scenes.panel.hunter.HunterChooseViewUI", t);
                            class i extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/hunter/HunterDifficultChooseDialog")
                                }
                            }
                            e.HunterDifficultChooseDialogUI = i, m("ui.scenes.panel.hunter.HunterDifficultChooseDialogUI", i);
                            class s extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/hunter/HunterFailDialog")
                                }
                            }
                            e.HunterFailDialogUI = s, m("ui.scenes.panel.hunter.HunterFailDialogUI", s);
                            class a extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/hunter/HunterUnlockDialog")
                                }
                            }
                            e.HunterUnlockDialogUI = a, m("ui.scenes.panel.hunter.HunterUnlockDialogUI", a);
                            class n extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/hunter/HunterWinDialog")
                                }
                            }
                            e.HunterWinDialogUI = n, m("ui.scenes.panel.hunter.HunterWinDialogUI", n)
                        }(e.hunter || (e.hunter = {}))
                    }(e.panel || (e.panel = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        ! function(e) {
                            class t extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/sevenGhost/SevenGhostFailDialog")
                                }
                            }
                            e.SevenGhostFailDialogUI = t, m("ui.scenes.panel.sevenGhost.SevenGhostFailDialogUI", t);
                            class i extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/sevenGhost/SevenGhostUnlockDialog")
                                }
                            }
                            e.SevenGhostUnlockDialogUI = i, m("ui.scenes.panel.sevenGhost.SevenGhostUnlockDialogUI", i);
                            class s extends p {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/sevenGhost/SevenGhostView")
                                }
                            }
                            e.SevenGhostViewUI = s, m("ui.scenes.panel.sevenGhost.SevenGhostViewUI", s);
                            class a extends f {
                                constructor() {
                                    super()
                                }
                                createChildren() {
                                    super.createChildren(), this.loadScene("scenes/panel/sevenGhost/SevenGhostWinDialog")
                                }
                            }
                            e.SevenGhostWinDialogUI = a, m("ui.scenes.panel.sevenGhost.SevenGhostWinDialogUI", a)
                        }(e.sevenGhost || (e.sevenGhost = {}))
                    }(e.panel || (e.panel = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        class t extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/ExitView")
                            }
                        }
                        e.ExitViewUI = t, m("ui.scenes.view.ExitViewUI", t);
                        class i extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/HunterMatchingView")
                            }
                        }
                        e.HunterMatchingViewUI = i, m("ui.scenes.view.HunterMatchingViewUI", i);
                        class s extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/MatchingView")
                            }
                        }
                        e.MatchingViewUI = s, m("ui.scenes.view.MatchingViewUI", s);
                        class a extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/RankView")
                            }
                        }
                        e.RankViewUI = a, m("ui.scenes.view.RankViewUI", a);
                        class n extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/SkinView")
                            }
                        }
                        e.SkinViewUI = n, m("ui.scenes.view.SkinViewUI", n);
                        class r extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/TipsView")
                            }
                        }
                        e.TipsViewUI = r, m("ui.scenes.view.TipsViewUI", r);
                        class o extends p {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/view/TurntableView")
                            }
                        }
                        e.TurntableViewUI = o, m("ui.scenes.view.TurntableViewUI", o)
                    }(e.view || (e.view = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {})),
            function(e) {
                ! function(e) {
                    ! function(e) {
                        class t extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/WXJump/JumpGameListDialog")
                            }
                        }
                        e.JumpGameListDialogUI = t, m("ui.scenes.WXJump.JumpGameListDialogUI", t);
                        class i extends f {
                            constructor() {
                                super()
                            }
                            createChildren() {
                                super.createChildren(), this.loadScene("scenes/WXJump/MiniGameListDialog")
                            }
                        }
                        e.MiniGameListDialogUI = i, m("ui.scenes.WXJump.MiniGameListDialogUI", i)
                    }(e.WXJump || (e.WXJump = {}))
                }(e.scenes || (e.scenes = {}))
            }(e.ui || (e.ui = {}));
        class XRandomUtil {
            static init(e) {
                this.seed = e
            }
            static random() {
                return this.seed = (9301 * this.seed + 49297) % 233280, this.seed / 233280
            }
            static getNumberRandom(e, t) {
                return this.random() * (t - e) + e
            }
            static getIntRandom(e, t) {
                return Math.floor(this.random() * (t - e + 1) + e)
            }
            static randomArray(e) {
                if (!e || 0 == e.length) return;
                let t = e.length;
                for (; t;) {
                    let i = Math.floor(this.random() * t--);
                    [e[i], e[t]] = [e[t], e[i]]
                }
                return e
            }
            static randomInArray(e) {
                if (!e || 0 == e.length) return null;
                return e[Math.floor(this.random() * e.length)]
            }
        }
        e.PlatformType = void 0, (d = e.PlatformType || (e.PlatformType = {})).PC = "pc", d.WEB = "web", d.WEIXIN = "wx", d.BAIDU = "swan", d.VIVO = "vivo", d.TT = "toutiao", d.MEIZU = "meizu", d.OPPO = "oppo", d.NATIVE_XIAOMI = "native_xiaomi", d.NATIVE_TAPTAP = "native_taptap", d.QQ = "qq", d.QTT = "qtt", d.FTNN = "4399", d.FTNNBOX = "4399box", d.NATIVE_ANDROID = "native_android", d.NATIVE_IOS = "native_ios", d.KUAISHOU = "kuaishou", d.HUAWEI = "huawei", d.UC = "uc", d.NATIVE_233 = "native_233", d.TTFF = "2345", d.CHUANYIN = "chuanyin", d.NATIVE_KXHZ = "native_kxhz", d.NATIVE_MMY = "native_mmy", d.NATIVE_VIVO = "native_vivo", d.NATIVE_OPPO = "native_oppo", d.NATIVE_XINGTU = "native_xingtu", d.NATIVE_MEIZU = "native_meizu", d.NATIVE_TOPON = "native_topon", d.NATIVE_HUAWEI = "native_huawei", d.NATIVE_4399 = "native_4399", d.NATIVE_GP = "native_googleplay", d.XIAOMI = "xiaomi", d.ALIPAY = "alipay", d.RONGYAO = "rongyao", d.MINI360 = "mini360", d.YOUGUBT = "ygbt", d.MT = "meituan", e.Env = void 0, (u = e.Env || (e.Env = {}))[u.Dev = 0] = "Dev", u[u.Test = 1] = "Test", u[u.Online = 2] = "Online", e.ZOrder = void 0, (g = e.ZOrder || (e.ZOrder = {}))[g.Loading = 21003] = "Loading", g[g.Tips = 21004] = "Tips", g[g.WXOpenDataContext = 3e4] = "WXOpenDataContext", g[g.BlockUI = 999999999] = "BlockUI";
        const C = {
                GridSize: 106,
                GridHalfSize: 53
            },
            _ = {
                DAY_MINUTES: 1440,
                HOUR_SECONDS: 3600,
                DAY_SECONDS: 86400,
                WEEK_SECONDS: 604800
            };
        var k, b, w, S, I, v, M, x, B;
        e.RewardId = void 0, (k = e.RewardId || (e.RewardId = {}))[k.Coin = 1] = "Coin", e.GameClubDataType = void 0, (b = e.GameClubDataType || (e.GameClubDataType = {}))[b.JoinClubTime = 1] = "JoinClubTime", b[b.SpeakStat = 3] = "SpeakStat", b[b.DayLickNum = 4] = "DayLickNum", b[b.DayCommentNum = 5] = "DayCommentNum", b[b.DayPublishNum = 6] = "DayPublishNum", b[b.DayPublishVideoNum = 7] = "DayPublishVideoNum", b[b.DayLickOfficialNum = 8] = "DayLickOfficialNum", b[b.DayPublishOfficiaVideolNum = 9] = "DayPublishOfficiaVideolNum", e.GameMode = void 0, (w = e.GameMode || (e.GameMode = {}))[w.E_Defense = 0] = "E_Defense", w[w.E_Hunt = 1] = "E_Hunt", w[w.E_AngelOrGhost = 2] = "E_AngelOrGhost", w[w.E_SevenGhost = 3] = "E_SevenGhost", e.PlayerType = void 0, (S = e.PlayerType || (e.PlayerType = {}))[S.E_Defender = 0] = "E_Defender", S[S.E_Hunter = 1] = "E_Hunter", e.BuildType = void 0, (I = e.BuildType || (e.BuildType = {})).bed = "bed", I.door = "door", I.tower = "tower", I.energy = "energy", I.mine = "mine", I.skill = "skill", I.eatMosquito = "eatMosquito", I.springBox = "springBox", I.knife = "knife", I.random = "random", I.entice = "entice", I.special = "special", I.stone = "stone", I.boxMonster = "boxMonster", I.doorkeeper = "doorkeeper", I.borrowMoney = "borrowMoney", e.EffectType = void 0, (v = e.EffectType || (e.EffectType = {})).Add_Coin = "Add_Coin", v.Add_Energy = "Add_Energy", v.Add_CoinAndEnergy = "Add_CoinAndEnergy", v.Door_AlwaysAddHp = "Door_AlwaysAddHp", v.Enemy_UseSkillBeDizzy = "Enemy_UseSkillBeDizzy", v.Door_NotGetDmgOnHpLow = "Door_NotGetDmgOnHpLow", v.Tower_GetCoinOnAtk = "Tower_GetCoinOnAtk", v.Tower_GetCoinOnAtk_1 = "Tower_GetCoinOnAtk_1", v.Enemy_SlowAtkSpd = "Enemy_SlowAtkSpd", v.Enemy_EscapeBeDizzy = "Enemy_EscapeBeDizzy", v.Door_FightBackOnBeAtk = "Door_FightBackOnBeAtk", v.Enemy_OnHpLowBeAtk = "Enemy_OnHpLowBeAtk", v.Tower_AddAtkDst = "Tower_AddAtkDst", v.Tower_AddAtkSpd = "Tower_AddAtkSpd", v.Tower_AddAtkSpdOnEnemyNear = "Tower_AddAtkSpdOnEnemyNear", v.Heal_Buildings = "Heal_Buildings", v.Door_GetCoinOnHurt = "Door_GetCoinOnHurt", v.Eat_Mosquito = "Eat_Mosquito", v.Door_EnemyBeDizzy = "Door_EnemyBeDizzy", v.Door_EnemyBeEscape = "Door_EnemyBeEscape", v.Enemy_EscapeBeSlowdown = "Enemy_EscapeBeSlowdown", v.Enemy_HpRateBeDizzy = "Enemy_HpRateBeDizzy",
            function(e) {
                e[e.ATK_POW = 1] = "ATK_POW", e[e.ATK_SPD = 2] = "ATK_SPD", e[e.ATK_DST = 3] = "ATK_DST", e[e.ATK_SPLIT = 4] = "ATK_SPLIT", e[e.DYC_ATK_SPD = 5] = "DYC_ATK_SPD", e[e.INCOME_DOWN = 6] = "INCOME_DOWN", e[e.ENERGY_RATIO = 7] = "ENERGY_RATIO", e[e.FIGHT_BACK = 8] = "FIGHT_BACK", e[e.SPEED_POW = 9] = "SPEED_POW", e[e.DEF_ROI = 10] = "DEF_ROI", e[e.DOOR_HP_INCREASE = 11] = "DOOR_HP_INCREASE", e[e.SPEED = 12] = "SPEED"
            }(M || (M = {})), e.SkinType = void 0, (x = e.SkinType || (e.SkinType = {})).Human = "Human", x.Hunter = "Hunter", x.Angel = "Angel", x.Ghost = "Ghost", x.Fighter = "Fighter", 
            e.BuildResult = void 0, (B = e.BuildResult || (e.BuildResult = {}))[B.E_OK = 0] = "E_OK", B[B.E_FAILD = 1] = "E_FAILD", B[B.E_COIN_NOT_ENOUGH = 2] = "E_COIN_NOT_ENOUGH", B[B.E_ENERGY_NOT_ENOUGH = 3] = "E_ENERGY_NOT_ENOUGH", B[B.E_MAX_CNT = 4] = "E_MAX_CNT", B[B.E_MAX_LV = 5] = "E_MAX_LV", B[B.E_NOT_HAVE_PREBUILD = 6] = "E_NOT_HAVE_PREBUILD", B[B.E_BED_IS_USED = 7] = "E_BED_IS_USED", B[B.E_STAGE_NOT_ENOUGH = 8] = "E_STAGE_NOT_ENOUGH";
        const T = {
            Prefab_GuideFinger: "scenes/prefab/finger.json",
            Prefab_HealZoneEff: "scenes/prefab/Heal.json",
            Prefab_IconTips: "scenes/prefab/IconValueTips.json",
            Prefab_OperateBtn: "scenes/prefab/OperateBtn.json",
            Prefab_BuildMenu: "scenes/prefab/BuildMenu.json",
            Prefab_UpgradeMenu: "scenes/prefab/UpgradeMenu.json",
            Prefab_BorrowMoney: "scenes/prefab/BorrowMoneyMenu.json",
            Prefab_HealthBar: "scenes/prefab/HealthBar.json",
            Prefab_BuildingCD: "scenes/prefab/BuildingCD.json",
            Prefab_SkillCD: "scenes/prefab/SkillCD.json",
            Prefab_LabelTips: "scenes/prefab/IconTips.json",
            Prefab_Guide: "scenes/prefab/box_guide.json"
        };
        var E, L, D, A, P, N;
        e.Direction = void 0, (E = e.Direction || (e.Direction = {}))[E.Left = 1] = "Left", E[E.Right = 2] = "Right", E[E.Up = 3] = "Up", E[E.Down = 4] = "Down", e.BuildGroup = void 0, (L = e.BuildGroup || (e.BuildGroup = {}))[L.Build = 1] = "Build", L[L.Mine = 2] = "Mine", L[L.GodProp = 3] = "GodProp", L[L.ZongProp = 4] = "ZongProp", L[L.Secret = 5] = "Secret", L[L.HideBuild = 6] = "HideBuild", e.TokenType = void 0, (D = e.TokenType || (e.TokenType = {}))[D.E_Coin = 0] = "E_Coin", D[D.E_Energy = 1] = "E_Energy", e.GameStatus = void 0, (A = e.GameStatus || (e.GameStatus = {}))[A.E_GAME_READY = 1] = "E_GAME_READY", A[A.E_GAME_START = 2] = "E_GAME_START", A[A.E_GAME_PAUSE = 3] = "E_GAME_PAUSE", A[A.E_GAME_FINISH = 4] = "E_GAME_FINISH", e.CollideGroupType = void 0, (P = e.CollideGroupType || (e.CollideGroupType = {}))[P.NONE = 0] = "NONE", P[P.BULLET = 2] = "BULLET", P[P.HUNTER = 4] = "HUNTER", P[P.BOX = 8] = "BOX", P[P.PoprWall = 16] = "PoprWall", P[P.Defender = 32] = "Defender", P[P.Building = 64] = "Building", P[P.HunterMine = 128] = "HunterMine", P[P.DefenderMine = 256] = "DefenderMine";
        class XToastItem extends Laya.Box {
            constructor() {
                super(), this.anchorX = this.anchorY = .5, this.bg = new Laya.Image(s.TipsBg), this.bg.sizeGrid = "18,18,18,18", this.addChild(this.bg), this.bg.left = this.bg.right = this.bg.top = this.bg.bottom = 0
            }
            showWithAni(t) {
                for (const e of XToast.list) e.y -= 55;
                this.zOrder = e.ZOrder.Tips, Laya.stage.addChild(this), this.alpha = 0, XToast.list.push(this), (new fx.Sequence).fadeTo(1, 200).delay(1e3 * t).fadeTo(0, 500).exec(Laya.Handler.create(this, () => {
                    let e = XToast.list.indexOf(this); - 1 != e && XToast.list.splice(e, 1), this.destroy()
                })).run(this)
            }
        }
        class XToast {
            static createLabel(e, t, i, s) {
                let a = new Laya.Label;
                return a.fontSize = s || 24, a.bold = !0, a.color = t || "#FFFFFF", i && (a.stroke = 2, a.strokeColor = "#000000"), a.text = e, a
            }
            static show(e, t = 1, i) {
                let s = new XToastItem,
                    a = this.createLabel(e);
                s.addChild(a), s.width = a.width + 80, s.height = a.height + 50, s.x = Laya.stage.width / 2, s.y = i || .3 * Laya.stage.height, a.centerX = a.centerY = 0, s.showWithAni(t)
            }
            static showNodes(e, t) {
                if (!e.length) return;
                let i = 40,
                    a = 0,
                    n = 0,
                    r = new XToastItem;
                for (let t = 0; t < e.length; ++t) {
                    let s = e[t];
                    r.addChild(s), s.centerY = 0, s.x = i, s.top = n, i = s.x + s.width, n = Math.max(n, s.height), a = i + 40
                }
                n += 50, r.size(a, n), r.x = Laya.stage.width / 2, r.y = 300, r.bg.skin = s.TipsBg, r.showWithAni(t)
            }
            static showLabelTips(e, t = 1, i) {
                if (e.length > 0) {
                    let s = [];
                    e.forEach(e => s.push(this.createLabel(e.text, e.color, !0, i))), this.showNodes(s, t)
                }
            }
        }
        XToast.list = [];
        class R extends e.ui.scenes.panel.angelOrGhost.AogChooseDialogUI {
            constructor(e, t) {
                super(), t && (this.cb = t.cb)
            }
            onAwake() {
                this.isGhost = XRandomUtil.getNumberRandom(0, 1) <= .5, this.initUI(), this.lb_countdown.text = "5", Laya.timer.loop(1e3, this, this.countdown)
            }
            countdown() {
                this.destroyed && Laya.timer.clear(this, this.countdown);
                let e = Number(this.lb_countdown.text); - 1 == (e -= 1) ? (Laya.timer.clear(this, this.countdown), this.closePanel()) : this.lb_countdown.text = `${e}`
            }
            initUI() {
                this.initBoxGhost(), this.initBoxAngel()
            }
            initBoxGhost() {
                let e = this.box_ghost.getChildByName("img_itemBg"),
                    t = this.box_ghost.getChildByName("btn_buy"),
                    i = this.box_ghost.getChildByName("btn_close");
                this.isGhost ? (e.skin = "res/ui/angelOrGhost/choose/img_itemBg_2.png", t.visible = !1, i.on(Laya.Event.CLICK, this, this.closePanel)) : (e.skin = "res/ui/angelOrGhost/choose/img_itemBg_1.png", i.visible = !1, t.on(Laya.Event.CLICK, this, this.changeCamp))
            }
            initBoxAngel() {
                let e = this.box_angle.getChildByName("img_itemBg"),
                    t = this.box_angle.getChildByName("btn_buy"),
                    i = this.box_angle.getChildByName("btn_close");
                this.isGhost ? (e.skin = "res/ui/angelOrGhost/choose/img_itemBg_1.png", i.visible = !1, t.on(Laya.Event.CLICK, this, this.changeCamp)) : (e.skin = "res/ui/angelOrGhost/choose/img_itemBg_2.png", t.visible = !1, i.on(Laya.Event.CLICK, this, this.closePanel))
            }
            changeCamp() {
                let e = t.user.gameInfo;
                e.tianEnough(1) ? (e.useTian(1), this.isGhost = !this.isGhost, this.closePanel()) : XToast.show("天师令不足")
            }
            closePanel() {
                t.ui.close(this), this.cb && this.cb.runWith(this.isGhost)
            }
        }
        class XCoordinateUtil {
            static getAnchorPos(e) {
                let t = new fx.V2;
                return e instanceof Laya.UIComponent && (isNaN(e.anchorX) || (t.x = e.width * e.anchorX), isNaN(e.anchorY) || (t.y = e.height * e.anchorY)), t
            }
            static convertCenterToNodeSpaceAR(e, t) {
                let i = new Laya.Point(.5 * e.width, .5 * e.height);
                return e.localToGlobal(i), t.globalToLocal(i), new fx.V2(i.x, i.y)
            }
            static convertToNodeSpaceAR(e, t, i) {
                let s = XCoordinateUtil.localAnchorToGlobal(e, new Laya.Point(t.x, t.y));
                return i.globalToLocal(s), new fx.V2(s.x, s.y)
            }
            static localAnchorToGlobal(e, t) {
                t = t || new Laya.Point;
                let i = isNaN(e.anchorX) ? 0 : e.anchorX,
                    s = isNaN(e.anchorY) ? 0 : e.anchorY;
                return t.x = e.width * i, t.y = e.height * s, e.localToGlobal(t), t
            }
            static localCenterToGlobal(e, t) {
                return (t = t || new Laya.Point).x = .5 * e.width, t.y = .5 * e.height, e.localToGlobal(t), t
            }
            static localToAnchorSpace(e, t) {
                let i = isNaN(e.anchorX) ? 0 : e.anchorX,
                    s = isNaN(e.anchorY) ? 0 : e.anchorY,
                    a = e.x - e.width * i,
                    n = e.y - e.height * s;
                return new fx.V2(a + t.x, n + t.y)
            }
            static isTouchInNodeRect(e, t) {
                let i = new Laya.Point(t.x, t.y);
                return e.globalToLocal(i), !(i.x < 0 || i.x > e.width || i.y < 0 || i.y > e.height)
            }
            static getBoundingBoxToWorld(e) {}
            static isTwoNodesIntersects(e, t) {}
            static exchangeNodeParent(e, t) {
                var i = e.parent,
                    s = e.getPosition();
                e.parent = t.parent, e.setPosition(t.getPosition()), t.parent = i, t.setPosition(s)
            }
            static getNodesCenterPos(e) {}
            static getNodeFullPath(e) {}
            static getScrollViewContentItemCenterOffest(e, t, i, s) {}
            static addToTopLayer(e, t = 0) {
                for (let t = 0; t < this.topNodes.length; ++t)
                    if (this.topNodes[t].node == e) return;
                e.on(Laya.Event.REMOVED, this, () => {
                    for (let t = 0; t < this.topNodes.length; ++t)
                        if (this.topNodes[t].node == e) {
                            this.topNodes.splice(t, 1);
                            break
                        }
                }), this.topNodes.push({
                    node: e,
                    order: t
                }), this.topNodes.sort((e, t) => e.order - t.order), Laya.TouchManager.I.getEles = ((e, t = null, i = null) => {
                    for (i ? i.length = 0 : i = []; e && e != t;) i.push(e), e = e.parent;
                    for (const e of this.topNodes) e.visible && i.unshift(e.node);
                    return i
                })
            }
        }
        XCoordinateUtil.topNodes = [];
        class XChoreUtil {
            static random(e) {
                return Math.random() * e
            }
            static randomRange(e, t) {
                return Math.floor(Math.random() * (t - e)) + e
            }
            static randomInt(e) {
                return Math.floor(90071992547400 * Math.random()) % e
            }
            static getRandIndex(e, t) {
                if (null == t) {
                    t = 0;
                    for (const i of e) t += i
                }
                let i = XChoreUtil.random(t),
                    s = 0;
                for (let t = 0; t < e.length; t++)
                    if (i < (s += e[t])) return t;
                return e.length - 1
            }
            static getElementByWeight(e, t, i) {
                t || (t = (e => e));
                let s = e.map((e, i) => t(e));
                return e[XChoreUtil.getRandIndex(s, i)]
            }
            static wait(e) {
                return new Promise(function(t) {
                    setTimeout(t, 1e3 * e)
                })
            }
            static sleep(e, t) {
                return new Promise((i, s) => {
                    e.scheduleOnce(i, t)
                })
            }
            static playSound(e, t) {
                if (Laya.isWXPlayable && window.wx) {
                    let t = fx.CfgMgr.instance.get("soundCfg", e);
                    if (!t) return;
                    let i = wx.createInnerAudioContext({
                        useWebAudioImplement: !0
                    });
                    return XChoreUtil.audioPool.push(i), i.autoplay = !0, i.src = t, void i.onEnded(() => {
                        let e = XChoreUtil.audioPool.indexOf(i); - 1 != e && XChoreUtil.audioPool.splice(e, 1), i.destroy()
                    })
                }
                e = this.soundABTest(e), fx.SoundManager.instance.playSoundById(e, t)
            }
            static stopSound(e) {
                if (Laya.isWXPlayable && window.wx) {
                    let t = fx.CfgMgr.instance.get("soundCfg", e);
                    if (!t) return;
                    for (let e = XChoreUtil.audioPool.length - 1; e >= 0; --e) XChoreUtil.audioPool[e].src == t && (XChoreUtil.audioPool[e].stop(), XChoreUtil.audioPool.splice(e, 1))
                }
                e = this.soundABTest(e), fx.SoundManager.instance.stopSoundById(e)
            }
            static playMusic(e) {
                if (Laya.isWXPlayable && window.wx) {
                    let t = fx.CfgMgr.instance.get("soundCfg", e);
                    if (!t) return;
                    if (this.musicAudio) return;
                    let i = wx.createInnerAudioContext({
                        useWebAudioImplement: !1
                    });
                    return i.autoplay = !0, i.loop = !0, i.src = t, void(this.musicAudio = i)
                }
                e = this.soundABTest(e), fx.SoundManager.instance.playMusicById(e)
            }
            static stopMusic() {
                Laya.isWXPlayable && window.wx || fx.SoundManager.instance.stopMusic()
            }
            static soundABTest(e) {
                return e
            }
            static adaptNode(e, t, i, s = !1, a) {
                const n = function(n, r) {
                    if (a) {
                        let a = t / n,
                            o = i / r,
                            l = s ? Math.max(a, o) : Math.min(a, o);
                        e.scaleX = e.scaleY = l
                    } else {
                        let a = n / r,
                            o = a * i,
                            l = t / a;
                        s ? o * i > t * l ? (n = o, r = i) : (n = t, r = l) : o * i < t * l ? (n = o, r = i) : (n = t, r = l), e.width = n, e.height = r
                    }
                };
                if (e instanceof Laya.Image && "img_bg" != e.name) {
                    if (e._RegisterLoaded) return;
                    e._RegisterLoaded = !0, e._bitmap && e._bitmap._source && (e.width = e._bitmap._source.sourceWidth || e._bitmap._source.width, e.height = e._bitmap._source.sourceHeight || e._bitmap._source.height, n(e.width, e.height)), e.on(Laya.Event.LOADED, this, () => {
                        e.destroyed || e._bitmap && e._bitmap._source && (e.width = e._bitmap._source.sourceWidth || e._bitmap._source.width, e.height = e._bitmap._source.sourceHeight || e._bitmap._source.height, n(e.width, e.height))
                    })
                } else n(e.width, e.height)
            }
            static createHtmlLabel(e, t, i) {
                if (e instanceof fx.HtmlText) return e;
                t = t || 22;
                let s = new fx.HtmlText("richText");
                s.style.leading = 15, s.style.wordWrap = !0, s.style.width = i || e.width;
                let a = `color:#FFFFFF;font:${t}px Arial;`;
                s.defaultStyle = a, s.x = e.x, s.y = e.y, s.name = e.name;
                let n = e.parent.getChildIndex(e);
                return e.parent.addChildAt(s, n), e.destroy(), s
            }
            static startCD(e, t, i, s) {
                this.stopCD(e), e.offAllCaller(this), e.text = i(t), e.__cdHandle = (() => {
                    t -= 1, t = Math.max(t, 0), e.text = i(t), 0 == t && (this.stopCD(e), s && s())
                }), e.timerLoop(1e3, e, e.__cdHandle), e.on(Laya.Event.REMOVED, this, this.stopCD, [e])
            }
            static stopCD(e) {
                e.__cdHandle && (e.timer.clear(e, e.__cdHandle), e.__cdHandle = null)
            }
            static jump(e, t, i, s, a, n) {
                let r = new fx.V2(e.x, e.y),
                    o = {
                        t: "update",
                        target: null,
                        props: {
                            _fx_sequenceJump: 1
                        },
                        ease: a,
                        duration: 1e3 * t,
                        update: (t, a) => {
                            let n = r.lerp(i, a),
                                o = i.lerp(s, a),
                                l = n.lerp(o, a);
                            e.pos(l.x, l.y)
                        }
                    },
                    l = new fx.Sequence;
                l.pushAction(o), n && l.exec(new Laya.Handler(this, () => {
                    n()
                })), l.run(e)
            }
            static playUIFrameAni(e, t, i, s) {
                this.stopAllUIFrameAni(e);
                let a = fx.Utils.getUIFrameAnimation(e, t);
                a.play(0, i), s ? (a.offAllCaller(this), a.on(Laya.Event.COMPLETE, this, s)) : a.offAllCaller(this)
            }
            static stopAllUIFrameAni(e) {
                let t = e._aniList;
                if (t && t.length > 0)
                    for (const e of t) e.stop()
            }
            static NumberToSize(e, t, i) {
                void 0 === i && (i = null);
                try {
                    t || (t = 0);
                    var s = "0";
                    return e < 1e4 ? s = e - Math.floor(e) < 1e-4 && e - Math.floor(e) > -1e-4 || e >= 100 || i ? e.toFixed(0) : e.toFixed(t) : e >= 1e4 && e < 1e8 ? s = e >= 1e5 ? (e / 1e4).toFixed(0) + "万" : (e / 1e4).toFixed(t) + "万" : e >= 1e8 && e < 1e12 ? s = e >= 1e9 ? (e / 1e8).toFixed(0) + "亿" : (e / 1e8).toFixed(t) + "亿" : e >= 1e12 && e < 1e16 ? s = e >= 1e13 ? (e / 1e12).toFixed(0) + "万亿" : (e / 1e12).toFixed(t) + "万亿" : e >= 1e16 && (s = e >= 1e17 ? (e / 1e16).toFixed(0) + "亿亿" : (e / 1e16).toFixed(t) + "亿亿"), s
                } catch (e) {
                    return console.log("NumberToSize err", e), "0"
                }
            }
            static formatStr(e, t) {
                if (null == t || 0 == t.length) return e;
                for (let i = 0; i < t.length; i++) {
                    let s = new RegExp(`\\{${i}\\}`, "g"),
                        a = t[i];
                    e = e.replace(s, a)
                }
                return e
            }
            static addChildTo(e, t) {
                let i = XCoordinateUtil.localAnchorToGlobal(e);
                t.globalToLocal(i), t.addChild(e), e.pos(i.x, i.y)
            }
            static setFont(e, i, s) {
                s = s || a.main, e.___bmfontSize || (e.___bmfontSize = e.fontSize);
                let n = 1.2 * e.___bmfontSize;
                e.fontSize = n, t.assetLoader.setBmfont(e, s, i, !0)
            }
            static isClassInherited(e, t) {
                let i = Object.getPrototypeOf(e);
                for (; null !== i;) {
                    if (i === t) return !0;
                    i = Object.getPrototypeOf(i)
                }
                return !1
            }
        }
        XChoreUtil.audioPool = [], XChoreUtil.musicAudio = null;
        class V {}
        V.gameID = "tangpingmengjing", V.shushuId = "18c8add6caf4476e8958d9430676d511", V.version = "1.3.7", V.platform = e.PlatformType.WEIXIN, V.serverURL = "https://idauth.cdwaterbear.cn", V.remoteUrl = `https://cdn.105775.cn/${V.gameID}/remote/${V.version}/`, V.remotefiles = ["res"], V.remotePublish = !0, V.cacheExcludes = [], V.cfg_url = `https://cdn.105775.cn/${V.gameID}/cfg`, V.patch_url = `https://cdn.105775.cn/${V.gameID}/patch`, V.local_share_title = "", V.local_share_image = "", V.cloudAppId = 53853, V.appId = "wx5b1a2c62d994ea51", V.channel_AdIds = {
            videoId: "adunit-586667b484b94e80",
            nativeAdId: ["", ""],
            bannerId: "",
            interstitialId: "",
            appBoxId: "",
            blockId: ""
        }, V.server_cfg_url = "", V.showBQ = !1, V.isDebug = !1;
        class XIAD {
            preloadCustomAd() {}
            showCustomAd() {}
            hideCustomAd() {}
            share(e, t, i, s = "") {}
        }
        class z extends XIAD {
            preloadCustomAd() {}
            showCustomAd() {}
            hideCustomAd() {}
            share(e, t, i) {
                window.my && window.my.showSharePanel && window.my.showSharePanel({
                    success: e => {
                        fx.Utils.showTips("分享成功~"), t()
                    },
                    fail: e => {
                        fx.Utils.showTips("分享失败~")
                    }
                })
            }
        }
        class q extends XIAD {
            preloadCustomAd() {}
            showCustomAd() {}
            hideCustomAd() {}
            share(e, t, i) {
                ks.shareAppMessage({
                    success: () => {
                        t && t(!0)
                    },
                    fail: () => {
                        t && t(!1)
                    }
                })
            }
        }
        class W extends XIAD {
            preloadCustomAd() {}
            showCustomAd() {}
            hideCustomAd() {}
            share(e, i, s) {
                XToast.show("pc分享成功");
                let a = `&helpUserID=${t.user.userInfo.userID}`;
                console.log("shareToFriend ", a), i && i(!0)
            }
            subscribeMessage() {}
        }
        class K extends XIAD {
            preloadCustomAd() {}
            showCustomAd() {}
            hideCustomAd() {}
            share(e, t, i) {}
        }
        //====================
        class XAnalyticsUtil {
            static canReport() {
                return !Laya.isWXPlayable && !fx.Utils.isOnPC()
            }
            static formatTimestamp(e) {
                const t = new Date(e);
                return `${t.getFullYear()}-${String(t.getMonth()+1).padStart(2,"0")}-${String(t.getDate()).padStart(2,"0")} ${String(t.getHours()).padStart(2,"0")}:${String(t.getMinutes()).padStart(2,"0")}:${String(t.getSeconds()).padStart(2,"0")}`
            }
            static setAccountId(e) {
                this.canReport() && TDAnalytics.login(e)
            }
            static setSuperProperties(e) {
                this.canReport() && TDAnalytics.setSuperProperties(e)
            }
            static track(e, t = {}) {
                this.canReport() && TDAnalytics.track({
                    eventName: e,
                    properties: t
                })
            }
            static userSetOnce(e) {
                this.canReport() && TDAnalytics.userSetOnce({
                    properties: e
                })
            }
            static userSet(e) {
                this.canReport() && TDAnalytics.userSet({
                    properties: e
                })
            }
            static userAdd(e) {
                TDAnalytics.userAdd({
                    properties: e
                })
            }
            static onLoginServer(e, t, i) {
                this.setAccountId(e), this.track("login_server", {
                    is_first_time: i
                }), this.userSetOnce({
                    open_id: e,
                    player_id: t
                })
            }
            static onVideoClick(e) {
                this.levelAd_clickCnt++, this.track("video_click", {
                    source: e
                })
            }
            static onVideoShow(e) {
                this.levelAd_showCnt++, this.userSetOnce({
                    first_ad_time: this.formatTimestamp(Date.now())
                }), this.track("video_show", {
                    source: e
                }), this.userAdd({
                    total_ad_cnt: 1
                })
            }
            static onVideoFinish(e) {
                this.levelAd_finishCnt++, this.track("video_finish", {
                    source: e
                })
            }
            static onLevelChange(e) {
                this.userSet({
                    level_id: e
                }), this.setSuperProperties({
                    level_id: e
                })
            }
            static onHunterLevelChange(e) {
                this.userSet({
                    hunter_level_id: e
                }), this.setSuperProperties({
                    hunter_level_id: e
                })
            }
            static enterLevel(e, t = "") {
                this.levelId = e, this.levelItems = {}, this.level_enterTime = Date.now(), this.levelAd_clickCnt = 0, this.levelAd_showCnt = 0, this.levelAd_finishCnt = 0, this.track("level_enter", {
                    enter_level_id: this.levelId,
                    game_mode: t
                })
            }
            static passLevel(e, t = "", i = "默认") {
                let s = (Date.now() - this.level_enterTime) / 1e3;
                s = Math.round(100 * s) / 100;
                let a = [];
                for (const e in this.levelItems) a.push({
                    item_name: e,
                    item_num: this.levelItems[e]
                });
                this.track("level_pass", {
                    enter_level_id: this.levelId,
                    ad_cnt: this.levelAd_showCnt,
                    items: a,
                    duration: s,
                    game_mode: t,
                    role: i,
                    win_method: e
                })
            }
            static loseLevel(e = "", i = "") {
                let s = (t.gameTime.now - this.level_enterTime) / 1e3;
                s = Math.round(100 * s) / 100;
                let a = [];
                for (const e in this.levelItems) a.push({
                    item_name: e,
                    item_num: this.levelItems[e]
                });
                this.track("level_lose", {
                    enter_level_id: this.levelId,
                    ad_cnt: this.levelAd_showCnt,
                    items: a,
                    duration: s,
                    game_mode: e,
                    role: i
                })
            }
            static exitLevel(e = "", i = "") {
                let s = (t.gameTime.now - this.level_enterTime) / 1e3;
                s = Math.round(100 * s) / 100;
                let a = [];
                for (const e in this.levelItems) a.push({
                    item_name: e,
                    item_num: this.levelItems[e]
                });
                this.track("level_exit", {
                    enter_level_id: this.levelId,
                    ad_cnt: this.levelAd_showCnt,
                    items: a,
                    duration: s,
                    game_mode: e,
                    role: i
                })
            }
            static useLevelItem(e) {
                this.levelItems[e] || (this.levelItems[e] = 0), this.levelItems[e] ++, this.track("use_item", {
                    item_name: e
                })
            }
            static clickStart(e) {
                let t = (Date.now() - this.level_enterTime) / 1e3;
                t = Math.round(100 * t) / 100, this.track("click_start", {
                    game_mode: e
                })
            }
            static clickBack(e) {
                let t = (Date.now() - this.level_enterTime) / 1e3;
                t = Math.round(100 * t) / 100, this.track("click_back", {
                    game_mode: e
                })
            }
            static shopBuyProp(e, t) {
                this.track("buy_prop", {
                    prop_name: e,
                    buy_prop_med: t
                })
            }
            static getSkin(e) {
                let i = t.user.gameInfo.getSkinCnt();
                this.track("get_skin", {
                    skin_id: e,
                    skin_cnt: i
                })
            }
            static lotSkinCnt(e) {
                let i = t.user.gameInfo.getFragmentCnt;
                this.track("lot_skin_cnt", {
                    lot_skin_cnt: i,
                    lot_type: e
                })
            }
            static lotteryCnt(e) {
                this.track("lottery_cnt", {
                    player_lot_med: e
                })
            }
            static share(e = "") {
                this.track("share", {
                    source: e
                })
            }
            static acceptShare(e = "", t = "", i = "") {
                this.track("accept_share", {
                    title: e,
                    url: t,
                    source: i
                })
            }
            static tipsShow() {
                this.track("tip_show", {
                    source: "打开"
                })
            }
            static tipsClick() {
                this.track("tip_click", {
                    source: "关闭"
                })
            }
            static enterMainScene(e) {
                this.track("enter_mainscene", {
                    is_first: e
                })
            }
            static clubReward(e) {
                this.track("club_reward", {
                    source: e
                })
            }
            static evaluateReward() {
                this.track("evaluate_reward")
            }
            static clubGiftReward(e) {
                this.track("clubGift_reward", {
                    source: e
                })
            }
            static buffGet(e, t) {
                this.track("buff_get", {
                    buff_name: e,
                    buff_level: t
                })
            }
            static buffBack(e) {
                this.track("buff_back", {
                    level_id: e
                })
            }
            static setLoadingABTest(e) {
                this.userSet({
                    abtest_loading: e
                })
            }
            static setSkillABTest(e) {
                this.userSet({
                    abtest_hunterSkill: e
                })
            }
            static setSubscribeABTest(e) {
                this.userSet({
                    abtest_subscribe: e
                })
            }
            static setTaskOrderABTest(e) {
                this.userSet({
                    abtest_taskOrder: e
                })
            }
        }
        XAnalyticsUtil.levelId = 0, XAnalyticsUtil.levelItems = {}, XAnalyticsUtil.level_enterTime = 0, XAnalyticsUtil.levelAd_clickCnt = 0, XAnalyticsUtil.levelAd_showCnt = 0, XAnalyticsUtil.levelAd_finishCnt = 0;
        ////serverStorage
        class XEventDispatcher extends Laya.EventDispatcher {
            constructor() {
                super(...arguments), this._isRelogin = !1
            }
            static get I() {
                return this._instance || (this._instance = new XEventDispatcher), this._instance
            }
            async init(e, i, s, a) {
                this._serverUrl = e, this._gameID = i, this._platform = s;
                let n = (e, i) => {
                    e ? this.getStorage(e => {
                        a && a(e)
                    }) : 1005 == i ? t.ui.showMessageDialog({
                        title: "提示",
                        content: "平台校验失败，请重试",
                        showSureBtn: !0,
                        onSure: () => {
                            j.I.login({
                                onFinish: e => {
                                    e.code == sdk.SdkCode.WX_LOGIN_SUCCESS ? this.loginServer(n) : t.ui.showMessageDialog({
                                        content: "平台登录失败，请重试",
                                        showSureBtn: !0,
                                        onSure: () => {
                                            this.loginServer(n)
                                        }
                                    }, !0)
                                }
                            })
                        }
                    }, !0) : a(null)
                };
                this.loginServer(n)
            }
            get serverUrl() {
                return this._serverUrl
            }
            get token() {
                return this._token
            }
            get openID() {
                return this._openID
            }
            isLogin() {
                return !!this._openID
            }
            async loginServer(e) {
                let i = this._serverUrl + "/createaccount",
                    s = sdk.Sdk.instance.getLoginCode(),
                    a = sdk.Sdk.instance.getLoginAnonymousCode(),
                    n = 1,
                    r = "",
                    o = "",
                    l = "",
                    h = 1,
                    d = sdk.Sdk.instance.getLaunchOptionsSync();
                if (d) {
                    console.log(`checkInviteOptions:${JSON.stringify(d)}`);
                    let e = d.query;
                    console.log(`checkInviteQuery:${JSON.stringify(e)}`), e && e.helpUserID && (l = e.helpUserID), d.chatType && (h = d.chatType), e && e.title && e.url && XAnalyticsUtil.acceptShare(e.title, e.url, e.source)
                }
                fx.Utils.isOnPC() && (n = 0, r = Laya.LocalStorage.getItem("_token"), o = Laya.LocalStorage.getItem("_openid"), s = fx.Utils.createUUID(), l = Laya.LocalStorage.getItem("_inviteId"), h = 3);
                let u, g = {
                    gameID: this._gameID,
                    platform: this._platform,
                    jwt: r,
                    third: {
                        code: s,
                        anonymous_code: a,
                        openid: o
                    },
                    strict: n,
                    inviteId: l || "",
                    chatType: h,
                    shushuId: ""
                };
                if (window.TDAnalytics_Config) {
                    if (!window.TDAnalytics_Config.gameID) return void t.ui.showMessageDialog({
                        content: "没有配置数数的gameID",
                        showSureBtn: !0,
                        onSure: () => {}
                    });
                    if (this._gameID != window.TDAnalytics_Config.gameID) return void t.ui.showMessageDialog({
                        content: "数数的gameID配置错误",
                        showSureBtn: !0,
                        onSure: () => {}
                    });
                    if (this._platform != window.TDAnalytics_Config.platform) return void t.ui.showMessageDialog({
                        content: "数数的platform配置错误",
                        showSureBtn: !0,
                        onSure: () => {}
                    });
                    g.shushuId = window.TDAnalytics_Config.shushuId
                }
                if ((u = await t.http.send(i, "POST", g, 10)) && u.jwt && u.user && u.user.udid) XAnalyticsUtil.onLoginServer(u.user.udid, u.user.pid, !!u.isNew), this._token = u.jwt, this._openID = u.user.udid, this._userID = u.user.uid, t.user.userInfo.userID = this._userID, t.user.userInfo.playerID = u.user.pid, t.user.userInfo.createTime = u.user.createTime || 0, console.log("http 登录成功!", u), t.gameTime.setTime(u.time), t.user.userInfo.token = this._token, t.user.userInfo.openid = this._openID, t.user.userInfo.isNewPlayer = !!u.isNew, fx.Utils.isOnPC() && (Laya.LocalStorage.setItem("_token", this._token), Laya.LocalStorage.setItem("_openid", this._openID)), e(!0);
                else {
                    if (u && 5013 == u.code) return void t.ui.showMessageDialog({
                        content: "数数id错误",
                        showSureBtn: !0,
                        onSure: () => {}
                    });
                    e && e(!1, u && u.code)
                }
            }
            relogin(e) {
                this._isRelogin = !0, this._token = null, console.log("重连..."), e--, Laya.timer.clearAll(this), j.I.login({
                    onFinish: t => {
                        if (t.code == sdk.SdkCode.WX_LOGIN_SUCCESS) {
                            let t = (t, i) => {
                                t ? (console.log("重连成功..."), this._isRelogin = !1) : (console.log("服务器登录失败，5秒后重试"), Laya.timer.once(5e3, this, () => {
                                    this.relogin(e)
                                }))
                            };
                            console.log("重连sdk登录成功，1秒后登录服务器..."), Laya.timer.once(1e3, this, () => {
                                this.loginServer(t)
                            })
                        } else console.log("sdk登录失败！，5秒后重试"), Laya.timer.once(5e3, this, () => {
                            this.relogin(e)
                        })
                    }
                })
            }
            async getStorage(e) {
                if (!this._token) return console.log("getStorage 请先登录"), e && e(!1), null;
                let i, s = this._serverUrl + "/getStorage",
                    a = {
                        gameID: this._gameID,
                        platform: this._platform,
                        openID: this._openID,
                        userID: this._userID
                    };
                i = await t.http.send(s, "POST", a, 10, this._token), e && e(i)
            }
            async upload(e, i) {
                if (!this._token) return console.log("upload 请先登录"), void(i && i(!1));
                let s, a = this._serverUrl + "/upload",
                    n = {
                        gameID: this._gameID,
                        platform: this._platform,
                        openID: this._openID,
                        userID: this._userID,
                        data: e
                    };
                s = await t.http.send(a, "POST", n, 5, this._token), this.checkToken(s), i && i(s)
            }
            async deleteStorage(e) {
                if (!this._token) return console.log("deleteStorage 请先登录"), void(e && e(!1));
                let i, s = this._serverUrl + "/setStorage",
                    a = {
                        gameID: this._gameID,
                        platform: this._platform,
                        openID: this._openID,
                        userID: this._userID,
                        data: ""
                    };
                i = await t.http.send(s, "POST", a, 5, this._token), this.checkToken(i), e && e(i)
            }
            async getInviteList() {
                let e, i = this._serverUrl + "/getInvite",
                    s = {
                        gameID: this._gameID,
                        platform: this._platform,
                        openID: this._openID,
                        userID: this._userID
                    };
                return e = await t.http.send(i, "POST", s, 5, this._token), this.checkToken(e), e
            }
            async getIpInfo() {
                let e, i = this._serverUrl + "/getIpInfo";
                return (e = await t.http.send(i, "POST", {}, 5, this._token)) && e.info, this.checkToken(e), e
            }
            checkToken(e) {
                e && (5004 == e.code ? t.ui.showMessageDialog({
                    content: "账号已在其他地方登录",
                    showSureBtn: !0,
                    onSure: () => {
                        Laya.LocalStorage.clear(), j.I.exitGame()
                    }
                }) : -1 == e.code && (this._isRelogin || this.relogin(5)))
            }
            async send(e, i, s, a = 10, n, r) {
                let o;
                return o = await t.http.send(e, i, s, a, n, r), this.checkToken(o), o
            }
        }! function(e) {
            e[e.None = 0] = "None", e[e.Loading = 1] = "Loading", e[e.Loaded = 2] = "Loaded"
        }(N || (N = {}));
        //广告分享类
        class Y {
            constructor() {
                this.customAdStatus = N.None, this.customAdIsShow = !1, Laya.stage.on(Laya.Event.STAGE_MOUSEDOWN, this, this.onStageMouseDown)
            }
            onStageMouseDown() {
                fx.EventCenter.I.off(fx.BaseEvent.E_APP_ON_RESUME, this, this.onShareAppResume)
            }
            createCustomAd() {
                this.customAdStatus = N.Loading;
                let e = sdk.Sdk.instance.getSystemInfo(),
                    t = 120 * e.screenWidth / 375;
                this.customAd = wx.createCustomAd({
                    adUnitId: V.channel_AdIds.blockId,
                    adIntervals: 30,
                    style: {
                        left: 0,
                        top: e.screenHeight - t,
                        width: e.screenWidth
                    }
                }), this.customAd.onError(e => {
                    console.log("----原生模板 onError---"), console.error(e.errMsg)
                }), this.customAd.onLoad(() => {
                    this.customAdStatus = N.Loaded, console.log("----原生模板 onLoad---")
                }), this.customAd.onHide(() => {
                    console.log("----原生模板 onHide---")
                })
            }
            preloadCustomAd() {
                this.createCustomAd()
            }
            showCustomAd() {
                this.customAd || this.createCustomAd(), this.customAdIsShow = !0, this.customAd.show()
            }
            hideCustomAd() {
                this.customAd && (this.customAd.destroy(), this.customAd = null, this.customAdIsShow = !1), this.preloadCustomAd()
            }
            share(e, i, s, a = "") {
                i && (this._shareTime = Date.now(), fx.EventCenter.I.off(fx.BaseEvent.E_APP_ON_RESUME, this, this.onShareAppResume), fx.EventCenter.I.once(fx.BaseEvent.E_APP_ON_RESUME, this, this.onShareAppResume, [e, i, s]));
                let n = this.getShareInfo(),
                    r = `&helpUserID=${t.user.userInfo.userID}&title=${n.title}&url=${n.url}&source=${a}`;
                console.log("shareToFriend ", r), e ? sdk.Sdk.instance.shareCustom(n.title, "", "", r, "") : sdk.Sdk.instance.shareCustom(n.title, "", n.url, r, "")
            }
            getShareInfo() {
                let e = t.controller.versionData;
                if (e && e.shareCfg && e.shareCfg.length > 0) {
                    let t = fx.Utils.randomInArray(e.shareCfg);
                    return {
                        title: t.title,
                        url: t.image
                    }
                }
                return {
                    title: "",
                    url: ""
                }
            }
            tipsShareFail(e, i, s) {
                let a = "",
                    n = "分享失败，请分享到群",
                    r = ["该群分享过，请分享到不同群", "请分享到20人以上群", "操作失败，请换个群"],
                    o = t.cfg.constant.shareOps;
                o && (n = n || o.firstTips, o.tipsList && o.tipsList.length > 0 && (r = o.tipsList)), a = e ? n : fx.Utils.randomInArray(r), sdk.Sdk.instance.showModal(a, "温馨提示", "分享到群", Laya.Handler.create(this, () => {
                    this.share(i, s, !0)
                }), "不，谢谢", Laya.Handler.create(this, () => {
                    s(!1)
                }))
            }
            onShareAppResume(e, i, s) {
                if (0 == t.user.commonInfo.shareCnt) return t.user.commonInfo.shareCnt++, t.user.saveToServer(), void this.tipsShareFail(!0, e, i);
                t.user.commonInfo.shareCnt++, t.user.saveToServer();
                let a = 1,
                    n = 3,
                    r = t.cfg.constant.shareOps;
                r && (a = r.pro || .9, n = r.time || 3), s && fx.Utils.randomByRate(a) ? i(!0) : Date.now() - this._shareTime > 1e3 * n ? i(!0) : this.tipsShareFail(!1, e, i)
            }
            showShareImageMenu(e) {
                let i = t.controller.versionData.shareImages;
                if (!i || 0 == i.length) return console.log(""), void this.share(!1, e);
                let s = window.wx;
                if (s) {
                    const t = s.getAppBaseInfo().SDKVersion;
                    if (fx.Utils.compareVersion(t, "3.2.0") >= 0) return void s.downloadFile({
                        url: "https://cdn.105775.cn/huashiningluosi/share/share.png",
                        success: t => {
                            console.log("showShareImageMenu 55 " + t.tempFilePath), s.showShareImageMenu({
                                needShowEntrance: !0,
                                path: t.tempFilePath,
                                success: () => {
                                    e && e()
                                }
                            })
                        },
                        fail: () => {
                            console.log("下载海报图片失败，走普通分享!")
                        }
                    })
                }
                this.share(!1, e)
            }
            subscribeMessage() {
                let e = wx.getSystemInfoSync().SDKVersion;
                if (fx.Utils.compareVersion(e, "2.3.0") < 0) return void console.log(`当前微信版本过低（${e}）需升级到2.3.0及以上版本`);
                if (t.user.commonInfo.isSubscribe) return;
                let i = t.controller.versionData;
                if (i && i.subscribeCfg) {
                    let e = [],
                        s = [];
                    for (let t = 0; t < i.subscribeCfg.length; t++) {
                        const a = i.subscribeCfg[t];
                        a.id && a.type && (e.push(a.id), s.push(a.type))
                    }
                    if (0 == e.length) return;
                    t.user.commonInfo.setSubscribe(), wx.requestSubscribeMessage({
                        tmplIds: e,
                        async success(i) {
                            console.log("今天订阅成功", i);
                            let a = {
                                gameID: V.gameID,
                                platform: V.platform,
                                templates: [],
                                isRefresh: !1
                            };
                            for (let n = 0; n < e.length; ++n)
                                if ("accept" == i[e[n]]) {
                                    let i = {
                                        openId: t.user.userInfo.openid,
                                        templateID: e[n],
                                        type: s[n]
                                    };
                                    a.templates.push(i)
                                }
                            let n = XEventDispatcher.I.serverUrl + "/wxSubscribe";
                            await XEventDispatcher.I.send(n, "POST", a, 10, t.user.userInfo.token)
                        },
                        fail(e) {
                            console.log("订阅失败", e)
                        }
                    })
                }
            }
        }
        //广告分享类
        class j {
            constructor() {
                this._videobindCtrlGId = -8888, this._videoStrategyInst = void 0, Laya.isWXPlayable || (this.initSdkInst(), sdk.Sdk.isOnWeiXin() || (this.createVideoStrategy(), fx.EventCenter.I.on(sdk.SdkEvent.E_REWARD_GAIN, this, this.onRewardGain)))
            }
            static get I() {
                return this._instance || (this._instance = new j), this._instance
            }
            initSdkInst() {
                sdk.Sdk.isOnWeiXin() ? (this._sdkInst = new Y, this.loadRecommend()) : sdk.Sdk.isOnKuaiShou() ? this._sdkInst = new q : sdk.Sdk.isOnALIPAY() ? this._sdkInst = new z : sdk.Sdk.isOnToutiao() ? this._sdkInst = new K : this._sdkInst = new W
            }
            preloadAd() {
                sdk.Sdk.isOnWeiXin() ? j.I.initWxVideo() : sdk.Sdk.instance.preloadVideo()
            }
            createVideoStrategy() {
                this._videoStrategyInst = sdk.Sdk.instance.getRewardStrategyInst(), this._videoGainWayParams = new sdk.RewardGainWayParams({
                    source: "",
                    bindCtrlGId: this._videobindCtrlGId,
                    id: sdk.Sdk.instance.getVideoId(),
                    forever: !1
                }), this._videoStrategyInst.setCurStrategy(sdk.GetRewardSDKWay.VIDEO, this._videoGainWayParams)
            }
            onRewardGain(e) {
                if (fx.Utils.setTimerSpeed(1), e.gid == this._videobindCtrlGId) {
                    if (e.code == sdk.SdkCode.REWARD_GAIN_SUCCESS) {
                        let e = "";
                        this._videoGainWayParams && this._videoGainWayParams.source && (e = this._videoGainWayParams.source), t.reporter.playVideo(e), t.user.gameInfo.isGetTian || (t.user.gameInfo.isGetTian = !0, t.user.gameInfo.addTian(1), t.user.saveToServer(), XToast.show("获得天师令*1")), XAnalyticsUtil.onVideoFinish(e)
                    }
                    this.onVideoComplete(e)
                }
            }
            playVideo(e, i, s, a, n) {
                window.__GMSkipAd ? i && s && s.apply(i, [!0]) : (t.reporter.startPlayVideo(e), XAnalyticsUtil.onVideoClick(e), fx.Utils.setTimerSpeed(0), this._videoCaller = i, this._videoCallBack = s, this._videoCbParam = a || [], this._videoShareCb = n, sdk.Sdk.isOnWeiXin() ? this.playWxVideo(e, i => {
                    fx.Utils.setTimerSpeed(1), i ? (t.user.gameInfo.isGetTian || (t.user.gameInfo.isGetTian = !0, t.user.gameInfo.addTian(1), t.user.saveToServer(), XToast.show("获得天师令*1")), t.reporter.playVideo(e), XAnalyticsUtil.onVideoFinish(e), this.onVideoComplete({
                        code: sdk.SdkCode.REWARD_GAIN_SUCCESS
                    })) : this.onVideoComplete({
                        code: sdk.SdkCode.REWARD_GAIN_FAIL
                    })
                }) : (this._videoGainWayParams.source = e, this._videoStrategyInst.runStrategy()))
            }
            onVideoComplete(e) {
                if (this._videoCaller && !this._videoCaller.destroyed && this._videoCallBack) {
                    let t = e.code == sdk.SdkCode.REWARD_GAIN_SUCCESS;
                    this._videoCbParam.push(t), this._videoCallBack.apply(this._videoCaller, this._videoCbParam)
                }
                this._videoCaller = null, this._videoCallBack = null, this._videoCbParam = null
            }
            clipboardData(e) {
                sdk.Sdk.instance.clipboardData(e)
            }
            login(e) {
                fx.EventCenter.I.off(sdk.SdkEvent.E_SDK_LOGIN, this, this.onLoginFinish), fx.EventCenter.I.once(sdk.SdkEvent.E_SDK_LOGIN, this, this.onLoginFinish, [e]), sdk.Sdk.instance.login()
            }
            onLoginFinish(e, t) {
                e.onFinish && e.onFinish(t)
            }
            exitGame() {
                fx.Utils.isOnPC() ? window.close() : sdk.Sdk.isOnWeiXin() && wx.exitMiniProgram({})
            }
            isOnIOS() {
                if (fx.Utils.isOnNativeIos()) return !0;
                let e = sdk.Sdk.instance.getSystemInfo();
                return !(!e || "ios" != e.platform)
            }
            share(e, t, i = "") {
                this._sdkInst.share(e, t, !1, i)
            }
            wxAuthorize(e) {
                return new Promise((t, i) => {
                    fx.Utils.isOnPC() ? t(!0) : wx.getSetting({
                        success(s) {
                            s.authSetting[e] ? t(!0) : wx.authorize({
                                scope: e,
                                success(e) {
                                    t(!0)
                                },
                                fail(e) {
                                    console.log("authorize fail:"), console.log(e), XToast.show("授权失败，请在设置中开启授权"), i()
                                }
                            })
                        }, fail() {
                            i()
                        }
                    })
                })
            }
            getGameClubData(e, t) {
                if (fx.Utils.isOnPC()) {
                    let i = [];
                    for (const t of e) i.push({
                        dataType: t,
                        value: 5
                    });
                    return void t(i)
                }
                let i = window.wx;
                if (i && i.getGameClubData) {
                    let s = [];
                    for (const t of e) s.push({
                        type: t
                    });
                    i.getGameClubData({
                        dataTypeList: s,
                        success: async e => {
                            let i = await j.I.decryptClubData(e.encryptedData, e.iv);
                            if (i) {
                                console.log("游戏圈数据解密结果："), console.log(i);
                                let e = i.dataList || [];
                                for (const t of e) t.dataType && fx.Utils.isObject(t.dataType) && t.dataType.type && (t.dataType = t.dataType.type);
                                t(e)
                            } else console.log("游戏圈数据解密失败!"), t()
                        },
                        fail: e => {
                            console.log("游戏圈数据获取失败！"), console.log(e), t()
                        }
                    })
                } else t()
            }
            async decryptClubData(e, i) {
                let s = t.serverStorage.serverUrl + "/decryptClubData",
                    a = {
                        gameID: V.gameID,
                        platform: V.platform,
                        encryptedData: e,
                        iv: i,
                        udid: t.serverStorage.openID
                    },
                    n = await t.serverStorage.send(s, "POST", a, 10, t.user.userInfo.token),
                    r = "";
                n && (r = n.decodedData || "");
                try {
                    return JSON.parse(r)
                } catch (e) {
                    return null
                }
            }
            initWxVideo() {
                this._wxVideo = wx.createRewardedVideoAd({
                    adUnitId: V.channel_AdIds.videoId
                }), this._wxVideo.onError(e => {
                    this.onWxVideoFinish(!1);
                    let t = e ? e.errCode : "",
                        i = e ? e.errMsg : "";
                    console.log(`激励视频错误, code:${t}  msg:${i}`), this._wxVideoCode = t
                }), this._wxVideo.onClose(e => {
                    e && e.isEnded || void 0 === e ? this.onWxVideoFinish(!0) : this._wxVideoCb && this.onWxVideoInterrupt()
                })
            }
            playWxVideo(e, i) {
                if (1004 == this._wxVideoCode) return XToast.show("无适合的广告"), void this.onWxVideoFinish(!1);
                Laya.MouseManager.enabled = !1, console.log("调用激励视频show接口"), this._wxVideoCb = i, this._wxVideoSource = e, this._wxVideo.show().then(() => {
                    console.log("激励视频显示成功"), t.reporter.onVideoShow(e), XAnalyticsUtil.onVideoShow(e)
                }).catch(() => {
                    console.log("激励视频显示失败"), XToast.show("激励视频显示失败，请稍后重试"), this.onWxVideoFinish(!1)
                })
            }
            onWxVideoFinish(e) {
                if (Laya.MouseManager.enabled = !0, !this._wxVideoCb) return;
                let t = this._wxVideoCb;
                this._wxVideoCb = null, t(e)
            }
            onWxVideoInterrupt() {
                let e = t.cfg.constant.shareCntOnVideoInterrupt;
                e && this._videoShareCb && t.user.commonInfo.shareCntOnVideo < e ? (t.user.commonInfo.shareCntOnVideo++, t.user.saveToServer(), this.onWxVideoFinish(!1), this._videoShareCb()) : sdk.Sdk.instance.showModal("看完视频才会有奖励哟！！！", "提示", "继续观看", Laya.Handler.create(this, () => {
                    this.playWxVideo(this._wxVideoSource, this._wxVideoCb)
                }), "一会再来", Laya.Handler.create(this, () => {
                    this.onWxVideoFinish(!1)
                }))
            }
            openBusinessView(e) {
                if (!sdk.Sdk.isOnWeiXin()) return;
                let t = wx;
                t.openBusinessView && t.openBusinessView({
                    businessType: "servicecommentpage",
                    success: t => {
                        console.log("评价成功："), console.log(t), e(!0)
                    },
                    fail: t => {
                        console.log("评价失败："), console.log(t), e(!1)
                    }
                })
            }
            requestSubscribeSystemMessage() {
                if (!sdk.Sdk.isOnWeiXin()) return;
                let e = wx;
                if (!e.requestSubscribeSystemMessage) return;
                const t = e.getSystemInfoSync().SDKVersion;
                fx.Utils.compareVersion(t, "2.32.1") >= 0 && e.getSetting({
                    withSubscriptions: !0,
                    success(t) {
                        t.subscriptionsSetting && t.subscriptionsSetting.itemSettings && "accept" == t.subscriptionsSetting.itemSettings.SYS_MSG_TYPE_WHATS_NEW ? console.log("requestSubscribeSystemMessage is accept") : (console.warn("requestSubscribeSystemMessage not accept"), e.showModal({
                            title: "提示",
                            content: "授权开通游戏更新提醒",
                            showCancel: !0,
                            success: t => {
                                t.confirm && e.requestSubscribeSystemMessage({
                                    msgTypeList: ["SYS_MSG_TYPE_WHATS_NEW"],
                                    success(e) {
                                        console.log(e)
                                    },
                                    fail(e) {
                                        console.log(e)
                                    }
                                })
                            }
                        }))
                    },
                    fail() {
                        console.warn("requestSubscribeSystemMessage getSetting fail")
                    }
                })
            }
            async loadRecommend() {
                let e = window.wx;
                if (!e.createPageManager) throw "当前基础库版本暂不支持。";
                this.recommendPageManager = e.createPageManager(), this.recommendPageManager.on("error", e => {
                    console.error("recommend component error:", e)
                }), this.recommendPageManager.on("show", () => {
                    console.log("recommend component show.")
                }), this.recommendPageManager.on("ready", () => {
                    console.log("recommend component ready")
                }), this.recommendPageManager.on("destroy", e => {
                    console.log("recommend component destroy：", e.isRecommended), e.isRecommended ? (t.user.gameInfo.isCommond = !0, t.user.saveToServer()) : this.loadRecommend()
                }), await this.recommendPageManager.load({
                    openlink: "TWFRCqV5WeM2AkMXhKwJ03MhfPOieJfAsvXKUbWvQFQtLyyA5etMPabBehga950uzfZcH3Vi3QeEh41xRGEVFw"
                })
            }
            async showRecommend() {
                this.recommendPageManager || (console.warn("组件未加载"), await this.loadRecommend());
                try {
                    return await this.recommendPageManager.show({
                        openlink: "TWFRCqV5WeM2AkMXhKwJ03MhfPOieJfAsvXKUbWvQFQtLyyA5etMPabBehga950uzfZcH3Vi3QeEh41xRGEVFw"
                    })
                } catch (e) {
                    console.log(e)
                }
            }
            subscribeMessage() {
                this._sdkInst.subscribeMessage()
            }
        }
        class J extends e.ui.scenes.panel.angelOrGhost.AogFailDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0;
                let e = t.playerMgr.player;
                e.isAngel ? this.initSkin(90003) : e.isGhost ? this.img_photo.skin = "res/ui/angelOrGhost/gameEnd/img_2.png" : this.initSkin(t.user.gameInfo.curSkinId), this.checkOpenBox(), XChoreUtil.playSound(117);
                let i = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 10, i >= 210 && (this.coinNum += Math.floor(10 * Math.min(i / 330, 1))), this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("失败结算奖励", this, e => {
                    e && this.getReward(5)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "fail"
                }), t.reporter.getCoinCnt("失败界面")
            }
        }
        class Z extends e.ui.scenes.panel.angelOrGhost.AogUnlockDialogUI {
            constructor(e, t) {
                super()
            }
            onAwake() {
                let e = t.user.gameInfo;
                e.winCnt + e.failCnt >= 3 ? (this.btn_show.visible = !1, this.btn_unlock.on(Laya.Event.CLICK, this, this.onClickUnlock)) : (this.btn_unlock.visible = !1, this.lb_show.text = `玩${3-(e.winCnt+e.failCnt)}局后开启`), this.img_close.on(Laya.Event.CLICK, this, this.closePanel)
            }
            onClickUnlock() {
                let i = t.user.gameInfo;
                i.tianEnough(3) ? (i.useTian(3), t.user.gameInfo.isUnlockAngelOrGhost = !0, t.user.saveToServer(), t.ui.close(this), XToast.show("大战木头人已解锁"), t.ui.open(l.MatchingView, {
                    mode: e.GameMode.E_AngelOrGhost
                })) : (t.ui.close(this), XToast.show("天师令不足"), t.ui.open(l.BuyTianDialog))
            }
            closePanel() {
                t.ui.close(this)
            }
        }
        class Q extends e.ui.scenes.panel.angelOrGhost.AogWinDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0;
                let e = t.playerMgr.player;
                e.isAngel ? this.initSkin(90003) : e.isGhost ? this.img_photo.skin = "res/ui/angelOrGhost/gameEnd/img_1.png" : (this.initSkin(t.user.gameInfo.curSkinId), this.img_mvp.visible = !!t.gameMgr.killCnt), this.checkOpenBox(), XChoreUtil.playSound(118);
                let i = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 20, i >= 210 && (this.coinNum += Math.floor(10 * Math.min(i / 330, 1))), t.gameMgr.killCnt ? this.coinNum += 10 : this.coinNum += 5, this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("胜利结算奖励", this, e => {
                    e && this.getReward(3)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "win"
                }), t.reporter.getCoinCnt("胜利界面")
            }
        }
        class ee extends e.ui.scenes.panel.BuffChooseDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                this.initUI(), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_sure.on(Laya.Event.CLICK, this, this.onClickSure), this.btn_refresh.on(Laya.Event.CLICK, this, this.onClickRefresh)
            }
            initUI() {
                this.isRefreshing = !0, this.randomShow(), this.buffArr ? (this.initBuff(), this.btn_sure.visible = !1, this.btn_close.visible = !1, this.btn_refresh.visible = !1) : t.ui.close(this)
            }
            onClickRefresh() {
                j.I.playVideo("Buff刷新", this, e => {
                    e && (this.isRefresh = !0, this.initUI())
                })
            }
            onClickSure() {
                let e = t.user.gameInfo.buffLvArr;
                e.push(t.gameMgr.chooseBuffLv), t.user.gameInfo.buffLvArr = e, t.user.gameInfo.addBuff(this.curChooseId), t.user.saveToServer(), t.ui.open(l.BuffShowDialog, {
                    id: this.curChooseId
                }), t.ui.close(this)
            }
            onClickClose() {
                t.ui.close(this), XToast.show("高手不需要庇护！"), XAnalyticsUtil.buffBack(t.user.gameInfo.curLv)
            }
            initBuff() {
                this.list_buff.height = 130 * this.buffArr.length;
                let e = this.buffArr.concat(this.allArr);
                for (const t of this.buffArr) e.push(t);
                this.scrollMaxValue = 130 * (e.length - this.buffArr.length), this.list_buff.array = e, this.list_buff.vScrollBarSkin = "", this.list_buff.renderHandler = new Laya.Handler(this, this.updateItem), this.scrollValue = 0, this.list_buff.mouseEnabled = !1, this.listRoll(), Laya.timer.frameLoop(1, this, this.listRoll), Laya.timer.once(1500, this, this.initChoose)
            }
            listRoll() {
                this.scrollValue += 130, this.scrollValue >= this.scrollMaxValue && (this.scrollValue = this.scrollValue - this.scrollMaxValue), this.list_buff.scrollBar.value = this.scrollValue
            }
            initChoose() {
                this.isRefreshing = !1, Laya.timer.clear(this, this.listRoll), this.list_buff.scrollBar.value = 0, this.list_buff.vScrollBarSkin = null, this.list_buff.mouseEnabled = !0, this.list_buff.array = this.buffArr, this.list_buff.refresh()
            }
            updateItem(e) {
                let i = e.dataSource,
                    s = e.getChildByName("img_iconBg").getChildByName("img_icon"),
                    a = e.getChildByName("lb_name"),
                    n = e.getChildByName("img_quality"),
                    r = e.getChildByName("lb_des"),
                    o = e.getChildByName("btn_choose");
                s.skin = i.icon, a.text = i.name;
                let l = "";
                switch (i.quality) {
                    case "罕见":
                        l = "res/ui/buff/quality/1.png";
                        break;
                    case "传说":
                        l = "res/ui/buff/quality/2.png";
                        break;
                    case "神话":
                        l = "res/ui/buff/quality/3.png"
                }
                n.skin = l;
                let h = i.des,
                    d = 0,
                    u = t.user.gameInfo.getBuffData(i.id);
                u && (d = u.lv + 1);
                let g = new RegExp("\\{0\\}", "g");
                h = h.replace(g, `${i.values[d]}`), r.text = h;
                let c = "res/ui/buff/choose/btn_choose.png";
                i.id == this.curChooseId && (c = "res/ui/buff/choose/btn_chose.png"), o.skin = c, o.visible = !this.isRefreshing, o.off(Laya.Event.CLICK, this, this.onClickChoose), o.on(Laya.Event.CLICK, this, this.onClickChoose, [i])
            }
            onClickChoose(e) {
                if (e.id != this.curChooseId) {
                    if (!this.btn_sure.visible) {
                        this.btn_sure.visible = !0, this.btn_close.visible = !1;
                        let e = 0;
                        this.isRefresh || 1 != e || 1 == t.user.userInfo.loginDay ? (this.btn_refresh.visible = !1, this.btn_sure.centerX = 0) : this.btn_refresh.visible = !0
                    }
                    this.curChooseId = e.id, this.list_buff.refresh()
                }
            }
            randomShow() {
                let e = [];
                t.cfg.buffCfg.foreach(i => {
                    if (i.isOpen) {
                        let s = t.user.gameInfo.getBuffData(i.id);
                        i.isRepeat ? (!s || s.lv < i.values.length - 1) && e.push(i) : s || e.push(i)
                    }
                });
                let i = Math.min(3, e.length);
                i && (this.allArr = e, this.buffArr = fx.Utils.randomInArrayEx(e, i))
            }
        }
        class te extends e.ui.scenes.panel.BuffOwnerDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.ownBuff.size ? (this.img_null.visible = !1, this.initList()) : this.list_buff.visible = !1, this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                t.ui.close(this)
            }
            initList() {
                let e = t.user.gameInfo.ownBuff,
                    i = [];
                for (const [t, s] of e) i.push(t);
                this.list_buff.array = i, this.list_buff.renderHandler = new Laya.Handler(this, this.updateItem), this.list_buff.vScrollBarSkin = ""
            }
            updateItem(e) {
                let i = e.dataSource,
                    s = t.user.gameInfo.getBuffData(i),
                    a = t.cfg.buffCfg.get(i),
                    n = e.getChildByName("img_show"),
                    r = n.getChildByName("lb_des"),
                    o = e.getChildByName("img_iconBg"),
                    l = o.getChildByName("img_icon"),
                    h = o.getChildByName("lb_name"),
                    d = e.getChildByName("img_quality");
                n.visible = i == this.curShowId;
                let u = a.des,
                    g = new RegExp("\\{0\\}", "g");
                u = u.replace(g, `${a.values[s.lv]}`), r.text = u, l.skin = a.icon, h.text = a.name;
                let c = "";
                switch (a.quality) {
                    case "罕见":
                        c = "res/ui/buff/quality/1.png";
                        break;
                    case "传说":
                        c = "res/ui/buff/quality/2.png";
                        break;
                    case "神话":
                        c = "res/ui/buff/quality/3.png"
                }
                d.skin = c, e.off(Laya.Event.CLICK, this, this.onClickItem), e.on(Laya.Event.CLICK, this, this.onClickItem, [i])
            }
            onClickItem(e) {
                this.curShowId == e ? this.curShowId = null : this.curShowId = e, this.list_buff.refresh()
            }
        }
        class ie extends e.ui.scenes.panel.BuffShowDialogUI {
            constructor(e, t) {
                super(), t && (this.id = t.id)
            }
            onAwake() {
                Laya.timer.frameLoop(1, this, this.updateGuang), this.on(Laya.Event.MOUSE_DOWN, this, this.onClickClose);
                let e = t.user.gameInfo.getBuffData(this.id),
                    i = t.cfg.buffCfg.get(this.id);
                this.img_icon.skin = i.icon, this.lb_name.text = i.name;
                let s = "";
                switch (i.quality) {
                    case "罕见":
                        s = "res/ui/buff/quality/1.png";
                        break;
                    case "传说":
                        s = "res/ui/buff/quality/2.png";
                        break;
                    case "神话":
                        s = "res/ui/buff/quality/3.png"
                }
                this.img_quality.skin = s;
                let a = i.des,
                    n = new RegExp("\\{0\\}", "g");
                a = a.replace(n, `${i.values[e.lv]}`), this.lb_des.text = a
            }
            updateGuang() {
                this.img_guang.rotation += 1, this.img_guang.rotation >= 360 && (this.img_guang.rotation -= 360)
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class se extends e.ui.scenes.panel.BuyTianDialogUI {
            constructor(e) {
                super()
            }
            onAwake() {
                this.img_close.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_buy.on(Laya.Event.CLICK, this, this.onClickBuy), this.updateUI()
            }
            updateUI() {
                let e = t.user.gameInfo;
                this.lb_coin.text = `${e.coin}/50`, this.lb_tian.text = `${e.tian}`
            }
            onClickBuy() {
                let e = t.user.gameInfo;
                e.coinEnough(50) ? (e.useCoin(50), t.reporter.useCoinCnt("购买天师令"), e.addTian(1), this.updateUI()) : XToast.show("铜币不足")
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class ae extends e.ui.scenes.panel.DailyShareDialogUI {
            constructor(e, t) {
                super(), this.rewardArr = [6001, 6004, 6005], t && (this.handler = t.handler)
            }
            onAwake() {
                this.btn_share.on(Laya.Event.CLICK, this, this.onClickShare), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.initList()
            }
            initList() {
                this.list_reward.array = [3, 9, 8], this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e) {
                let i = e.dataSource,
                    s = t.cfg.shopCfg.get(i),
                    a = e.getChildByName("img_iconBg"),
                    n = a.getChildByName("img_icon"),
                    r = a.getChildByName("lb_name"),
                    o = e.getChildByName("lb_des");
                n.skin = s.icon, r.text = s.name, o.text = s.desc
            }
            onClickShare() {
                XAnalyticsUtil.share("每日分享"), j.I.share(!1, e => {
                    if (e) {
                        t.user.gameInfo.dailyShare = !0;
                        for (const e of this.rewardArr) t.user.gameInfo.addOwnBuildData(e, 1);
                        t.user.saveToServer(), t.ui.close(this), XToast.show("已领取奖励道具"), this.handler && this.handler.run()
                    }
                }, "每日分享")
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class ne extends e.ui.scenes.panel.DifficultChooseDialogUI {
            constructor(e, t) {
                super(), t && (this.canChoose = t.canChoose)
            }
            onAwake() {
                this.initRank();
                let e = t.user.gameInfo.curLv;
                this.canChoose ? (this.chooseArr = [e, e + 1], this.curChoose = e + 1) : (this.chooseArr = [e], this.curChoose = e), this.list_item.width = 321 * this.chooseArr.length - 50, this.list_item.array = this.chooseArr, this.list_item.renderHandler = new Laya.Handler(this, this.updateItem), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_choose.on(Laya.Event.CLICK, this, this.onClickStart), this.img_rank.on(Laya.Event.CLICK, this, this.onClickRank), this.btn_buff.on(Laya.Event.CLICK, this, this.onClickBuff);
                let i = t.user.gameInfo;
                i.todayExtraScore && (this.box_extra.visible = !0, this.lb_num.value = `${i.todayExtraScore}`)
            }
            onClickBuff() {
                t.ui.open(l.BuffOwnerDialog)
            }
            async initRank() {
                this.img_rankBg.visible = !1;
                let e = t.user.gameInfo.todayMaxLv;
                if (e && await t.rankMgr.setCustomRankValue("score_day", e, t.user.gameInfo.curSkinId), this.destroyed) return;
                let i = await t.rankMgr.getCustomRankList("score_day");
                if (!this.destroyed) {
                    if (this.img_rankBg.visible = !0, this.img_rank.visible = !0, i && i.rank && i.rank <= 100 ? this.lb_rank.text = `${i.rank}` : this.lb_rank.text = "未上榜", i && i.value)
                        if (i.value > t.cfg.difficultCfg.length) {
                            let e = t.cfg.difficultCfg.get(t.cfg.difficultCfg.length);
                            this.lb_score.text = `${e.name} ${i.value-t.cfg.difficultCfg.length}`
                        } else {
                            let e = t.cfg.difficultCfg.get(i.value);
                            this.lb_score.text = `${e.name}`
                        } else this.lb_score.text = "轻松";
                    if (t.user.gameInfo.maxLevel) {
                        let e = t.cfg.difficultCfg.get(t.user.gameInfo.maxLevel);
                        this.lb_name.text = e.title, this.lb_name.color = e.titleColor
                    } else {
                        let e = t.cfg.difficultCfg.get(1);
                        this.lb_name.text = e.title
                    }
                }
            }
            updateItem(e) {
                let t = e.dataSource,
                    i = e.getChildByName("img_itemBg"),
                    s = i.getChildByName("img_icon"),
                    a = i.getChildByName("img_cur");
                s.skin = `res/ui/difficultChoose/c_${t}.png`, a.visible = t == this.curChoose, i.off(Laya.Event.CLICK, this, this.onClickChoose), i.on(Laya.Event.CLICK, this, this.onClickChoose, [t])
            }
            onClickChoose(e) {
                e != this.curChoose && (this.curChoose = e, this.list_item.refresh())
            }
            onClickClose() {
                t.ui.close(this)
            }
            onClickStart() {
                XAnalyticsUtil.onLevelChange(this.curChoose), t.user.gameInfo.setCurLv(this.curChoose), t.ui.close(this), t.ui.open(l.MatchingView, {
                    mode: e.GameMode.E_Defense
                })
            }
            async onClickRank() {
                if (await t.user.userInfo.checkUserProfile(), this.destroyed) return;
                let e = t.user.gameInfo.todayMaxLv;
                e && await t.rankMgr.setCustomRankValue("score_day", e, t.user.gameInfo.curSkinId);
                let i = t.user.gameInfo.todayHunterMaxLv;
                if (i && await t.rankMgr.setCustomRankValue("score_hunter_day", i, t.user.gameInfo.curHunterSkinId), this.destroyed) return;
                let s = await t.rankMgr.getCustomRankList("score_day"),
                    a = await t.rankMgr.getCustomRankList("score_hunter_day");
                this.destroyed || t.ui.open(l.RankView, {
                    info: s,
                    hunterInfo: a
                })
            }
        }
        class re extends e.ui.scenes.panel.FailDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, this.checkOpenBox(), XChoreUtil.playSound(117);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 10, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), this.initUI(), this.initSkin(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin() {
                let e = t.cfg.skin.get(t.user.gameInfo.curSkinId);
                e.skinPath.includes(".bin") && t.assetLoader.createSpine(e.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("失败结算奖励", this, e => {
                    e && this.getReward(5)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "fail"
                }), t.reporter.getCoinCnt("失败界面")
            }
        }
        class oe extends e.ui.scenes.panel.GameEndBoxDialogUI {
            constructor(e, t) {
                super(), t && (this.rewardArr = t.rewardArr)
            }
            onAwake() {
                this.initAni(), this.rewardMap = new Map;
                for (const e of this.rewardArr)
                    if (this.rewardMap.has(e)) {
                        let t = this.rewardMap.get(e);
                        this.rewardMap.set(e, t + 1)
                    } else this.rewardMap.set(e, 1);
                this.initUI(), this.initTween(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_get.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initAni() {
                let e = "scenes/prefab/box_endBoxAni.json";
                Laya.loader.load(e, Laya.Handler.create(this, () => {
                    let t = fx.Utils.createPrefab(e);
                    t.centerX = t.centerY = 0, this.box_ani.addChild(t), fx.Utils.getDefaultUIFrameAnimation(t).play(0, !0)
                })), this.box_ani.visible = !1
            }
            initUI() {
                this.img_closeBox.visible = !0, this.img_openBox.visible = !1, this.list_reward.visible = !0, this.btn_close.visible = !1, this.btn_video.visible = !1, this.btn_get.visible = !1
            }
            initTween() {
                this.img_closeBox.centerY = -500, (new fx.Sequence).to({
                    centerY: -86
                }, 500).exec(new Laya.Handler(this, () => {
                    this.btn_close.visible = !0, this.btn_video.visible = !0, this.box_ani.visible = !0;
                    let e = (new fx.Sequence).delay(200).rotate(-15, 100).rotate(15, 200).rotate(0, 100);
                    e.isRepeat = !0, e.run(this.img_closeBox)
                })).run(this.img_closeBox)
            }
            initList() {
                this.img_reward.visible = !0, this.list_reward.array = this.rewardArr;
                let e = Math.ceil(this.rewardArr.length / 4);
                this.list_reward.height = 120 * e + 20 * (e - 1), this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem), Laya.timer.once(300 * this.rewardArr.length, this, () => {
                    this.btn_get.visible = !0
                })
            }
            updateItem(e, i) {
                let s = e.dataSource,
                    a = t.buildingMgr.getBuildCfg(s),
                    n = e.getChildByName("img_icon"),
                    r = e.getChildByName("lb_name");
                if (n.skin = a.icon, r.text = a.name, !e.__seq) {
                    e.__seq = !0, n.scale(0, 0), (new fx.Sequence).delay(300 * i).scaleOut(1.1, 300).run(n), r.scale(0, 0), (new fx.Sequence).delay(300 * i).scaleOut(1.1, 300).run(r)
                }
            }
            onClickVideo() {
                j.I.playVideo("结算宝箱奖励", this, e => {
                    e && (this.rewardMap.forEach((e, i) => {
                        t.user.gameInfo.addOwnBuildData(i, e), t.user.saveToServer()
                    }), this.img_closeBox.visible = !1, this.img_openBox.visible = !0, this.btn_close.visible = !1, this.btn_video.visible = !1, this.initList(), XChoreUtil.playSound(127))
                })
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class XBaseModel {
            constructor() {
                this.curHp = 1, this.maxHp = 1, this.roomId = -1, this.isDie = !1, this.lv = 1, this.coinRatio = 1, 
                this.energyRatio = 1, this.invincible = !1, this.invincible_skill = !1, this.buffs = []
            }
            get hpPercent() {
                return this.curHp / this.maxHp
            }
        }
        class XPlayerModel extends XBaseModel {
            constructor() {
                super(...arguments), this.isBed = !1, this.coin = 0, this.energy = 0, this.buildings = [], this.canBedRange = 116, this.attackCd = 1, this.attackRange = 100, this.escapeOdds = .3, this.attackPower = 0, this.critRate = 0, this.poisonTimes = 0, this.skillIdArr = [], this.skillMoveSpeedRate = 0, this.skillAtkRate = 0, this.skillEquipHp = 0, this.skillSuckHpRate = 0, this.skillAtkSquRate = 0, this.addReduceRate = 0, this.equipAtk = 0, this.equipHp = 0, this.equipMoveSpeed = 0, this.equipCritRate = 0, this.equipAtkSpeed = 0, this.equipExp = 0, this.invincibleCnt = 0, this.isGhost = !1, this.isAngel = !1, this.isBack = !1, this.randomCnt = 0, this.reduceRate = 0
            }
            getSpeedPow() {
                let e = 1;
                if (this.buffs)
                    for (const t of this.buffs) {
                        if (t.Type == M.SPEED) return e = t.result(1);
                        t.Type == M.SPEED_POW && (e *= t.result(1))
                    }
                return this.skillMoveSpeedRate && (e *= 1 + this.skillMoveSpeedRate), this.equipMoveSpeed && (e *= 1 + this.equipMoveSpeed), e
            }
            get stopRange() {
                return this.type == e.PlayerType.E_Hunter ? this.attackRange : this.type == e.PlayerType.E_Defender ? this.canBedRange : void 0
            }
            getAtkCD() {
                let e = this.attackCd,
                    t = e;
                if (this.buffs)
                    for (const i of this.buffs) i.Type != M.ATK_SPD && i.Type != M.DYC_ATK_SPD || (t += i.result(e));
                return t = Math.max(.2, t)
            }
            getAtkPow() {
                return this.attackPower
            }
            getPoison() {
                this.poisonTimes = 5
            }
            refreshEquip() {
                this.equipAtk  = 0, this.equipHp = 0, this.equipMoveSpeed = 0, this.equipCritRate = 0, this.equipAtkSpeed = 0, this.equipExp = 0
            }
        }
        class XMatchingView extends e.ui.scenes.view.MatchingViewUI {
            constructor(e, t) {
                super(), this.idxArr = [0, 1, 2, 3, 4, 5], this.matchingtime = 0, t && (this.gameMode = t.mode)
            }
            onAwake() {
                this.img_title.skin = `res/ui/matching/title_${this.gameMode}.png`, this.gameMode == e.GameMode.E_AngelOrGhost && (this.box_hunter.visible = !1, this.img_hBg.skin = "res/ui/matching/bg_aog.png"), this.isStart = !0, this.hunterArr = [];
                let i = new XPlayerModel;
                i.type = e.PlayerType.E_Defender, 
                i.uuid = fx.Utils.createUUID(), 
                i.name = this.randomName(), 
                i.skinId = t.user.gameInfo.curSkinId;
                let s = t.user.gameInfo.getBuffData(26);
                if (s) {
                    let e = t.cfg.buffCfg.get(26);
                    i.invincibleCnt = e.values[s.lv] - 1
                }
                this.defenderArr = [i, null, null, null, null, null], 
                this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), 
                Laya.__quickMatch ? Laya.timer.loop(1, this, this.timeLoop) : Laya.timer.loop(500, this, this.timeLoop), this.initList()
            }
            initList() {
                this.list_list.array = this.defenderArr, this.list_list.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e, i) {
                let s = e.dataSource,
                    a = e.getChildByName("img_itemBg"),
                    n = a.getChildByName("lb_name"),
                    r = a.getChildByName("img_skin"),
                    o = a.getChildByName("img_cur"),
                    l = a.getChildByName("img_people");
                if (s) {
                    let e = t.cfg.skin.get(s.skinId);
                    0 == i ? (o.visible = !0, n.text = "自己") : n.text = s.name, r.skin = e.skinShowPath, l.visible = !1
                } else r.skin = "", l.visible = !0, n.text = ""
            }
            timeLoop() {
                this.matchingtime += .5;
                let i = XRandomUtil.random();
                if (this.matchingtime >= 3 && (i = 0), i < .7) {
                    let i = XRandomUtil.getIntRandom(0, this.idxArr.length - 1);
                    if (0 == (i = this.idxArr.splice(i, 1)[0])) {
                        let i = t.user.gameInfo,
                            s = t.cfg.difficultCfg.get(i.curLv);
                        t.gameMgr.dCfg = s;
                        let a = s.addMaxHp + 1;
                        i.curLv == t.cfg.difficultCfg.length && i.maxWinCnt && (s = t.cfg.difficultCfg.get(i.maxWinCnt % i.curLv + 1));
                        let n = new XPlayerModel;
                        if (n.type = e.PlayerType.E_Hunter, n.uuid = fx.Utils.createUUID(), n.name = this.randomName(), n.skinId = s.bossId, this.gameMode == e.GameMode.E_AngelOrGhost) n.skinId = 90001, a = 1;
                        else if (this.gameMode == e.GameMode.E_SevenGhost) {
                            let e = t.user.gameInfo.curSevenGhostLv,
                                i = t.cfg.sevenGhostCfg.get(e);
                            n.skinId = i.bossId, a = 1
                        }
                        n.attackPower = t.cfg.hunterCfg.attackList[0], n.curHp = t.cfg.hunterCfg.hpList[0] * a, n.maxHp = t.cfg.hunterCfg.hpList[0] * a, 
                        this.hunterArr.push(n), this.updateHunter(n)
                    } else {
                        let s = new XPlayerModel;
                        s.type = e.PlayerType.E_Defender, s.uuid = fx.Utils.createUUID(), 
                        s.name = this.randomName(), 
                        s.skinId = fx.Utils.randomInArray(t.cfg.getPlayerIdArr()), 
                        this.defenderArr[i] = s, 
                        this.initList()
                    }
                }
                this.updateLabel(), this.idxArr.length || (this.isMax = !0, this.isStart && this.startGame(), Laya.timer.clear(this, this.timeLoop))
            }
            updateHunter(e) {
                let i = t.cfg.skin.get(e.skinId);
                this.img_hunter.skin = i.skinShowPath, this.lb_hunterName.text = i.name, this.img_people.visible = !1
            }
            updateLabel() {
                this.lb_time.text = `匹配中..${Math.floor(this.matchingtime)}s`
            }
            startGame() {
                let mapCfg = this.getMap();
                Laya.loader.load(mapCfg.path, new Laya.Handler(this, mapData => {
                    let matchData = t.gameMgr.match(this.gameMode, this.defenderArr, this.hunterArr, mapCfg, mapData, !0),
                        n = "";
                    switch (this.gameMode) {
                        case e.GameMode.E_Defense:
                            n = "普通模式", XAnalyticsUtil.enterLevel(t.user.gameInfo.curLv, n);
                            break;
                        case e.GameMode.E_AngelOrGhost:
                            n = "木头人模式", XAnalyticsUtil.enterLevel(t.user.gameInfo.curLv, n);
                            break;
                        case e.GameMode.E_SevenGhost:
                            n = "挑战模式", XAnalyticsUtil.enterLevel(t.user.gameInfo.curSevenGhostLv, n)
                    }
                    t.ui.changeScene(l.GameScene, {
                        matchData: matchData
                    })
                }))
            }
            getMap() {
                if (Laya.__setMap) {
                    let e = t.cfg.map.get(Laya.__setMap);
                    if (e) return e
                }
                let i = t.cfg.map.get(1);
                if (this.gameMode == e.GameMode.E_Defense && t.user.gameInfo.isMapByWeek) {
                    switch (t.gameTime.nowDate.getDay()) {
                        case 0:
                            i = t.cfg.map.get(7);
                            break;
                        case 1:
                            i = t.cfg.map.get(1);
                            break;
                        case 2:
                            i = t.cfg.map.get(2);
                            break;
                        case 3:
                            i = t.cfg.map.get(3);
                            break;
                        case 4:
                            i = t.cfg.map.get(4);
                            break;
                        case 5:
                            i = t.cfg.map.get(5);
                            break;
                        case 6:
                            i = t.cfg.map.get(6)
                    }
                } else if (this.gameMode == e.GameMode.E_AngelOrGhost) i = t.cfg.map.get(11);
                else if (this.gameMode == e.GameMode.E_SevenGhost) {
                    let e = t.user.gameInfo.curSevenGhostLv,
                        s = t.cfg.sevenGhostCfg.get(e);
                    i = t.cfg.map.get(s.mapId)
                }
                return i
            }
            onClickClose() {
                switch (Laya.timer.clear(this, this.timeLoop), t.ui.close(this), this.gameMode) {
                    case e.GameMode.E_Defense:
                        XAnalyticsUtil.clickBack("普通模式");
                        break;
                    case e.GameMode.E_AngelOrGhost:
                        XAnalyticsUtil.clickBack("木头人模式")
                }
            }
            randomName(e = 0) {
                if (!this.playerNames) {
                    this.playerNames = [], this.includeName = [];
                    let e = fx.CfgMgr.instance.get("namesCfg");
                    for (const t in e) this.playerNames.push(e[t].name)
                }
                e++;
                let t = fx.Utils.randomInArray(this.playerNames);
                return e > 10 ? t : this.includeName.includes(t) ? this.randomName(e) : t
            }
        }
        class ue extends e.ui.scenes.panel.NoticeDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class ge extends e.ui.scenes.panel.SettingDialogUI {
            constructor(e, t) {
                super(), t && (this.isInGame = t.isInGame)
            }
            onAwake() {
                this.isInGame && (t.gameMgr.pauseGame(), fx.EventCenter.I.on(fx.BaseEvent.E_APP_ON_RESUME, this, this.onAppResume)), this.updateMusic(), this.updateSound(), this.img_music.on(Laya.Event.CLICK, this, this.toggleMusic), this.img_sound.on(Laya.Event.CLICK, this, this.toggleSound), this.img_close.on(Laya.Event.CLICK, this, this.onClickClose), this.label_version.text = "Version:" + V.version + `    Id:${t.user.userInfo.playerID}`
            }
            onAppResume() {
                t.gameMgr.pauseGame()
            }
            toggleMusic() {
                fx.SoundManager.instance.toggleMusic(), this.updateMusic()
            }
            updateMusic() {
                let e = fx.SoundManager.instance.getToggleMusicStatus();
                this.img_music.skin = e ? "res/ui/setting/img_on.png" : "res/ui/setting/img_off.png"
            }
            toggleSound() {
                fx.SoundManager.instance.toggleSoundFx(), this.updateSound()
            }
            updateSound() {
                let e = fx.SoundManager.instance.getToggleSoundFxStatus();
                this.img_sound.skin = e ? "res/ui/setting/img_on.png" : "res/ui/setting/img_off.png"
            }
            onClickClose() {
                t.ui.close(this), this.isInGame && t.gameMgr.resumeGame()
            }
            onDestroy() {
                fx.EventCenter.I.off(fx.BaseEvent.E_APP_ON_RESUME, this, this.onAppResume)
            }
        }
        class ce extends e.ui.scenes.panel.ShopDialogUI {
            constructor() {
                super(), this.tabArr = [1, 2, 3], this.curTab = 1
            }
            onAwake() {
                this.initTabList(), this.initList(), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                t.ui.close(this), t.gameMgr.isShowTurntable ? (t.gameMgr.isShowTurntable = !1, t.user.userInfo.loginDay > 1 && t.user.gameInfo.dailyShareCnt < 3 && t.user.gameInfo.showTurntableCnt < 3 ? (t.ui.open(l.TurntableView), t.user.gameInfo.showTurntableCnt += 1) : t.gameMgr.canChooseBuff && t.gameMgr.isChooseBuff() && (t.gameMgr.canChooseBuff = !1, t.ui.open(l.BuffChooseDialog))) : t.gameMgr.canChooseBuff && (t.gameMgr.canChooseBuff = !1, t.ui.open(l.BuffChooseDialog))
            }
            initTabList() {
                this.list_tab.array = this.tabArr, this.list_tab.renderHandler = new Laya.Handler(this, this.updateTabItem)
            }
            updateTabItem(e) {
                let t = e.dataSource,
                    i = e.getChildByName("img_itemBg"),
                    s = i.getChildByName("img_title");
                t == this.curTab ? i.skin = "res/ui/shop/img_cur.png" : i.skin = "res/ui/shop/img_normal.png", s.skin = `res/ui/shop/${t}.png`, i.off(Laya.Event.CLICK, this, this.onClickTab), i.on(Laya.Event.CLICK, this, this.onClickTab, [t])
            }
            onClickTab(e) {
                this.curTab != e && (this.curTab = e, this.list_tab.refresh(), this.initList())
            }
            initList() {
                let e = t.cfg.getShopGroupArr(this.curTab);
                this.list_item.array = e, this.list_item.renderHandler = new Laya.Handler(this, this.updateItem), this.list_item.vScrollBarSkin = ""
            }
            updateItem(e) {
                let i = e.dataSource,
                    s = e.getChildByName("img_iconBg"),
                    a = s.getChildByName("img_icon"),
                    n = s.getChildByName("lb_name"),
                    r = e.getChildByName("lb_ownerCnt"),
                    o = e.getChildByName("lb_des"),
                    l = e.getChildByName("img_buy"),
                    h = l.getChildByName("lb_cnt"),
                    d = e.getChildByName("img_video"),
                    u = d.getChildByName("lb_getCnt"),
                    g = e.getChildByName("img_share"),
                    c = g.getChildByName("lb_getCnt"),
                    p = e.getChildByName("img_max");
                if (p.visible = !1, a.skin = i.icon, n.text = i.name, o.text = i.desc, g.visible = !1, 1 == i.unlock.way) l.visible = !0, d.visible = !1, h.text = `${i.unlock.num}`;
                else {
                    l.visible = !1, d.visible = !0;
                    let e = 1;
                    if (6666 == i.buildId) {
                        let i = t.user.gameInfo.magicGetCnt;
                        i < 3 ? e = t.cfg.constant.magicGetArr[i] : d.visible = !1
                    } else i.buildId, i.unlock.getCnt && (e = i.unlock.getCnt);
                    u.text = `获得x${e}`, c.text = `获得x${e}`
                }
                let f = t.user.gameInfo.getOwnBuildCnt(i.buildId);
                i.limit ? (f == i.limit && (l.visible = !1, d.visible = !1, p.visible = !0), r.text = `${f}/${i.limit}`) : r.text = `${f}`, o.text = i.desc, l.off(Laya.Event.CLICK, this, this.onClickBuy), d.off(Laya.Event.CLICK, this, this.onClickVideo), g.off(Laya.Event.CLICK, this, this.onClickShare), l.on(Laya.Event.CLICK, this, this.onClickBuy, [i]), d.on(Laya.Event.CLICK, this, this.onClickVideo, [i]), g.on(Laya.Event.CLICK, this, this.onClickShare, [i])
            }
            onClickBuy(e) {
                if (t.user.gameInfo.coinEnough(e.unlock.num)) {
                    let i = 1;
                    e.unlock.getCnt && (i = e.unlock.getCnt), t.user.gameInfo.useCoin(e.unlock.num), t.reporter.useCoinCnt("商店购买道具"), t.user.gameInfo.addOwnBuildData(e.buildId, i, e.limit), XToast.show("购买成功"), XChoreUtil.playSound(125), this.list_item.refresh(), t.reporter.shopBuyProp(e.name, 1), XAnalyticsUtil.shopBuyProp(e.name, 1), t.user.saveToServer()
                } else XToast.show("铜币不足")
            }
            onClickVideo(e) {
                j.I.playVideo("商店购买", this, i => {
                    if (i) {
                        let i = 1;
                        if (6666 == e.buildId) {
                            let e = t.user.gameInfo.magicGetCnt;
                            e < 3 && (i = t.cfg.constant.magicGetArr[e])
                        } else e.unlock.getCnt && (i = e.unlock.getCnt);
                        t.user.gameInfo.addOwnBuildData(e.buildId, i, e.limit), XToast.show("购买成功"), t.reporter.shopBuyProp(e.name, 2), XAnalyticsUtil.shopBuyProp(e.name, 2), XChoreUtil.playSound(125), 6666 == e.buildId && (t.user.gameInfo.magicGetCnt += 1, 3 == t.user.gameInfo.magicGetCnt && XToast.show("今日购买次数用完，明天再来")), t.user.saveToServer(), this.list_item.refresh()
                    }
                })
            }
            onClickShare(e) {
                XAnalyticsUtil.share("商店分享"), j.I.share(!1, i => {
                    if (i) {
                        let i = 1;
                        e.unlock.getCnt && (i = e.unlock.getCnt), t.user.gameInfo.addOwnBuildData(e.buildId, i, e.limit), XToast.show("购买成功"), t.reporter.shopBuyProp(e.name, 3), XAnalyticsUtil.shopBuyProp(e.name, 3), XChoreUtil.playSound(125), t.user.gameInfo.dailyBuyZr = !0, t.user.saveToServer(), this.list_item.refresh()
                    }
                }, "商店分享")
            }
        }
        class pe extends e.ui.scenes.panel.SkinFragmentDialogUI {
            constructor(e, t) {
                super(), this.curFragmentType = 1, this.needCoin = [100, 200], t && (this.handler = t.handler, isNaN(t.curFragmentType) || (this.curFragmentType = t.curFragmentType), this.from = t.from)
            }
            onAwake() {
                this.btn_openOne.on(Laya.Event.CLICK, this, this.onClickOpen, [1]), this.btn_openTen.on(Laya.Event.CLICK, this, this.onClickOpen, [10]), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.list_tab.array = [0, 1], this.list_tab.renderHandler = new Laya.Handler(this, this.updateItem), this.updateUI()
            }
            updateItem(e) {
                let t = e.dataSource,
                    i = e.getChildByName("img_tab");
                t == this.curFragmentType ? i.skin = `res/ui/skinFragment/tab_${t}_1.png` : i.skin = `res/ui/skinFragment/tab_${t}_2.png`, e.off(Laya.Event.CLICK, this, this.onClickTab), e.on(Laya.Event.CLICK, this, this.onClickTab, [t])
            }
            onClickTab(e) {
                this.curFragmentType != e && (this.curFragmentType = e, this.list_tab.refresh(), this.updateUI())
            }
            updateUI() {
                this.btn_openOne.skin = `res/ui/skinFragment/btn_${this.curFragmentType}.png`, this.btn_openTen.skin = `res/ui/skinFragment/btn_${this.curFragmentType}.png`, this.img_theme.skin = `res/ui/skinFragment/bg_${this.curFragmentType}.png`, this.img_title.skin = `res/ui/skinFragment/title_${this.curFragmentType}.png`, this.lb_coinOne.value = `${this.needCoin[this.curFragmentType]}`, this.lb_coinTen.value = `${9*this.needCoin[this.curFragmentType]}`
            }
            onClickOpen(e) {
                let i = this.needCoin[this.curFragmentType];
                if (10 == e && (i *= 9), t.user.gameInfo.coinEnough(i)) {
                    t.ui.open(l.SkinFragmentGetDialog, {
                        from: this.from,
                        fragmentType: this.curFragmentType,
                        num: e,
                        cb: new Laya.Handler(this, () => {
                            t.ui.close(this)
                        })
                    }), t.user.gameInfo.useCoin(i), t.user.gameInfo.getFragmentCnt += e, t.reporter.useCoinCnt("抽皮肤碎片"), t.reporter.lotSkinCnt();
                    let s = "校园";
                    switch (this.curFragmentType) {
                        case 0:
                            s = "校园";
                            break;
                        case 1:
                            s = "童话"
                    }
                    let a = `${s}-${e}`;
                    XAnalyticsUtil.lotSkinCnt(a), t.user.saveToServer()
                } else XToast.show("铜币不足")
            }
            onClickClose() {
                t.ui.close(this)
            }
            onDestroy() {
                this.handler && this.handler.run()
            }
        }
        class fe extends e.ui.scenes.panel.SkinFragmentGetDialogUI {
            constructor(e, t) {
                super(), this.fragmentType = 0, this.num = 1, t && (this.fragmentType = t.fragmentType, this.num = t.num, this.cb = t.cb, this.from = t.from)
            }
            onAwake() {
                XChoreUtil.playSound(127);
                let e = [];
                for (let i = 0; i < this.num; i++) e = e.concat(fx.Utils.randomInArray(t.cfg.constant.skinFragmentArr));
                let i = new Map;
                for (const t of e)
                    if (i.has(t)) {
                        let e = i.get(t);
                        e += 1, i.set(t, e)
                    } else i.set(t, 1);
                this.rewardArr = [], i.forEach((e, t) => {
                    this.rewardArr.push({
                        id: t,
                        cnt: e
                    })
                });
                for (let e = 0; e < this.rewardArr.length; e++) {
                    let i = this.rewardArr[e].id,
                        s = this.rewardArr[e].cnt;
                    t.user.gameInfo.addOwnSkinFragmentData(i, s, this.fragmentType)
                }
                t.user.saveToServer(), this.list_item.array = this.rewardArr, this.list_item.renderHandler = new Laya.Handler(this, this.updateItem), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_reward.on(Laya.Event.CLICK, this, this.onClickReward), this.btn_dh.on(Laya.Event.CLICK, this, this.onClickDh), this.btn_dh.visible = !1, this.btn_video.visible = !1, this.btn_reward.visible = !1, this.on(Laya.Event.CLICK, this, this.onClickSkip), Laya.timer.once(300 * this.rewardArr.length - 1, this, this.updateBtn)
            }
            updateBtn() {
                t.user.gameInfo.isUseSkinFragmentVideo || 1 != this.num ? (this.btn_dh.centerX = 0, this.btn_video.visible = !1) : (this.btn_dh.centerX = -165, this.btn_video.visible = !0), this.btn_dh.visible = !0, this.btn_reward.visible = !0
            }
            onClickSkip() {
                this.updateBtn(), this.isSkip = !0, this.list_item.refresh()
            }
            updateItem(e, i) {
                let s = e.dataSource,
                    a = s.id,
                    n = s.cnt,
                    r = e.getChildByName("img_icon"),
                    o = e.getChildByName("lb_name");
                o.visible = !1, this.fragmentType ? r.skin = `res/ui/skin/skinFragment/${a}_${this.fragmentType}.png` : r.skin = `res/ui/skin/skinFragment/${a}.png`;
                let l = t.cfg.getSkinArrBySkinType(a)[0],
                    h = t.cfg.skin.get(l);
                if (o.text = `碎片-${h.name} x${n}`, e.__seq) this.isSkip && (Laya.Tween.clearAll(r), r.scale(1.1, 1.1), o.visible = !0);
                else {
                    e.__seq = !0, r.scale(0, 0), (new fx.Sequence).delay(300 * i).scaleOut(1.1, 300).exec(new Laya.Handler(this, () => {
                        o.visible = !0
                    })).run(r)
                }
            }
            onClickDh() {
                this.cb && this.cb.run(), t.ui.close(this), "SkinView" != this.from && t.ui.open(l.SkinView);
                let e = t.cfg.getPlayerSkinTypeArr();
                for (const i of e)
                    if (7001 != i) {
                        if (!t.user.gameInfo.isUnlockSkin(i)) return void XToast.show("解锁角色后可兑换皮肤")
                    }
            }
            onClickVideo() {
                j.I.playVideo("皮肤碎片获取", this, e => {
                    if (e) {
                        t.user.gameInfo.isUseSkinFragmentVideo = !0;
                        for (let e = 0; e < this.rewardArr.length; e++) {
                            let i = this.rewardArr[e].id,
                                s = this.rewardArr[e].cnt;
                            t.user.gameInfo.addOwnSkinFragmentData(i, s, this.fragmentType)
                        }
                        t.user.saveToServer(), t.ui.close(this)
                    }
                })
            }
            onClickReward() {
                t.ui.close(this)
            }
        }
        class me extends e.ui.scenes.panel.TurntableRewardDialogUI {
            constructor(e, t) {
                super(), t && (this.rewardArr = t.rewardArr)
            }
            onAwake() {
                t.buildingMgr.initBuildingCfg(), this.btn_reward.on(Laya.Event.CLICK, this, this.onClickClose), this.initList()
            }
            initList() {
                this.list_reward.array = this.rewardArr;
                let e = Math.ceil(this.rewardArr.length / 4);
                this.list_reward.height = 120 * e + 20 * (e - 1), this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e, i) {
                let s = e.dataSource.split("_"),
                    a = Number(s[0]),
                    n = Number(s[1]),
                    r = t.buildingMgr.getBuildCfg(a, n),
                    o = e.getChildByName("img_icon"),
                    l = e.getChildByName("lb_name");
                if (o.skin = r.icon, l.text = r.name, !e.__seq) {
                    e.__seq = !0, o.scale(0, 0), (new fx.Sequence).delay(300 * i).scaleOut(1.1, 300).run(o), l.scale(0, 0), (new fx.Sequence).delay(300 * i).scaleOut(1.1, 300).run(l)
                }
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class ye extends e.ui.scenes.panel.WinDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, this.checkOpenBox(), XChoreUtil.playSound(118);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 20, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), t.gameMgr.killCnt ? this.coinNum += 10 : this.coinNum += 5, this.propNum = XRandomUtil.getIntRandom(1, 2), this.initUI(), this.initSkin(), t.user.gameInfo.getBuffData(10) && (this.coinNum += 5, this.lb_buff.visible = !0, this.img_buff.visible = !0), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin() {
                let e = t.cfg.skin.get(t.user.gameInfo.curSkinId);
                e.skinPath.includes(".bin") && t.assetLoader.createSpine(e.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`, this.lb_prop.text = `x${this.propNum}`, this.img_mvp.visible = !!t.gameMgr.killCnt
            }
            onClickVideo() {
                j.I.playVideo("胜利结算奖励", this, e => {
                    e && this.getReward(3)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.gameInfo.addOwnBuildData(6666, this.propNum * e, 20), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "win"
                }), t.reporter.getCoinCnt("胜利界面")
            }
        }
        const Ce = {
                CoinChange: "CoinChange",
                TianChange: "TianChange",
                GameClubDataChange: "GameClubDataChange",
                GameClubRewardClaimed: "GameClubRewardClaimed",
                InviteCntChange: "InviteCntChange"
            },
            _e = {
                SyncFromServer: "SyncFromServer"
            },
            XEventNames = {
                E_INPUT_DOWN: "$E_INPUT_DOWN",
                E_INPUT_UP: "$E_INPUT_UP",
                E_INPUT: "$E_INPUT",
                E_BUILDING_BUILD: "$E_BUILDING_BUILD",
                E_BUILDING_REMOVED: "$E_BUILDING_REMOVED",
                E_BUILDING_PREBUILD: "$E_BUILDING_PREBUILD",
                E_BUILDING_PREBUILD_REMOVED: "$E_BUILDING_PREBUILD_REMOVED",
                E_BUILDING_UPGRADE: "$E_BUILDING_UPGRADE",
                E_BUILDING_VIDEOUPGRADE: "$E_BUILDING_VIDEOUPGRADE",
                E_BUILD_DEAD: "E_BUILD_DEAD",
                E_Door_State_Changed: "$E_Door_State_Changed",
                E_Look_Player: "$E_Look_Player",
                E_Repair_Door: "$E_Repair_Door",
                E_Bed_Up: "$E_Bed_Up",
                E_Bed_Down: "$E_Bed_Down",
                E_BuildTips_Hide: "$E_BuildTips_Hide",
                E_Player_Dead: "$E_Player_Dead",
                E_Player_Revive: "$E_Player_Revive",
                E_Player_Hurt: "$E_Player_Hurt",
                E_Hunter_Dead: "$E_Hunter_Dead",
                E_Hunter_Upgrade: "$E_Hunter_Upgrade",
                E_Hunter_Use_Skill: "$E_Hunter_Use_Skill",
                E_HUNTER_LEAVE: "E_HUNTER_LEAVE",
                E_HUNTER_ESCAPE: "E_HUNTER_ESCAPE",
                E_UPDATE_WAITQUEUE: "$E_UPDATE_WAITQUEUE",
                E_MapBuild_take: "$E_MapBuild_take",
                E_Task_Compelet: "$E_Task_Compelet",
                E_Game_Start: "$E_Game_Start",
                E_Create_BoxMonster: "$E_Create_BoxMonster",
                E_Create_Ghost: "$E_Create_Ghost",
                E_Create_Fighter: "$E_Create_Fighter",
                E_Create_Angel: "$E_Create_Angel",
                E_Angel_Dead: "$E_Angel_Dead",
                E_Rage_Refresh: "$E_Rage_Refresh",
                E_Dizzy_Refresh: "$E_Dizzy_Refresh",
                E_Yanluo_Show: "$E_Yanluo_Show",
                E_MapEquip_take: "$E_MapEquip_take",
                E_Hurter_Dig: "$E_Hurter_Dig",
                E_GuideHand_Show: "$E_GuideHand_Show",
                E_GuideArrow_Visible: "$E_GuideArrow_Visible"
            },
            be = {
                Hp_Changed: "Hp_Changed",
                Battle_Be_Hit: "Battle_Be_Hit",
                AddCoin_By_Cnt: "AddCoin_By_Cnt",
                FlyCutter_Be_Hit: "FlyCutter_Be_Hit",
                FlyCutter_End: "FlyCutter_End",
                Tower_Be_fire: "Tower_Be_fire"
            },
            we = {
                Invite_Btn_Update: "Invite_Btn_Update"
            };
        class XV2Util01 {
            static isV2Equal(e, t) {
                return e.x == t.x && e.y == t.y
            }
            static isV2InArray(e, t) {
                for (const i of t)
                    if (this.isV2Equal(e, i)) return !0;
                return !1
            }
            static pDistance(e, t) {
                let i = e.x - t.x,
                    s = e.y - t.y;
                return Math.sqrt(i * i + s * s)
            }
            static pDistanceSquared(e, t) {
                let i = e.x - t.x,
                    s = e.y - t.y;
                return i * i + s * s
            }
            static faceTo(e, t, i, s = 0, a) {
                let n = t - e.x,
                    r = i - e.y;
                a && (n = t - (e.x + a.x), r = i - (e.y + a.y));
                let o = Math.atan2(r, n),
                    l = Math.deg(o);
                e.rotation = l + s
            }
            static faceTo_1(e, t, i, s, a = 0) {
                if (!e || !t) return;
                let n = i - (e.x + t.x),
                    r = s - (e.y + t.y),
                    o = Math.atan2(r, n),
                    l = Math.deg(o);
                t.rotation = l + a
            }
            static faceWith(e, t, i, s = 0) {
                if (!e) return;
                let a = t,
                    n = i,
                    r = Math.atan2(n, a),
                    o = Math.deg(r);
                e.rotation = o + s + 90
            }
        }
        const Ie = fx.BTStatus,
            ve = fx.BTCategory;
        var Me, xe, Be, Te, Ee;
        e.PropertiesKey = void 0, (Me = e.PropertiesKey || (e.PropertiesKey = {})).UPGRADE = "upgrade", Me.BUILD = "build", Me.WAITUPGRADE = "wait_upgrade", Me.WAITBUILD = "wait_build", Me.TIMESTAMP = "timeStamp", Me.FILTERTARGET = "filterTarget", Me.INTERVAL = "interval", Me.SKILLID = "skill_id", Me.NOWATTACK = "now_attack", Me.DESTPOS = "destination_pos", Me.ATTACK = "attack";
        class XIdleNodeAction extends fx.BTAction {
            constructor(e) {
                super({
                    name: "IdleNode",
                    title: "idle"
                }), this.aniName = e
            }
            open(e) {
                e.target.playAnim(this.aniName)
            }
            tick(e) {
                e.target;
                return Ie.SUCCESS
            }
        }
        XIdleNodeAction.register("IdleNode", ve.ACTION);
        class XRunAction extends fx.BTAction {
            constructor(e, t) {
                super({
                    name: XRunAction.NAME
                }), this.aniName = e, this.canThrough = t
            }
            open(e) {
                e.target.playAnim(this.aniName)
            }
            tick(e) {
                let t = e.target,
                    i = t.getCurPath();
                return i && 0 != i.length ? t.runWithPath(i, this.canThrough) ? Ie.FAILURE : Ie.SUCCESS : Ie.FAILURE
            }
        }
        XRunAction.NAME = "RunAction", XRunAction.register(XRunAction.NAME, ve.ACTION);
        class XSimpleRunAction extends fx.BTAction {
            constructor() {
                super({
                    name: XSimpleRunAction.NAME
                }), this.atkIntervalTs = 0
            }
            open(e) {
                e.target.playAnim(this.aniName)
            }
            tick(e) {
                let i = e.target,
                    s = i.getCurPath();
                if (!s || s.length < 2) return Ie.SUCCESS;
                let a = i.data,
                    n = i.getAttackCd(),
                    r = t.gameTime.now;
                if (r - this.atkIntervalTs >= 1e3 * n) {
                    this.atkIntervalTs = r;
                    let e = s[1],
                        n = t.mapMgr.mapPosToGridPos(e.x, e.y),
                        o = t.buildingMgr.getBuilding(n.x, n.y),
                        l = s[0],
                        h = t.mapMgr.mapPosToGridPos(l.x, l.y),
                        d = t.buildingMgr.getBuilding(h.x, h.y);
                    if (d) {
                        if (XV2Util01.pDistance(new fx.V2(a.owner.x, a.owner.y), new fx.V2(d.owner.x, d.owner.y)) <= i.getAttackRange()) return i.attack(d), Ie.FAILURE
                    }
                    if (o) {
                        if (XV2Util01.pDistance(new fx.V2(a.owner.x, a.owner.y), new fx.V2(o.owner.x, o.owner.y)) <= i.getAttackRange()) return i.attack(o), Ie.FAILURE
                    }
                }
                return Ie.SUCCESS
            }
        }
        XSimpleRunAction.NAME = "SimpleRunAction", XSimpleRunAction.register(XSimpleRunAction.NAME, ve.ACTION);
        class XAttackAction extends fx.BTAction {
            constructor() {
                super({
                    name: XAttackAction.NAME
                }), this.atkIntervalTs = 0
            }
            tick(i) {
                let s = i.target,
                    a = s.getAttackCd(),
                    n = t.gameTime.now,
                    r = s.getCurTarget(),
                    o = s.getDataModel();
                if (o.isRage && (this.atkRageStartTs = n), s.getLastAtkTarget() || (s.setLastAtkTarget(r), this.atkRageStartTs = n, this.atkEscapeStartTs = n, this.canDizzySkill = !0), this.lastTarget && this.lastTarget.owner == r.owner && this.atkEscapeStartTs || (this.atkRageStartTs = n, this.atkEscapeStartTs = n, this.lastTarget = r, this.canDizzySkill = !0, s.setStartAtkTime(n)), n - this.atkIntervalTs >= 1e3 * a) {
                    if (n - this.atkRageStartTs > 2e4) i.blackboard.set(e.PropertiesKey.SKILLID, "rage", i.tree.id), this.atkRageStartTs = n;
                    else if (this.canDizzySkill && !o.isGhost && r.type == e.BuildType.door && !r.isOpen && r.curHp <= .2 * r.maxHp) {
                        XRandomUtil.random() <= .3 && (i.blackboard.set(e.PropertiesKey.SKILLID, "dizzy", i.tree.id), this.canDizzySkill = !1)
                    }
                    return s.attack(r), this.atkIntervalTs = n, i.blackboard.set(e.PropertiesKey.NOWATTACK, !0, i.tree.id), Ie.SUCCESS
                }
                i.blackboard.set(e.PropertiesKey.NOWATTACK, !1, i.tree.id);
                let l = s.getRoomModel();
                if (l && (l.doorModel && !l.doorModel.isOpen || !l.doorModel)) return Ie.SUCCESS;
                let h = this.atkEscapeStartTs,
                    d = 0;
                if (t.user.gameInfo.isStartLv && t.gameMgr.gameMode == e.GameMode.E_Defense) {
                    let e = t.gameMgr.dCfg;
                    d = s.getDataModel().lv >= e.escLv ? e.atkEscTime : 10
                } else d = s.getDataModel().lv >= 5 ? 20 : 10;
                n = t.gameTime.now;
                let u = s.getEscapeTimeRand();
                if (n - h > 1e3 * d) {
                    this.atkEscapeStartTs = n;
                    let a = XRandomUtil.random();
                    if ((s.getHpPercent() < .8 || t.gameMgr.gameMode != e.GameMode.E_Defense || !t.gameMgr.diff) && a < u)
                        if (s.getHpPercent() > .5) {
                            this.lastTarget = null, s.setCurTarget(null), fx.EventCenter.I.event(XEventNames.E_HUNTER_LEAVE, [s.getDataModel()]);
                            let t = i.blackboard.get(e.PropertiesKey.FILTERTARGET, i.tree.id);
                            t ? (t.splice(0), t.push(r)) : t = [r], i.blackboard.set(e.PropertiesKey.FILTERTARGET, t, i.tree.id), Laya.timer.clear(this, this.clearFilterTarget), Laya.timer.once(5e3, this, this.clearFilterTarget, [i.blackboard, i.tree.id]), this.atkEscapeStartTs = 0
                        } else this.lastTarget = null, s.setEscape(!0)
                }
                return Ie.SUCCESS
            }
            clearFilterTarget(t, i) {
                t.set(e.PropertiesKey.FILTERTARGET, null, i)
            }
        }
        XAttackAction.NAME = "AttackAction", XAttackAction.register(XAttackAction.NAME, ve.ACTION);
        class XFindMapBuildAct extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XFindEmptyBedAct.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let i = e.target;
                if (i.getTakeMapBuild()) return i.setMapBuildTarget(null), this.lastMapBuild = void 0, !1;
                let s, a = this.lastMapBuild;
                if (!this.lastMapBuild || (s = this.lastMapBuild.isUsed)) {
                    let e = t.buildingMgr.mapBuildScriptArr;
                    if (e && e.length) {
                        e = fx.Utils.randomArrayEx(e);
                        for (const t of e)
                            if (!t.isTarget && !t.isUsed) {
                                t.isTarget = !0, a = t;
                                break
                            }
                    }
                }
                return a ? (i.setMapBuildTarget(a), i.setCurTarget(a), this.lastMapBuild = a, !0) : (i.setMapBuildTarget(null), this.lastMapBuild = void 0, !1)
            }
        }
        XFindMapBuildAct.NAME = "FindMapBuild", XFindMapBuildAct.register(XFindMapBuildAct.NAME, ve.ACTION);
        class XTakeMapBuildAction extends fx.BTAction {
            constructor() {
                super({
                    name: XTakeMapBuildAction.NAME
                })
            }
            tick(e) {
                let t = e.target;
                if (t.getTakeMapBuild()) return t.setMapBuildTarget(null), Ie.FAILURE;
                let i = t.getMapBuildTarget();
                return i && t.takeMapBuild(i) ? Ie.SUCCESS : Ie.FAILURE
            }
        }
        XTakeMapBuildAction.NAME = "TakeMapBuild", XTakeMapBuildAction.register(XTakeMapBuildAction.NAME, ve.ACTION);
        class XFindEmptyBedAct extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XFindEmptyBedAct.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let i, s = e.target,
                    a = this.lastBed;
                if (!this.lastBed || (i = s.isBedUsed(this.lastBed))) {
                    let n = e.blackboard.get(XFindEmptyBedAct.NAME);
                    if (n && 0 != n.length || (n = s.getAllRoomIdRand(), e.blackboard.set(XFindEmptyBedAct.NAME, n)), a = null, i) {
                        let e = s.getRoomModel(this.lastBed.roomId),
                            [t, i] = this.findInMoreBedRoom([e]);
                        a = t, i && t && n.splice(n.indexOf(a.roomId), 1)
                    }
                    if (!a) {
                        let e = n.length,
                            i = XRandomUtil.random(),
                            r = [],
                            o = [];
                        for (; e--;) {
                            if (0 == t.user.gameInfo.winCnt + t.user.gameInfo.failCnt && 3 == n[e]) continue;
                            if (t.gameMgr.defenseFindRoomId.includes(n[e])) continue;
                            let i = s.getRoomModel(n[e]);
                            i ? (i.doorModel && i.doorModel.isOpen || !i.doorModel) && (1 == i.bedModelList.length ? r.push(i) : i.bedModelList.length > 1 && o.push(i)) : console.log("FindEmptyBedAction not found room!")
                        }
                        if (i < .5) {
                            let [e, t] = this.findInOneBedRoom(r);
                            a = e, t && n.splice(n.indexOf(a.roomId), 1)
                        } else {
                            let [e, t] = this.findInMoreBedRoom(o);
                            a = e, t && n.splice(n.indexOf(a.roomId), 1)
                        }
                    }
                }
                return a ? (s.setCurTarget(a), t.gameMgr.defenseFindRoomId.includes(a.roomId) || t.gameMgr.defenseFindRoomId.push(a.roomId), this.lastBed = a, !0) : (s.setCurTarget(null), this.lastBed = void 0, !1)
            }
            findInOneBedRoom(e) {
                if (0 == e.length) return [null, !1];
                fx.Utils.randomArray(e);
                let t, i, s = e.length;
                for (; s--;) {
                    let a = e[s].bedModelList[0];
                    if (!a.isUsed) {
                        t = a, i = !0;
                        break
                    }
                }
                return [t, i]
            }
            findInMoreBedRoom(e) {
                if (0 == e.length) return [null, !1];
                fx.Utils.randomArray(e);
                let t, i = e.length,
                    s = !1;
                for (; i--;) {
                    let a, n = e[i],
                        r = n.bedModelList.length;
                    for (const e of n.bedModelList) e.isUsed ? r-- : a = e;
                    if (r > 0 && (r--, t = a), 0 == r && t && (s = !0), t) break
                }
                return [t, s]
            }
        }
        XFindEmptyBedAct.NAME = "FindEmptyBed", XFindEmptyBedAct.register(XFindEmptyBedAct.NAME, ve.ACTION);
        class XGotoBedAction extends fx.BTAction {
            constructor() {
                super({
                    name: XGotoBedAction.NAME
                })
            }
            tick(e) {
                let i = e.target,
                    s = i.getCurTarget();
                if (!s) return Ie.FAILURE;
                let a = t.mapMgr.mapPosToGridPos(s.owner.x, s.owner.y);
                return i.gotoBed(a.x, a.y) ? Ie.SUCCESS : Ie.FAILURE
            }
        }
        XGotoBedAction.NAME = "GotoBed", XGotoBedAction.register(XGotoBedAction.NAME, ve.ACTION);
        class XRepaireAction extends fx.BTAction {
            constructor() {
                super({
                    name: XRepaireAction.NAME
                })
            }
            tick(e) {
                let t = e.target,
                    i = t.getRoomModel(t.getOwnerRoomId());
                return i ? (t.fixDoor(i), Ie.SUCCESS) : Ie.FAILURE
            }
        }
        XRepaireAction.NAME = "Repaire", XRepaireAction.register(XRepaireAction.NAME, ve.ACTION);
        class XUpgradeAction extends fx.BTAction {
            constructor() {
                super({
                    name: XUpgradeAction.NAME
                })
            }
            tick(i) {
                let s = i.target,
                    a = Ie.FAILURE,
                    n = s.getDataModel();
                if (!n.isDie && n.isBed) {
                    let i = this.takeOut(e.PropertiesKey.BUILD);
                    if (i) {
                        s.hasEnoughCoinEnergy(i) ? t.buildingMgr.build(n.uuid, i.id, i.x, i.y, 0, 1) : t.buildingMgr.buildFree(n.uuid, i.id, i.x, i.y, 0, 1), a = Ie.SUCCESS
                    } else {
                        let t = this.takeOut(e.PropertiesKey.UPGRADE);
                        t && (s.upgradeBuilding(t), a = Ie.SUCCESS)
                    }
                }
                return a
            }
        }
        XUpgradeAction.NAME = "Upgrade", XUpgradeAction.register(XUpgradeAction.NAME, ve.ACTION);
        class XRandomSpawnPosCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XRandomSpawnPosCdt.NAME,
                    child: e
                })
            }
            satisfy(t) {
                let i = t.target.getRandomHealZonePos();
                return !!i && (this.output(e.PropertiesKey.DESTPOS, i), !0)
            }
        }
        XRandomSpawnPosCdt.NAME = "RandomSpawnPos", XRandomSpawnPosCdt.register(XRandomSpawnPosCdt.NAME, ve.CONDITION);
        class XPostEventAction extends fx.BTAction {
            constructor(e) {
                super({
                    name: XPostEventAction.NAME
                }), this.type = e
            }
            tick(e) {
                let t = e.target;
                return fx.EventCenter.I.event(this.type, t.getDataModel()), Ie.SUCCESS
            }
        }
        XPostEventAction.NAME = "PostEvent", XPostEventAction.register(XPostEventAction.NAME, ve.ACTION);
        class XClearTargetAction extends fx.BTAction {
            constructor() {
                super({
                    name: XClearTargetAction.NAME
                })
            }
            tick(e) {
                let t = e.target;
                return t.setEscape(!1), t.setCurTarget(null), Ie.SUCCESS
            }
        }
        XClearTargetAction.NAME = "ClearTarget", XClearTargetAction.register(XClearTargetAction.NAME, ve.ACTION);
        class XDizzyAction extends fx.BTAction {
            constructor(e) {
                super({
                    name: XDizzyAction.NAME
                }), this.aniName = e
            }
            open(e) {
                e.target.playAnim(this.aniName)
            }
            tick(t) {
                let i = t.target,
                    s = i.getDizzyDurSec(),
                    a = this.takeOut(e.PropertiesKey.TIMESTAMP);
                if (s > 0 && a > 0) {
                    return Laya.timer.currTimer - a > 1e3 * s ? (i.dismissDizzy(), Ie.FAILURE) : Ie.SUCCESS
                }
                return Ie.FAILURE
            }
        }
        XDizzyAction.NAME = "DizzyAction", XDizzyAction.register(XDizzyAction.NAME, ve.ACTION);
        class XBreakAwayAction extends fx.BTAction {
            constructor() {
                super({
                    name: XBreakAwayAction.NAME
                })
            }
            tick(e) {
                return e.target.breakAway(), Ie.SUCCESS
            }
        }
        XBreakAwayAction.NAME = "BreakAway", XBreakAwayAction.register(XBreakAwayAction.NAME, ve.ACTION);
        class XSkillAction extends fx.BTAction {
            constructor() {
                super({
                    name: XSkillAction.NAME
                })
            }
            tick(t) {
                let i = t.target,
                    s = t.blackboard.get(e.PropertiesKey.SKILLID, t.tree.id);
                return t.blackboard.set(e.PropertiesKey.SKILLID, void 0, t.tree.id), i.performSkill(s), Ie.SUCCESS
            }
        }
        XSkillAction.NAME = "SkillAction", XSkillAction.register(XSkillAction.NAME, ve.ACTION);
        class XAllTrueCdt extends fx.BTCondition {
            constructor(...e) {
                super({
                    name: "DepsCondition"
                }), this.arrCdts = e
            }
            satisfy(e) {
                let t = !0;
                for (const i of this.arrCdts) {
                    if (i._execute(e) != Ie.SUCCESS) {
                        t = !1;
                        break
                    }
                }
                return t
            }
        }
        class XOneTrueCdt extends fx.BTCondition {
            constructor(...e) {
                super({
                    name: "DepsCondition"
                }), this.arrCdts = e
            }
            satisfy(e) {
                let t = !1;
                for (const i of this.arrCdts) {
                    if (i._execute(e) == Ie.SUCCESS) {
                        t = !0;
                        break
                    }
                }
                return t
            }
        }
        class XHasAngelAroundCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasAngelAroundCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target;
                if (t.getCurTarget()) return !1;
                let i = t.getDataModel();
                if (i.isEntice || i.isGhost) return !1;
                let s = t.getAllAngelsRand(),
                    a = t.getOwnerPos();
                if (!a) return !1;
                for (const e of s) {
                    if (e.isDie) continue;
                    if (a.distanceSq(t.getTargetPos(e)) < 921600) return XToast.show("木头人盯上你了"), t.setCurTarget(e), !0
                }
                return !1
            }
        }
        XHasAngelAroundCdt.NAME = "HasAngelAround", XHasAngelAroundCdt.register(XHasAngelAroundCdt.NAME, ve.CONDITION);
        class XHasPlayerAroundCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasPlayerAroundCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let i = e.target;
                if (i.getDataModel().isEntice) return !1;
                let s = i.getAllPlayersRand(),
                    a = i.getOwnerPos();
                if (!a) return !1;
                for (const e of s) {
                    if (e.isDie) continue;
                    if (e.uuid == t.playerMgr.mineUuid) continue;
                    if (a.distanceSq(i.getTargetPos(e)) < 1e4) return i.setCurTarget(e), !0
                }
                return !1
            }
        }
        XHasPlayerAroundCdt.NAME = "HasPlayerAround", XHasPlayerAroundCdt.register(XHasPlayerAroundCdt.NAME, ve.CONDITION);
        class XHasBuildingAroundCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasBuildingAroundCdt.NAME,
                    child: e
                })
            }
            satisfy(i) {
                let s = i.target,
                    a = s.getDataModel(),
                    n = s.getCurTarget(),
                    r = s.getNearestBuilding();
                if (a.isEntice) {
                    if (r) {
                        if (!n) return !1;
                        let e = t.mapMgr.getRoomById(r.roomId),
                            i = t.mapMgr.mapPosToGridPos(a.owner.x, a.owner.y);
                        for (const t of e.grids)
                            if (i.x == t.x && i.y == t.y) return s.setCurTarget(r), !0;
                        if (e.doorPosArr && e.doorPosArr.length)
                            for (const i of e.doorPosArr) {
                                if (i.x == n.x && i.y == n.y) return s.setCurTarget(r), !0; {
                                    let e = t.buildingMgr.getBuilding(i.x, i.y);
                                    if (e) {
                                        let i = t.mapMgr.getRoomById(e.roomId);
                                        if (i.doorPosArr && i.doorPosArr.length)
                                            for (const e of i.doorPosArr) {
                                                if (e.x == n.x && e.y == n.y) return s.setCurTarget(r), !0; {
                                                    let i = t.buildingMgr.getBuilding(e.x, e.y);
                                                    if (i) {
                                                        let e = t.mapMgr.getRoomById(i.roomId);
                                                        if (e.doorPosArr && e.doorPosArr.length)
                                                            for (const t of e.doorPosArr)
                                                                if (t.x == n.x && t.y == n.y) return s.setCurTarget(r), !0
                                                    }
                                                }
                                            }
                                    }
                                }
                            }
                    }
                    return !1
                }
                let o = i.blackboard.get(e.PropertiesKey.FILTERTARGET, i.tree.id);
                if (o && o.includes(r)) return !1;
                if (r && 6020 != r.id && 6027 != r.id) {
                    if (n) {
                        let o = t.playerMgr.player;
                        if (n == r && r.roomId == o.roomId && o.isOutDoor) {
                            let l = t.mapMgr.getRoomById(r.roomId),
                                h = t.mapMgr.mapPosToGridPos(a.owner.x, a.owner.y);
                            for (const e of l.grids)
                                if (h.x == e.x && h.y == e.y) return !1;
                            s.setCurTarget(o);
                            let d = i.blackboard.get(e.PropertiesKey.FILTERTARGET, i.tree.id);
                            return d ? (d.splice(0), d.push(n)) : d = [n], i.blackboard.set(e.PropertiesKey.FILTERTARGET, d, i.tree.id), Laya.timer.clear(this, this.clearFilterTarget), Laya.timer.once(5e3, this, this.clearFilterTarget, [i.blackboard, i.tree.id]), !1
                        }
                        let l = n.bedModel ? n.bedModel : n;
                        if (l) {
                            let i = l.roomId;
                            if (i != r.roomId) {
                                if (n.type == e.PlayerType.E_Defender) return s.setCurTarget(r), !0;
                                if (n.type == e.BuildType.door || n.type == e.BuildType.bed) return s.setCurTarget(r), !0;
                                let i = t.mapMgr.mapPosToGridPos(l.owner.x, l.owner.y),
                                    a = t.mapMgr.getRoomById(r.roomId);
                                for (const t of a.grids)
                                    if (i.x == t.x && i.y == t.y && r.type == e.BuildType.door) return s.setCurTarget(r), !0;
                                return !1
                            } {
                                let o = t.mapMgr.getRoomById(i),
                                    l = t.mapMgr.mapPosToGridPos(a.owner.x, a.owner.y);
                                for (const t of o.grids)
                                    if (l.x == t.x && l.y == t.y && r.type == e.BuildType.door) return !o.players || !o.players.length || o.players[0].isDie || o.players[0].isOutDoor ? s.setCurTarget(r) : n == r && s.setCurTarget(o.players[0]), !0
                            }
                        }
                    }
                    return s.setCurTarget(r), !0
                }
                return !1
            }
            clearFilterTarget(t, i) {
                t.set(e.PropertiesKey.FILTERTARGET, null, i)
            }
        }
        XHasBuildingAroundCdt.NAME = "HasBuildingAround", XHasBuildingAroundCdt.register(XHasBuildingAroundCdt.NAME, ve.CONDITION);
        class XHasPlayerAtkCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasPlayerAtkCdt.NAME,
                    child: e
                })
            }
            satisfy(i) {
                let s, a, n = i.target,
                    r = n.getCurTarget(),
                    o = n.getDataModel();
                if (o.isEntice) return !1;
                if (r && r instanceof XPlayerModel && n.targetIsOK(r)) return !0;
                let l = n.getAllPlayersRand(),
                    h = 99999;
                for (const i of l) {
                    if (i.isDie) continue;
                    if (-1 != i.roomId) {
                        if (r && n.targetIsOK(r) && i.roomId == r.roomId) {
                            let s = t.mapMgr.getRoomById(i.roomId),
                                a = t.mapMgr.mapPosToGridPos(o.owner.x, o.owner.y);
                            for (const t of s.grids)
                                if (a.x == t.x && a.y == t.y && r.type == e.BuildType.door && !i.isDie && !i.isOutDoor) return n.setCurTarget(i), !0;
                            continue
                        }
                        if (i.roomId != n.getOwnerRoomId()) {
                            let e = n.getRoomModel(i.roomId);
                            if (null != e && e.doorModel && !e.doorModel.isOpen && !e.doorModel.isDie) continue
                        }
                    }
                    let l = n.getOwnerPos(),
                        d = n.getPath(l, n.getTargetPos(i));
                    d && d.length < h && (h = d.length, s = i, a = d)
                }
                return !!s && (n.setCurTarget(s), !0)
            }
        }
        XHasPlayerAtkCdt.NAME = "HasPlayerAtk", XHasPlayerAtkCdt.register(XHasPlayerAtkCdt.NAME, ve.CONDITION);
        class XRandomRoomCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XRandomRoomCdt.NAME,
                    child: e
                })
            }
            satisfy(i) {
                let s = i.target;
                if (!s.getCurTarget()) {
                    let i = s.getAllRoomIdRand(),
                        a = s.getDataModel();
                    a.isEntice && (i[0] = t.playerMgr.player.roomId);
                    let n, r = s.getRoomModel(i[0]);
                    if (r)
                        if (s.getIsFirstFind() && !a.isGhost) {
                            if (!r.bedModelList[0] || r.bedModelList[0].isDie) return a.isEntice = !1, !1;
                            n = r.doorModel && (r.doorModel.isOpen || r.doorModel.isDie) ? r.bedModelList[0] : r.doorModel
                        } else {
                            if (r.doorModel && (r.doorModel.isOpen || r.doorModel.isDie)) return a.isEntice = !1, !1;
                            n = r.doorModel
                        }
                    if (!n) return !1;
                    if (n.type == e.BuildType.door) {
                        let i = s.getLastAtkTarget();
                        if (i && i.type == e.BuildType.door && !i.isDie) {
                            let e = t.mapMgr.getRoomById(i.roomId);
                            if (e.doorPosArr && e.doorPosArr.length)
                                for (const a of e.doorPosArr) {
                                    if (a.x == n.x && a.y == n.y) return s.setCurTarget(i), !0; {
                                        let e = t.buildingMgr.getBuilding(a.x, a.y);
                                        if (e) {
                                            let a = t.mapMgr.getRoomById(e.roomId);
                                            if (a.doorPosArr && a.doorPosArr.length)
                                                for (const e of a.doorPosArr)
                                                    if (e.x == n.x && e.y == n.y) return s.setCurTarget(i), !0
                                        }
                                    }
                                }
                        }
                    }
                    s.setCurTarget(n)
                }
                return !0
            }
        }
        XRandomRoomCdt.NAME = "RandomRoom", XRandomRoomCdt.register(XRandomRoomCdt.NAME, ve.CONDITION);
        class XHasTargetCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasTargetCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target,
                    i = t.getCurTarget();
                return !i || i.owner && !i.owner.destroyed && t.targetIsOK(i) || (t.setCurTarget(null), i = null), !!i
            }
        }
        XHasTargetCdt.NAME = "HasTarget", XHasTargetCdt.register(XHasTargetCdt.NAME, ve.CONDITION);
        class XHasPathCdt extends fx.BTCondition {
            constructor(e, t) {
                super({
                    name: XHasPathCdt.NAME,
                    child: t
                }), e && (this.dstPos = e.clone())
            }
            satisfy(t) {
                let i = t.target,
                    s = this.dstPos || this.takeOut(e.PropertiesKey.DESTPOS) || i.getTargetPos();
                if (!s) return !1;
                let a = i.getCurPath();
                if (!a || 0 == a.length) {
                    let e = i.getOwnerPos();
                    a = i.getPath(e, s)
                }
                return !!(a && a.length > 0) && (i.setCurPath(a), !0)
            }
        }
        XHasPathCdt.NAME = "HasPath", XHasPathCdt.register(XHasPathCdt.NAME, ve.CONDITION);
        class XNotInStopRangeCdt extends fx.BTCondition {
            constructor(e, t) {
                super({
                    name: XNotInStopRangeCdt.NAME,
                    child: t
                }), this.range = e
            }
            satisfy(e) {
                let t = e.target,
                    i = t.getOwnerPos(),
                    s = t.getTargetPos(t.getCurTarget()),
                    a = t.getCurTarget();
                return !(!i || !s) && !(i.distance(s) <= this.range && t.targetIsOK(a))
            }
        }
        XNotInStopRangeCdt.NAME = "NotInStopRange", XNotInStopRangeCdt.register(XNotInStopRangeCdt.NAME, ve.CONDITION);
        class XEscapeCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XEscapeCdt.NAME,
                    child: e
                })
            }
            satisfy(i) {
                let s = i.target;
                s.getDataModel();
                if (s.isEscapeHp() || s.isEscape()) {
                    let i = s.getDataModel();
                    return t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? i.isGhost ? XToast.show("执行人逃跑了") : XToast.show("木头人逃跑了") : i.isGhost ? XToast.show(`${i.name}逃跑了`) : XToast.show("噬魂者逃跑了"), s.setCurTarget(null), s.setLastAtkTarget(null), s.setEscape(!0), !0
                }
                return !1
            }
        }
        XEscapeCdt.NAME = "EscapeCondition", XEscapeCdt.register(XEscapeCdt.NAME, ve.CONDITION);
        class XNotInBedCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XNotInBedCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                return !e.target.isInBed()
            }
        }
        XNotInBedCdt.NAME = "NotInBed", XNotInBedCdt.register(XNotInBedCdt.NAME, ve.CONDITION);
        class XShouldFixCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XShouldFixCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target,
                    i = t.getRoomModel(t.getOwnerRoomId());
                if (i && i.doorModel) {
                    let e = i.doorModel;
                    if (e.curHp < .75 * e.maxHp) return !0
                }
                return !1
            }
        }
        XShouldFixCdt.NAME = "ShouldFix", XShouldFixCdt.register(XShouldFixCdt.NAME, ve.CONDITION);
        class XTimeIntervalCdt extends fx.BTCondition {
            constructor(e, i) {
                super({
                    name: XTimeIntervalCdt.NAME,
                    child: i
                }), e && (this.interval = 1e3 * e), this.startTs = t.gameTime.now
            }
            satisfy(i) {
                let s = t.gameTime.now,
                    a = this.interval || this.takeOut(e.PropertiesKey.INTERVAL);
                return a || (a = 0), s - this.startTs > a && (this.startTs = s, !0)
            }
        }
        XTimeIntervalCdt.NAME = "TimeInterval", XTimeIntervalCdt.register(XTimeIntervalCdt.NAME, ve.CONDITION);
        class XCanUpgradeCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XCanUpgradeCdt.NAME,
                    child: e
                }), this.skillBuildArr = ["6005_1", "6007_1", "6010_1", "6002_1", "6006_1", "6008_1", "6003_1", "6004_1", "6009_1", "6011_1", "6001_1", "5000_1", "5000_2", "5000_3", "5000_4"]
            }
            satisfy(i) {
                let s = t.gameTime.now;
                if (this.lastCheckTime && s - this.lastCheckTime < 1e3) return !1;
                this.lastCheckTime = s;
                let a = i.target,
                    n = a.getOwnerBed(),
                    r = a.getRoomDoor();
                if (!n || !r) return !1;
                r.curHp < .5 * r.maxHp && (this.lastUpObj = r, this.lastBuildObj = null, this.isBuild = !0);
                let o = this.lastUpObj,
                    l = this.lastBuildObj;
                if (!this.isBuild) {
                    let i = a.getOwnerAllBuildings(e.BuildType.tower),
                        s = a.getOwnerAllBuildings(e.BuildType.energy),
                        h = 0;
                    if (n.lv < 5) {
                        let s = .7;
                        if (t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                            let e = a.getDataModel();
                            if (s = .65, e.randomCnt < 3) {
                                h = t.gameMgr.dCfg.randomRate;
                                let i = t.buildingMgr.magicConsumeArr[e.randomCnt];
                                (e.coin < i[0] || e.energy < i[1]) && (h = 0)
                            } else h = 0
                        }
                        let d = XRandomUtil.random();
                        if (h > d) l = "6666_1";
                        else if (d < s) 10 == n.lv ? l = "3000_1" : o = n.lv < 13 ? n : r;
                        else if (d < .75)
                            if (i.length > 0) {
                                o = i[XRandomUtil.getIntRandom(0, i.length - 1)]
                            } else l = "3000_1", this.isBuild = !0;
                        else 13 == r.lv ? (l = "4000_1", this.isBuild = !0) : o = r
                    } else {
                        if (t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                            let e = a.getDataModel();
                            if (e.randomCnt < 3) {
                                h = t.gameMgr.dCfg.randomRate1;
                                let i = t.buildingMgr.magicConsumeArr[e.randomCnt];
                                (e.coin < i[0] || e.energy < i[1]) && (h = 0)
                            } else h = 0
                        }
                        let d = XRandomUtil.random();
                        if (h > d) l = "6666_1";
                        else if (d < .65) {
                            let e = XRandomUtil.random();
                            if (e < .4) 10 == n.lv ? (l = "3000_1", this.isBuild = !0) : o = n.lv < 13 ? n : r;
                            else if (e < .7)
                                if (i.length > 0) {
                                    o = i[XRandomUtil.getIntRandom(0, i.length - 1)]
                                } else l = "3000_1", this.isBuild = !0;
                            else if (e < .85) 13 == r.lv ? (l = "4000_1", this.isBuild = !0) : o = r;
                            else if (s.length > 0) {
                                o = s[XRandomUtil.getIntRandom(0, s.length - 1)]
                            } else l = "4000_1", this.isBuild = !0
                        } else {
                            let e = XRandomUtil.random(),
                                t = 1;
                            if (s.length > 0)
                                for (const e of s)
                                    if (e.lv >= 2) {
                                        t = .5;
                                        break
                                    }
                            e < t ? (l = s.length > 7 ? "3000_1" : XRandomUtil.random() < .5 ? "3000_1" : "4000_1", this.isBuild = !0) : (l = fx.Utils.randomInArray(this.skillBuildArr), this.isBuild = !0)
                        }
                    }
                }
                if (o)
                    if (this.lastUpObj = o, a.hasEnoughCoinEnergy(o)) {
                        if (this.output(e.PropertiesKey.UPGRADE, o), this.lastBuildObj = this.lastUpObj = null, t.gameMgr.gameMode == e.GameMode.E_Defense) {
                            let e = t.mapMgr.getRoomById(o.roomId);
                            1 == t.gameMgr.mapId ? o.lv > 4 && (e.aiMult = fx.Utils.randomInArray(t.gameMgr.aiMultArr)) : 2 == t.gameMgr.mapId ? o.lv >= 4 && 1 == e.aiMult && (e.aiMult = fx.Utils.randomInArray(t.gameMgr.aiMultArr)) : o.lv > 6 ? 1 != e.aiMult && (e.aiMult = 1) : o.lv >= 4 && 1 == e.aiMult && (e.aiMult = fx.Utils.randomInArray(t.gameMgr.aiMultArr))
                        }
                    } else if (1 == t.gameMgr.difficultABTest && o == r && !this.isFreeUpDoor && r.curHp < .15 * r.maxHp && Math.random() > .4) this.isFreeUpDoor = !0, this.output(e.PropertiesKey.UPGRADE, o), this.lastBuildObj = this.lastUpObj = null;
                else {
                    XRandomUtil.random() < .2 && (this.lastBuildObj = this.lastUpObj = null), o = null
                }
                if (l) {
                    this.lastBuildObj = l;
                    let t = a.createBuilding(l);
                    if (t && a.hasEnoughCoinEnergy(t, !0)) this.output(e.PropertiesKey.BUILD, t), this.isBuild = this.lastBuildObj = this.lastUpObj = null;
                    else {
                        XRandomUtil.random() < .2 && (this.isBuild = this.lastBuildObj = this.lastUpObj = null), l = null
                    }
                }
                return !(!o && !l)
            }
        }
        XCanUpgradeCdt.NAME = "CanUpgrade", XCanUpgradeCdt.register(XCanUpgradeCdt.NAME, ve.CONDITION);
        class XIsMaxHpCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XIsMaxHpCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target;
                return !t.getDataModel().isBack && t.isMaxHp()
            }
        }
        XIsMaxHpCdt.NAME = "IsMaxHp", XIsMaxHpCdt.register(XIsMaxHpCdt.NAME, ve.CONDITION);
        class XHasTargetNewCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasTargetNewCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target,
                    i = t.getCurTarget();
                return i && !t.targetIsOKNew(i) && (t.setCurTarget(null), i = null), !!i
            }
        }
        XHasTargetNewCdt.NAME = "HasTargetNew", XHasTargetNewCdt.register(XHasTargetNewCdt.NAME, ve.CONDITION);
        class XIsDizzyingCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XIsDizzyingCdt.NAME,
                    child: e
                })
            }
            satisfy(t) {
                let i = t.target.getDizzyStartTime();
                return i > 0 && (this.output(e.PropertiesKey.TIMESTAMP, i), !0)
            }
        }
        XIsDizzyingCdt.NAME = "IsDizzying", XIsDizzyingCdt.register(XIsDizzyingCdt.NAME, ve.CONDITION);
        class XNotOnOpenSpaceCdt extends fx.BTCondition {
            constructor(e, t) {
                super({
                    name: XNotOnOpenSpaceCdt.NAME,
                    child: t
                }), this.range = e
            }
            satisfy(t) {
                let i = t.target,
                    s = i.getOwnerGridPos(),
                    a = i.getBuildingByGridPos(s);
                if (!a || a.type != e.BuildType.door) return !1;
                let n = i.getOwnerPos(),
                    r = i.getCurTarget(),
                    o = i.getTargetPos(r),
                    l = this.range;
                return o && (l = n.distance(o)), !(l > this.range - 20) && !a.isOpen
            }
        }
        XNotOnOpenSpaceCdt.NAME = "NotOnOpenSpace", XNotOnOpenSpaceCdt.register(XNotOnOpenSpaceCdt.NAME, ve.CONDITION);
        class XIsNowAttackCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XIsNowAttackCdt.NAME,
                    child: e
                })
            }
            satisfy(t) {
                t.target;
                return !!t.blackboard.get(e.PropertiesKey.NOWATTACK, t.tree.id)
            }
        }
        XIsNowAttackCdt.NAME = "IsFirstAttack", XIsNowAttackCdt.register(XIsNowAttackCdt.NAME, ve.CONDITION);
        class XHasSkillId01 extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasSkillId01.NAME,
                    child: e
                })
            }
            satisfy(t) {
                t.target;
                return !!t.blackboard.get(e.PropertiesKey.SKILLID, t.tree.id)
            }
        }
        XHasSkillId01.NAME = "HasSkillId", XHasSkillId01.register(XHasSkillId01.NAME, ve.CONDITION);
        class XHasSkillId02 extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasSkillId02.NAME,
                    child: e
                })
            }
            satisfy(e) {
                return !!e.target.getDataModel().isUsingSkill
            }
        }
        XHasSkillId02.NAME = "HasSkillId", XHasSkillId02.register(XHasSkillId02.NAME, ve.CONDITION);
        class XHasPlayerBorrowCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XHasPlayerBorrowCdt.NAME,
                    child: e
                })
            }
            satisfy(i) {
                let s = i.target,
                    a = s.getDataModel(),
                    n = s.getCurTarget();
                if (a.isBack) return !1;
                if (a.changeSideUuid) {
                    let e = t.playerMgr.hunters[0];
                    return e != n && s.setCurTarget(e), !0
                } {
                    let i = t.playerMgr.player,
                        a = s.getNearestBuilding();
                    return a && a.type == e.BuildType.door && !a.isDie && a.playerUuid == i.uuid ? (n != a && s.setCurTarget(a), !0) : (i != n && s.setCurTarget(i), !0)
                }
            }
        }
        XHasPlayerBorrowCdt.NAME = "HasPlayerBorrow", XHasPlayerBorrowCdt.register(XHasPlayerBorrowCdt.NAME, ve.CONDITION);
        class XBackConditionCdt extends fx.BTCondition {
            constructor(e) {
                super({
                    name: XBackConditionCdt.NAME,
                    child: e
                })
            }
            satisfy(e) {
                let t = e.target;
                return !!t.getDataModel().isBack && (t.setCurTarget(null), t.setLastAtkTarget(null), t.setEscape(!0), !0)
            }
        }

        function yt(e, t = fx.EPolicy.RequireOne) {
            return new fx.BTSequence({
                children: e,
                successPolicy: t
            })
        }
        XBackConditionCdt.NAME = "BackCondition", XBackConditionCdt.register(XBackConditionCdt.NAME, ve.CONDITION);
        class XAIModel {
            constructor(e, t) {
                this.blackboard = t || new fx.BTBlackboard, this.bt = new fx.BehaviorTree, this.data = e
            }
            load(e) {
                this.bt.root = e
            }
            exec() {
                this.bt.tick(this.data, this.blackboard)
            }
            clearAI() {
                this.blackboard = new fx.BTBlackboard
            }
            idle(e) {
                return new XIdleNodeAction(e)
            }
            run(e, t) {
                let i = new XRunAction(e, t);
                return new fx.BTSequence({
                    children: [new XHasTargetCdt, (new XHasPathCdt).bindout(i), new XNotInStopRangeCdt(this.data.getAttackRange()), i],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
        }
        class _t extends XAIModel {
            constructor(e, t) {
                super(e, t)
            }
            notInBed(e) {
                let t = new XOneTrueCdt(new XNotInBedCdt);
                return t.add(e), t
            }
            findBed(e) {
                let t = new XFindEmptyBedAct;
                return new fx.BTSequence({
                    children: [t, e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            findMapBuild(e) {
                let t = new XFindMapBuildAct;
                return new fx.BTSequence({
                    children: [t, e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            takeMapBuild() {
                let e = new XTakeMapBuildAction;
                return new fx.BTSequence({
                    children: [e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            gotoBed() {
                let e = new XGotoBedAction;
                return new fx.BTSequence({
                    children: [e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            canRepaire(e, t) {
                let i = new XAllTrueCdt(new XShouldFixCdt, new XTimeIntervalCdt(e));
                return i.add(t), i
            }
            repaire() {
                let e = new XRepaireAction;
                return new fx.BTSequence({
                    children: [e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            upOrBuild() {
                let e = new XUpgradeAction;
                return new fx.BTSequence({
                    children: [(new XCanUpgradeCdt).bindout(e), e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
        }
        class XBuildingModel extends XBaseModel {
            constructor(e, t, i, s, a, n) {
                super(), this.canHandle = !0, this.isPlayerDelete = !1, this.id = e, this.roomId = t, this.lv = i, this.x = s, this.y = a, this.rotation = n
            }
            get msgKey() {
                return `bd_${this.x}_${this.y}`
            }
        }
        class EffectUtil {
            constructor() {
                this.lastPlayTimes = []
            }
            static get I() {
                return this._instance || (this._instance = new EffectUtil), this._instance
            }
            init(e) {
                this.effectLayer = e, this.lastPlayTimes = []
            }
            getPlayKey(e, t, i) {
                return `${e=Math.floor(e/80)}_${t=Math.floor(t/80)}_${i}`
            }
            checkInterval(e, t, i) {
                let s = this.getPlayKey(e, t, i),
                    a = this.lastPlayTimes[s] || 0,
                    n = Date.now();
                return n - a > 200 && (this.lastPlayTimes[s] = n, !0)
            }
            loadAnimAndPlay(e, t, i, s = !1, a) {
                let n = new Laya.Animation;
                n.loadAtlas(e), n.play(0, !1);
                let r = n._frames,
                    o = 0,
                    l = 0;
                for (let e = 0; e < r.length; e++) {
                    let t = r[e];
                    t._one, o < t._one.width && (o = t._one.width), l < t._one.height && (l = t._one.width)
                }
                n.pivot(o / 2, l / 2), a ? this.playAnimByTime(n, t, i, a) : this.playAnim(n, t, i)
            }
            playAnim(e, t, i, s = !1, a) {
                this.effectLayer.addChild(e), e.pos(t, i), e.play(0, s), s || e.on(Laya.Event.COMPLETE, this, () => {
                    e.offAll(), e.destroy(), a && a.run()
                })
            }
            playAnimByTime(e, t, i, s, a, n) {
                a ? a.addChild(e) : this.effectLayer.addChild(e), e.pos(t, i), e.play(0, !0), e.timer.once(s, this, () => {
                    e.destroy(), n && n.run()
                })
            }
            playAnimParent(e, t, i, s, a) {
                s ? s.addChild(e) : this.effectLayer.addChild(e), e.pos(t, i), e.play(0, !0), e.on(Laya.Event.COMPLETE, this, () => {
                    e.offAll(), e.destroy(), a && a.run()
                })
            }
            loadAnimAndPlayReturn(e, i, s, a = !1) {
                let n = new Laya.Animation;
                n.loadAtlas(e), n.play(0, !1);
                let r = n.getGraphicBounds(!0);
                return n.pivot(r.width / 2, r.height / 2), t.mapMgr.effectLayer.addChild(n), n.pos(i, s), n.play(0, a), a ? n : (n.on(Laya.Event.COMPLETE, this, () => {
                    n.offAll(), n.destroy()
                }), n)
            }
            playeEffect(e, i, s, a = !1, n) {
                if (!t.mapMgr.isInStageByMapPos(e, i)) return;
                if (!this.checkInterval(e, i, s)) return;
                Laya.loader.getRes(s) ? this.loadAnimAndPlay(s, e, i, a, n) : Laya.loader.load(s, Laya.Handler.create(this, () => {
                    this.effectLayer.destroyed || this.loadAnimAndPlay(s, e, i, a, n)
                }))
            }
            playUpgradeEffect(e, i) {
                let s = t.mapMgr.gridPosToMapPos(e, i);
                this.playeEffect(s.x, s.y, "res/effect/buildUpgrade.atlas")
            }
            playHitEffect(e, t, i) {
                this.playeEffect(e, t, "res/effect/hunterAttackEffect.atlas")
            }
            playHitEffZhua(e, t) {
                this.playeEffect(e, t, "res/atlas/res/Ani/zhua.atlas")
            }
            playHitEff40016(e, t) {
                this.playeEffect(e, t, "res/atlas/res/eff40016.atlas")
            }
            playShoot(e, i, s, a, n = 500, r, o) {
                o || (o = "res/game/arrow.png");
                let l = new Laya.Image(o);
                t.mapMgr.skillEffLayer.addChild(l), l.anchorX = 1, l.anchorY = .5, l.pos(e, i);
                let h = Math.atan2(a - i, s - e) * (180 / Math.PI);
                l.rotation = h, (new fx.Sequence).pos(s, a, n).exec(Laya.Handler.create(this, () => {
                    r && r.run(), l.destroy()
                })).run(l)
            }
            playBoomerang(e, i, s, a, n = 500, r) {
                let o = new Laya.Image("res/game/singleFan.png");
                t.mapMgr.skillEffLayer.addChild(o), o.anchorX = o.anchorY = .5, o.pos(e, i), (new fx.Sequence).parallel(2).pos(s, a, n).rotate(n, n).exec(Laya.Handler.create(this, () => {
                    r && r.run(), o.destroy()
                })).run(o)
            }
            playJieJieJie(e, i, s, a, n = 500, r) {
                let o, l = [];
                for (let e = 3; e > 0; e--) {
                    let t = new Laya.Image("res/game/jie.png");
                    t.anchorX = .5, t.anchorY = .5, t.width = t.height = 55 + 15 * e, l.push(t)
                }
                for (let h = 0; h < 3; h++) {
                    let d = 1e3 * fx.Utils.getFrameDelta();
                    0 == h && (o = 0), 1 == h && (o = 12 * d), 2 == h && (o = 23 * d), setTimeout(() => {
                        t.mapMgr.skillEffLayer.addChild(l[h]), l[h].pos(e, i), (new fx.Sequence).pos(s, a, n).exec(Laya.Handler.create(this, () => {
                            1 == h && r && r.run(), l[h].destroy()
                        })).run(l[h])
                    }, o)
                }
            }
            playbulletEffect(e, t, i) {}
            playKuangbaoEffect(e, t) {
                this.playeEffect(e, t - 80, "res/effect/kuangbaoEffect.atlas")
            }
            playKuangbao_1Effect(e, t) {
                this.playeEffect(e, t - 80, "res/effect/kuangbaoEffect_1.atlas")
            }
            playDizzyEffect(e, t, i) {
                i && i < 100 && (i *= 1e3), this.playeEffect(e - 20, t, "res/effect/build_dizzy.atlas", !1, i)
            }
            playSpecialAttackEffect(e, t) {
                t.visible = !1;
                const i = new Laya.Image("res/hunter/hunter_12_a.png");
                i.anchorX = .5, i.anchorY = .9, e.addChild(i);
                const s = t.scaleX;
                i.scale(s, s), e.timer.once(160, this, () => {
                    e.destroyed || (t.visible = !0), i.destroy()
                })
            }
            playAttackParticleEffect(e, i, s) {
                if (this.particleEffect || Laya.loader.load(e, Laya.Handler.create(this, e => {
                        this.particleEffect = new Laya.Particle2D(e), this.particleSettings = e, this.particleEffect.x = i, this.particleEffect.y = s;
                        let a = this.particleEffect.getGraphicBounds(!0);
                        this.particleEffect.pivot(a.width / 2, a.height / 2), t.mapMgr.effectLayer.addChild(this.particleEffect), this.particleEffect.emitter.start(.65), this.particleEffect.play()
                    }), null, Laya.Loader.JSON), this.particleEffect) {
                    let e = new Float32Array;
                    e[0] = 0, e[1] = -50, e[2] = 0, this.particleSettings.minVerticalVelocity = -20, this.particleSettings.maxHorizontalVelocity = -20, this.particleSettings.gravity = e, this.particleEffect.setParticleSetting(this.particleSettings), this.particleEffect.emitter.start(.65), this.particleEffect.play()
                }
            }
            playGhostEff(e, t, i, s, a, n, r, o, l) {}
            getAnim(e) {
                if (!e) return;
                let t = this.effectLayer.getChildByName(e);
                return t || null
            }
            removeAnim(e) {
                if (!e) return;
                let t = this.effectLayer.getChildByName(e);
                t && (t.offAll(), t.destroy())
            }
            removeAnims(e) {
                if (e)
                    for (const t of this.effectLayer.getChildren()) t.name.includes(e) && (t.offAll(), t.destroy())
            }
            loopRotate(e, t) {
                e.__loopRotateTween && this.stopLoopRotate(e);
                let i = 360 / Math.abs(t),
                    s = Laya.Tween.to(e, {
                        rotation: e.rotation + 360
                    }, 1e3 * i);
                s.repeat = 0, e.__loopRotateTween = s, e.on(Laya.Event.REMOVED, this, this.stopLoopRotate, [e])
            }
            stopLoopRotate(e) {
                if (e.__loopRotateTween) {
                    e.__loopRotateTween.clear(), delete e.__loopRotateTween
                }
            }
            playBuildAni(e, t) {
                Laya.loader.getRes(e) ? this.loadBuildAnimAndPlay(e, t) : Laya.loader.load(e, Laya.Handler.create(this, () => {
                    t.destroyed || this.loadBuildAnimAndPlay(e, t)
                }))
            }
            loadBuildAnimAndPlay(e, t) {
                let i = new Laya.Animation;
                i.loadAtlas(e), i.interval = 1e3, i.pivot(45, 45), t.addChild(i), i.pos(0, 0), i.play(0, !0)
            }
        }
        class wt extends Laya.Script {
            constructor() {
                super(...arguments), this.hide = !1
            }
            onAwake() {
                this.node = this.owner, this.img_bar = this.owner.getChildByName("img_bar"), this.img_graybar = this.owner.getChildByName("img_graybar"), this.img_di = this.owner.getChildByName("img_di"), this.img_shield = this.owner.getChildByName("img_shield"), this.barWidth = this.img_bar.width, this.label_lv = this.owner.getChildByName("label_lv"), this.label_lv.visible = !1, this.node.visible = !1, this.autoSkillBarBg = this.owner.getChildByName("autoSkillBarBg"), this.autoSkillBar = this.autoSkillBarBg.getChildByName("autoSkillBar"), this.autoSkillBarBg.visible = !1
            }
            init(e, t = !1, i, s) {
                if (this.data = e, this.data.owner.on(be.Hp_Changed, this, this.onHpChanged), this.updateHealth(), t && (this.label_lv.visible = !0, this.label_lv.value = `LV.${this.data.lv}`, this.img_bar.skin = "res/game/img_healthbar_red.png", this.img_graybar.skin = "res/game/img_healthbar_white.png"), s) switch (s) {
                    case 1:
                        this.img_bar.skin = "res/rank/yellow.png";
                        break;
                    case 2:
                        this.img_bar.skin = "res/rank/blue.png";
                        break;
                    case 3:
                        this.img_bar.skin = "res/rank/pink.png";
                        break;
                    case 4:
                        this.img_bar.skin = "res/rank/orange.png";
                        break;
                    default:
                        this.img_bar.skin = "res/rank/blue.png"
                }
                this.barNode = i
            }
            setLv(e) {
                this.label_lv.value = `LV.${e}`
            }
            onHpChanged() {
                this.updateHealth()
            }
            updateHealth() {
                if (!this.owner || this.owner.destroyed || !this.img_bar) return;
                this.data.curHp < this.data.maxHp && !this.data.isDie && !this.hide && (this.node.visible = !0), this.img_bar.width = this.barWidth * this.data.curHp / this.data.maxHp, Laya.Tween.to(this.img_graybar, {
                    width: this.img_bar.width
                }, 500);
                let e = this.data.owner.parent;
                if (e) {
                    let t = e.numChildren;
                    e.setChildIndex(this.data.owner, t - 1)
                }
            }
            setName(e) {
                this.label_lv.value = e
            }
            setTimer(e) {
                return this.countDown ? this.countDown += e : (this.countDown = e, this.startCountDown()), this.countDown
            }
            onUpdate() {
                if (!this.owner.destroyed && this.countDown > 0) {
                    this.countDown -= fx.Utils.getFrameDelta();
                    let e = Math.floor(this.countDown);
                    this.label_lv.value = e.toString(), this.countDown <= 0 && this.stopCountDown()
                }
            }
            onLateUpdate() {
                this.owner.destroyed || this.data && this.data.owner && !this.data.owner.destroyed && this.barNode && this.syncPos()
            }
            syncPos() {
                let e = new fx.V2(this.data.owner.x, this.data.owner.y + this.barNode.y);
                this.node.pos(e.x, e.y)
            }
            startCountDown() {
                this.oldText = this.label_lv.value;
                this.label_lv.value = this.countDown.toString()
            }
            stopCountDown() {
                this.countDown = 0, this.img_di.visible = this.img_bar.visible = !0, this.label_lv.value = this.oldText
            }
            showBar(e = !1) {
                if (this.owner && !this.owner.destroyed && this.img_bar) {
                    this.node.visible = !0;
                    for (const e of this.node.getChildren()) e.visible = !0;
                    this.label_lv.visible = e, this.updateHealth()
                }
            }
            hideBar() {
                if (this.owner && !this.owner.destroyed && this.img_bar) {
                    this.node.visible = !1;
                    for (const e of this.node.getChildren()) e.visible = !1
                }
            }
            showAutoSkillBar() {
                this.autoSkillBarBg.visible = !0
            }
            updateAutoSkillBar(e) {
                this.autoSkillBar.width = 75 * e
            }
            revertBarColor() {
                this.img_bar.skin = "res/game/img_healthbar.png"
            }
        }
        class XPlayerScript extends Laya.Script {
            constructor() {
                super(...arguments), 
                this.faceDir = 1, 
                this.moveSpeedScale = 1, 
                this.canMove = !0, 
                this.control = !1, 
                this.direction = e.Direction.Left, 
                this.isEscaped = !1, 
                this.isSkinLoaded = !1, 
                this.atkIntervalTs = 0, 
                this.isFirstFind = !0, 
                this.getPathCd = !1
            }
            get node() {
                return this.owner
            }
            init(e) {
                this.data = e
                e.ownerScript = this
                e.owner = this.node, 
                this.diEffect = new Laya.Box, 
                this.diEffect.width = this.diEffect.height = 1, 
                this.node.addChild(this.diEffect), 
                this.skinNode = new Laya.Box, 
                this.skinNode.name = "skinNode", 
                this.skinNode.width = this.skinNode.height = C.GridSize, 
                this.node.addChild(this.skinNode), 
                this.node.on(be.Hp_Changed, this, this.onHpChanged), 
                this.takeMapBuildNode = new Laya.Box, 
                this.takeMapBuildNode.name = "takeMapBuildNode", 
                this.takeMapBuildNode.width = this.takeMapBuildNode.height = C.GridSize, 
                this.node.addChild(this.takeMapBuildNode)
                if (e.isAngel) {
                    let e = new Laya.Image;
                    e.skin = "res/build/specialBuild/fhl.png", e.anchorX = e.anchorY = .5, 
                    this.takeMapBuildNode.addChild(e), e.anchorX = .5, e.anchorY = 0, e.pos(0, 0), e.visible = !1, this.img_angelAddSpeed = e
                }
                this.loadSkin()
                this.onInit()
            }
            onInit() {}
            loadSkin() {
                let i = this.skinCfg = t.cfg.skin.get(this.data.skinId);
                i.skinBedPath && (this.skinBedImg = new Laya.Image(i.skinBedPath), this.skinBedImg.anchorX = .5, 
                this.skinBedImg.anchorY = .75, this.skinBedImg.scale(1, 1), this.skinNode.addChild(this.skinBedImg), 
                this.skinBedImg.y = -15, this.skinBedImg.visible = !1), 
                i.skinPath.includes(".bin") ? (this.skinAniNode = new Laya.Box, this.skinAniNode.name = "aniNode", 
                    this.skinAniNode.width = this.skinAniNode.height = C.GridSize, this.skinAniNode.anchorX = .5, 
                    this.skinAniNode.anchorY = .9, this.skinNode.addChild(this.skinAniNode), 
                    t.assetLoader.createSpine(i.skinPath, t => {
                    this.skinSpine = t, 
                    i.type == e.SkinType.Human ? this.skinSpine.scale(.275, .275) : 
                    i.type == e.SkinType.Hunter ? this.skinSpine.scale(.5, .5) :
                     i.type == e.SkinType.Angel ? this.skinSpine.scale(.275, .275) :
                     i.type == e.SkinType.Fighter ? this.skinSpine.scale(1, 1) : 
                     this.data.isGhost ? (this.skinSpine.scale(.275, .275), this.skinSpine.showSkinByIndex(0)) : this.skinSpine.scale(.5, .5), 10004 == i.id && this.skinSpine.showSkinByName("guaigun"), this.skinAniNode.addChild(t), t.pos(C.GridHalfSize, C.GridSize + 15), this.playAnim("idle"), this.isSkinLoaded = !0
                })) : (this.skinImg = new Laya.Image(i.skinPath), this.skinImg.name = "img_skin", this.skinImg.anchorX = .5, this.skinImg.anchorY = .9, 
                this.skinNode.addChild(this.skinImg), this.playAnim("idle"), this.isSkinLoaded = !0)
            }
            setFace(t) {
                this.faceDir = t, this.data.type == e.PlayerType.E_Defender ? (this.skinNode.scaleX = -t, this.takeMapBuildNode.scaleX = t) : this.data.type == e.PlayerType.E_Hunter && (this.skinCfg.defaultRight ? this.skinNode.scaleX = t : this.skinNode.scaleX = -t)
            }
            idle() {
                this.playAnim("idle")
            }
            playAnim(aniName, reStart_ = !1, i) {
                (reStart_ || this.curAniName != aniName) && 
                (this.skinNode.y = 0, 
                    this.skinAniNode ? this.skinSpine && (this.skinSpine.offAll(Laya.Event.STOPPED), 
                    "idle" == aniName ? (this.curAniName = aniName, this.skinSpine.play("idle", !0)) : 
                    "run" == aniName ? (this.curAniName = aniName, this.skinSpine.play("move", !0)) : 
                    "attack" == aniName && (this.curAniName = aniName, this.skinSpine.on(Laya.Event.STOPPED, this, i),

                     this.skinSpine.play("attack1", !1))) : 
                     "idle" == aniName ? (this.curAniName = aniName, fx.Effect.breathEff(this.skinImg, 1e3, 1.1)) : 
                     "run" == aniName ? (this.curAniName = aniName, fx.Effect.breathEff(this.skinImg, 1e3, 1.1), this.curAniName = aniName) : 
                     "attack" == aniName && (new fx.Sequence).move(0, 20, 200).move(0, -20, 200).run(this.skinNode))
            }
            pos(e, i) {
                this.lastMovePos ? this.lastMovePos.setValue(this.node.x, this.node.y) : this.lastMovePos = new fx.V2(this.node.x, this.node.y), this.node.pos(e, i), this.data.roomId = t.mapMgr.getRoomIdByMapPos(e, i)
            }
            move(i, s, a = !0) {
                if (!this.canMove || this.control) return;
                let n;
                n = a ? t.mapMgr.limitMove(this.node.x, this.node.y, i, s, 16) : t.mapMgr.move(this.node.x, this.node.y, i, s, 16), this.pos(n.x, n.y), i > 0 ? this.setFace(1) : i < 0 && this.setFace(-1), Math.abs(i) > Math.abs(s) ? this.direction = i > 0 ? e.Direction.Right : e.Direction.Left : Math.abs(i) < Math.abs(s) && (this.direction = s > 0 ? e.Direction.Down : e.Direction.Up), this.playAnim("run")
            }
            onHpChanged(i) {
                this.data.curHp <= 0 && i && i.playerUuid == t.playerMgr.mineUuid && t.gameMgr.killCnt++, this.data.isDie && (this.data.type == e.PlayerType.E_Defender && (t.gameMgr.playerDeadCnt += 1), this.onDead())
            }
            onDead() {
                this.data.isDie = !0, this.barNode && (this.barNode.visible = !1), this.healthBarNode && (this.healthBarNode.visible = !1), this.lb_name && (this.lb_name.visible = !1);
                let i = t.user.gameInfo,
                    s = !1;
                if (this.skinNode.visible = !1, this.data.type == e.PlayerType.E_Defender)
                    if (fx.EventCenter.I.event(XEventNames.E_Player_Dead), t.gameMgr.gameMode == e.GameMode.E_Defense)
                        if (this.data.uuid == t.playerMgr.mineUuid) i.failCnt += 1, t.user.gameInfo.mapBuildRate = .5, t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.FailDialog), t.reporter.finishGame(2), s = !0;
                        else {
                            if (XToast.show(`玩家${this.data.name}被淘汰`), t.user.gameInfo.getBuffData(3)) {
                                let e = t.playerMgr.player;
                                if (e.isBed) {
                                    let i = t.buildingMgr.getBuildCfg(1e3, e.bedModel.lv);
                                    if (i && i.effectList && i.effectList[0].value) {
                                        let s = i.effectList[0].value[0];
                                        t.playerMgr.changePlayerIncomeByUuid(e.uuid, 3 * s), XToast.show(`获得队友临别馈赠${3*s}元宝`)
                                    }
                                }
                            }
                            if (this.data.isQxbm) {
                                let e = t.cfg.skin.get(this.data.skinId);
                                this.changeToQxbmGhost(e.skinType)
                            }
                        } else if (t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost) {
                    let i = !0;
                    if (this.data.uuid == t.playerMgr.mineUuid) return this.data.isGhost ? (i = !1, t.reporter.finishGame(2), t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), void t.ui.open(l.AogFailDialog)) : this.data.isAngel ? (t.playerMgr.angels = [], fx.EventCenter.I.event(XEventNames.E_Angel_Dead), t.gameUI.startAngelRevive(), void this.changeToGhost()) : (t.gameUI.hideUpgradeMenu(), t.gameUI.hideBuildMenu(), fx.EventCenter.I.event(XEventNames.E_BuildTips_Hide, [this.data.roomId]), 5 == t.gameMgr.defenseDeadCnt ? (t.ui.closeAll(), i = !1, t.reporter.finishGame(2), t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), void t.ui.open(l.AogFailDialog)) : void t.ui.open(l.AogChooseDialog, {
                        cb: new Laya.Handler(this, this.changeAngelOrGhost)
                    }));
                    t.gameMgr.defenseDeadCnt += 1, 5 == t.gameMgr.defenseDeadCnt ? t.playerMgr.player.isGhost ? (t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.reporter.finishGame(2), t.gameMgr.gameover(!0), t.ui.open(l.AogWinDialog)) : t.playerMgr.player.isAngel ? (t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.reporter.finishGame(2), t.gameMgr.gameover(!1), t.ui.open(l.AogFailDialog)) : this.changeToGhost() : i && this.changeToGhost()
                } else t.gameMgr.gameMode == e.GameMode.E_Hunt ? (t.gameMgr.defenseDeadCnt += 1, 6 == t.gameMgr.defenseDeadCnt && (t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.reporter.finishGame(1), t.gameMgr.gameover(!0), t.ui.open(l.HunterWinDialog))) : t.gameMgr.gameMode == e.GameMode.E_SevenGhost && (this.data.uuid == t.playerMgr.mineUuid ? (t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.SevenGhostFailDialog), t.reporter.finishGame(2), s = !0) : XToast.show(`玩家${this.data.name}被淘汰`));
                else if (this.data.type == e.PlayerType.E_Hunter) {
                    if (fx.EventCenter.I.event(XEventNames.E_Hunter_Dead, this.data), t.gameMgr.gameMode == e.GameMode.E_Defense) {
                        if (this.data.uuid == t.playerMgr.hunters[0].uuid) {
                            i.winCnt += 1, t.user.gameInfo.mapBuildRate = .3;
                            let a = 1;
                            t.gameMgr.killCnt && (a = 2), t.gameMgr.gameover(!0, a), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.WinDialog), t.reporter.finishGame(1, a), s = !0
                        }
                    } else if (t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost) this.data.uuid == t.playerMgr.hunters[0].uuid && (t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.playerMgr.player.isGhost ? (t.gameMgr.gameover(!1), t.ui.open(l.AogFailDialog), t.reporter.finishGame(2)) : (t.gameMgr.gameover(!0), t.ui.open(l.AogWinDialog), t.reporter.finishGame(1)), s = !0), this.data.isGhost && this.data.uuid == t.playerMgr.mineUuid && (t.reporter.finishGame(2), t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.AogFailDialog), s = !0);
                    else if (t.gameMgr.gameMode == e.GameMode.E_Hunt) this.data.uuid == t.playerMgr.mineUuid && (t.reporter.finishGame(2), t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.HunterFailDialog), s = !0);
                    else if (t.gameMgr.gameMode == e.GameMode.E_SevenGhost && this.data.uuid == t.playerMgr.hunters[0].uuid) {
                        let i = 1;
                        t.gameMgr.killCnt && (i = 2), t.gameMgr.gameover(!0, i), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.SevenGhostWinDialog), t.reporter.finishGame(1, i), s = !0
                    }
                    s && (XChoreUtil.stopSound(128), t.user.saveToServer())
                }
            }
            changeAngelOrGhost(e) {
                e ? this.changeToGhost() : this.changeToAngel()
            }
            changeToQxbmGhost(e) {
                let t = new XPlayerModel;
                t.skinId = 2e4 + e, t.uuid = this.data.uuid, t.name = this.data.name, this.ghost(t)
            }
            changeToGhost() {
                let e = new XPlayerModel;
                e.skinId = 90002, this.data.isAngel ? (e.uuid = fx.Utils.createUUID(), e.name = "玩家") : (e.uuid = this.data.uuid, e.name = this.data.name), this.ghost(e)
            }
            ghost(i) {
                i.isGhost = !0;
                let s = t.playerMgr.hunters[0].lv;
                i.lv = s, s > 1 && (s -= 1);
                let a = t.cfg.hunterCfg.hpList[s - 1],
                    n = t.cfg.hunterCfg.attackList[s - 1];
                a *= .8, this.data.lv > 5 ? n *= .8 : n *= .6, i.lv = s, i.maxHp = a, i.curHp = a, i.attackPower = n, i.type = e.PlayerType.E_Hunter, t.playerMgr.addGhost(i)
            }
            changeToAngel() {
                t.playerMgr.addAngel()
            }
            createHealthBar() {
                if (!this.node) return;
                let i = fx.Utils.createPrefab(T.Prefab_HealthBar);
                this.barNode = i;
                let s = new Laya.Box;
                s.anchorX = s.anchorY = .5, this.node.addChild(s), this.healthBarNode = s, t.mapMgr.barLayer.addChild(i), s.y -= 128, this.healthBar = i.addComponent(wt);
                let a = this.data.type != e.PlayerType.E_Defender;
                this.healthBar.init(this.data, a, s), this.healthBar.node.visible = !0;
                let n = i.getChildByName("label_name");
                if (this.data.type == e.PlayerType.E_Defender) {
                    let e = i.getChildren();
                    for (const t of e) t.visible = !1;
                    n.y = -16
                }
                let r = this.data.name;
                if (this.data.uuid == t.playerMgr.mineUuid) {
                    let e = t.user.userInfo;
                    r = e.name, e.name && e.name.length || (r = "玩家")
                }
                n.text = r, this.data.type == e.PlayerType.E_Hunter ? n.visible = !1 : n.visible = !0
            }
            getCurPath() {
                return this.curPath
            }
            setCurPath(e) {
                this.curPath = e
            }
            getDataModel() {
                return this.data
            }
            createBuilding(i) {
                let s = i.split("_"),
                    a = +s[0],
                    n = +s[1],
                    r = t.buildingMgr.getBuildCfg(a, n),
                    o = t.buildingMgr.createBuildingModelByCfg(this.data.uuid, a, this.getOwnerRoomId(), n, 0, 0, 0, r);
                if (o.type == e.BuildType.tower) {
                    let e = this.getRoomModel().doorModel,
                        t = this.getEmptyBlock(new fx.V2(e.x, e.y));
                    if (!t) return;
                    o.x = t.x, o.y = t.y
                } else {
                    let e = this.getEmptyBlock();
                    if (!e) return;
                    o.x = e.x, o.y = e.y
                }
                return o
            }
            createBuildingByGrid(e, t) {
                throw new Error("Method not implemented.")
            }
            hasEnoughCoinEnergy(e, i) {
                let s = i ? e.lv : e.lv + 1,
                    a = t.buildingMgr.getBuildCfg(e.id, s);
                if (a) {
                    let e = this.data;
                    if (e.coin >= a.coin && e.energy >= a.energy) return !0
                }
                return !1
            }
            getMapBuildTarget() {
                return this.curMapBuild
            }
            setMapBuildTarget(e, t = !1) {
                t && (this.forceTarget = e, this.data.curHp < this.data.maxHp) || e != this.curMapBuild && (this.curMapBuild = e, this.curPath = null)
            }
            takeMapBuild(e) {
                if (e && !e.isUsed) return this.takeMapBuildNode.addChild(e.node), e.node.anchorX = .5, e.node.anchorY = .5, "fhl" == e.buildName ? (e.node.anchorY = 0, e.node.pos(0, 0)) : e.node.pos(0, 0), 
                t.buildingMgr.takeMapBuild(e.x, e.y, this.data)
            }
            getTakeMapBuild() {
                return this.data.takeMapBuild
            }
            getCurTarget() {
                return this.curTarget
            }
            getIsFirstFind() {
                return this.isFirstFind
            }
            getLastAtkTarget() {
                return this.lastAtkTarget
            }
            setLastAtkTarget(e) {
                e != this.lastAtkTarget && (this.lastAtkTarget = e)
            }
            setCurTarget(e, t = !1) {
                this.isFirstFind && (this.isFirstFind = !1), t && (this.forceTarget = e, this.data.curHp < this.data.maxHp) || e != this.curTarget && (this.curTarget && (this.lastAtkTarget = this.curTarget), this.curTarget = e, this.curPath = null)
            }
            getTargetPos(e) {
                if (!(e || this.curTarget && this.curTarget.owner)) return;
                let t = e ? e.owner : this.curTarget.owner;
                return t ? new fx.V2(t.x, t.y) : void 0
            }
            getOwnerPos() {
                return new fx.V2(this.node.x, this.node.y)
            }
            getOwnerBed() {
                let t = this.getOwnerAllBuildings();
                for (const i of t)
                    if (i.type == e.BuildType.bed) return i
            }
            getRoomDoor() {
                let e = this.getRoomModel();
                return e && e.doorModel && !e.doorModel.isDie ? e.doorModel : null
            }
            isMaxHp() {
                return this.data.curHp >= this.data.maxHp
            }
            fixDoor(e) {
                e.doorModel.isRepair || t.buildingMgr.repairDoor(e)
            }
            getEmptyBlock(e) {
                let i = t.buildingMgr.getEmptyGrids(this.getOwnerRoomId());
                if (0 == i.length) return;
                if (0 == i.length) return;
                let s = new fx.V2;
                if (e) {
                    let t = 9999999;
                    for (const a of i) {
                        let i = e.distanceSq(a);
                        i < t && (t = i, s.from(a))
                    }
                } else s.from(fx.Utils.randomInArray(i));
                return s
            }
            upgradeBuilding(i) {
                let s = this.hasEnoughCoinEnergy(i);
                return t.buildingMgr.upgrade(this.data.uuid, i.x, i.y, s) == e.BuildResult.E_OK
            }
            attack(e) {}
            runWithPath(t, i) {
                if (0 == t.length) return !0;
                let s = t[0];
                let a = this.getOwnerPos().sub(s).scale(-1),
                    n = a.len();
                if (n <= 1e-6) return t.shift(), this.runWithPath(t); {
                    let t = fx.Utils.getFrameDelta(),
                        s = this.data ? this.data.getSpeedPow() : 1,
                        r = this.moveSpeed * s;
                    this.data.isEntice && (r *= 3), this.data.type == e.PlayerType.E_Hunter ? (a.normalize(Math.min(r * t, n)), 0 != a.x && (a.x *= 2, a.x > 0 ? a.x = Math.min(a.x, n) : a.x = Math.max(a.x, -n))) : a.normalize(Math.min(r * t, n)), this.checkWalkAble(a.x, a.y) ? this.move(a.x, a.y, !i) : this.setCurPath(null)
                }
                return !1
            }
            checkWalkAble(e, i) {
                let s = new fx.V2(this.data.owner.x + e, this.data.owner.y + i),
                    a = t.mapMgr.mapPosToGridPos(s.x, s.y),
                    n = t.mapMgr.getTiledInfo(a.x, a.y);
                return !(!n || null != n.walkable && !n.walkable)
            }
            getPath(e, i, s = !1) {
                if (!this.owner || this.owner.destroyed || this.getPathCd) return;
                let a = t.mapMgr.findPath(e.x, e.y, i.x, i.y, s);
                return a && 0 != a.length || (this.getPathCd = !0, this.owner.timerOnce(2e3, this, () => {
                    this.getPathCd = !1
                })), a
            }
            getAllPlayersRand() {
                let e = [];
                for (const i of t.playerMgr.defenders) e.push(i);
                return e = fx.Utils.randomArrayEx(e)
            }
            getAllAngelsRand() {
                let e = [];
                for (const i of t.playerMgr.angels) e.push(i);
                return e = fx.Utils.randomArrayEx(e)
            }
            getAllRoomIdRand() {
                let e = t.buildingMgr.rooms,
                    i = [];
                for (const t in e) e[t].active && i.push(+t);
                return fx.Utils.randomArray(i)
            }
            getRoomModel(e) {
                return void 0 === e && (e = this.getOwnerRoomId()), t.buildingMgr.getRoom(e)
            }
            targetIsOK(e) {
                return e instanceof XPlayerModel ? !e.isDie : e instanceof XBuildingModel ? !e.isOpen && e.curHp > 0 : !!e && !e.isDie
            }
            getAttackRange() {
                return this.data.stopRange
            }
            getAttackCd() {
                return this.data.getAtkCD()
            }
            switchTarget() {
                return null
            }
            getEscapeTimeRand() {
                return this.data.escapeOdds
            }
            getNearestBuilding() {
                let e = this.getOwnerPos(),
                    i = t.buildingMgr.getNearBuildingByMapPos2(e.x, e.y);
                if (i && !0 !== i.isOpen) return i
            }
            getNearestBuildingByPlayer() {
                return null
            }
            getOwnerRoomId() {
                return this.data.roomId
            }
            isInBed() {
                return this.data.isBed
            }
            hasDead() {
                return this.data.isDie
            }
            isBedUsed(e) {
                return e.isUsed
            }
            gotoBed(i, s) {
                return t.gameMgr.upBed(i, s, this.data.uuid) == e.BuildResult.E_OK
            }
            getBuildingByGridPos(e) {
                return t.buildingMgr.getBuilding(e.x, e.y)
            }
            getOwnerAllBuildings(e) {
                let t = this.data.roomId,
                    i = this.getRoomModel(t);
                if (!i) return [];
                let s = this.data.uuid,
                    a = s.indexOf("_");
                s = s.slice(a + 1);
                let n = [];
                for (const t of i.buildings) !t.playerUuid || t.playerUuid != s && !t.playerUuid.includes(s) || e && t.type != e || n.push(t);
                return n
            }
            isTakeMapBuild() {
                return !!this.data.takeMapBuild
            }
            isTakeMapBuildUsed(e) {
                return e.isUsed
            }
            getDizzyDurSec() {
                return this.data.dizzyDurSec
            }
            findAttackTarget(i = 1) {
                let s = [];
                s = this.type == e.PlayerType.E_Hunter ? t.playerMgr.defenders : t.playerMgr.hunters;
                let a = !1;
                40021 == this.data.skinId && (a = !0);
                let n = t.buildingMgr.getNearBuildingByMapPos(this.node.x, this.node.y, void 0, i, a);
                if (n && !n.isDhls && (40021 == this.data.skinId ? s.push(n) : n.type == e.BuildType.door && n.isOpen || s.push(n)), 0 == s.length) return null;
                let r = null,
                    o = this.data.attackRange;
                i > 1 && (o += i * C.GridSize);
                for (let e = 0; e < s.length; ++e) {
                    if (s[e].isDie || !s[e].owner || s[e].owner.destroyed) continue;
                    let t = XV2Util01.pDistance(this.node, s[e].owner);
                    t < o && (o = t, r = s[e])
                }
                return r
            }
            dismissDizzy() {
                throw new Error("Method not implemented.")
            }
            getDizzyStartTime() {
                return this.data.dizzyStartTime || 0
            }
            isEscapeHp() {
                return this.data.hpPercent <= .3
            }
            getHpPercent() {
                return this.data.hpPercent
            }
            getRandomHealZonePos() {
                let e = t.mapMgr.healZones;
                if (!e || 0 == e.length) return;
                let i = new fx.V2,
                    s = new fx.V2,
                    a = fx.Utils.randomInArray(e);
                return i.setValue(a.x + .5 * a.width, a.y + .5 * a.height), s.from(i), s
            }
            targetIsOKNew(e) {
                return e instanceof XPlayerModel ? !e.isDie : e instanceof XBuildingModel ? !e.isOpen : !e.isDie
            }
            getOwnerGridPos() {
                let e = this.getOwnerPos(),
                    i = new Laya.Point(e.x, e.y);
                this.owner.parent.localToGlobal(i);
                let s = t.mapMgr.stagePosToGridPos(i.x, i.y);
                return e.setValue(s.x, s.y), e
            }
            breakAway() {
                this.curPath && (this.curPath = []);
                let e = this.getOwnerGridPos(),
                    i = t.buildingMgr.getOutdoorEmptyGrids(e.x, e.y, 2);
                e = fx.Utils.randomInArray(i), e = t.mapMgr.gridPosToMapPos(e.x, e.y), this.node.x = e.x, this.node.y = e.y
            }
            performSkill(e) {}
            targetIsDoor() {
                let t = this.curTarget;
                return !!t && (t instanceof XBuildingModel && t.type == e.BuildType.door)
            }
            isEscape() {
                return this.isEscaped
            }
            setEscape(e) {
                this.isEscaped = e
            }
            changeSkin(e) {
                if (e)
                    for (let e = this.data.skillIdArr.length - 1; e >= 0; e--) {
                        let t = !1;
                        switch (this.data.skillIdArr[e]) {
                            case 8:
                                this.skinSpine.showSkinByName("maozi"), t = !0;
                                break;
                            case 13:
                                this.skinSpine.showSkinByName("guancai"), t = !0;
                                break;
                            case 14:
                                this.skinSpine.showSkinByName("fanwan"), t = !0
                        }
                        if (t) return
                    } else {
                        if (this.data.skillEquipHp) return void(this.data.skillIdArr.includes(8) ? this.skinSpine.showSkinByName("maozi") : this.data.skillIdArr.includes(13) && this.skinSpine.showSkinByName("guancai"));
                        if (!this.data.skillIsUsed && this.data.skillIdArr.includes(14)) return void this.skinSpine.showSkinByName("fanwan");
                        10004 == this.data.skinId ? this.skinSpine.showSkinByName("guaigun") : this.skinSpine.showSkinByIndex(0)
                    }
            }
            setStartAtkTime(e) {
                this.startAtkTime = e
            }
            tryAttack() {
                let i = this.findAttackTarget();
                if (!i) return void(this.lastTarget = null);
                let s = this.getAttackCd(),
                    a = t.gameTime.now;
                if (this.data.isRage && (this.atkRageStartTs = a), this.getLastAtkTarget() || (this.setLastAtkTarget(i), this.atkRageStartTs = a, this.canDizzySkill = !0), this.lastTarget && this.lastTarget.owner == i.owner || (this.atkRageStartTs = a, this.lastTarget = i, this.canDizzySkill = !0, this.setStartAtkTime(a)), a - this.atkIntervalTs >= 1e3 * s) {
                    if (t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                        if (a - this.atkRageStartTs > 2e4) {
                            fx.EventCenter.I.event(XEventNames.E_Rage_Refresh);
                            let e = XRandomUtil.getIntRandom(1, 3);
                            e = Math.min(15, e + this.data.lv), XRandomUtil.random() <= .3 && t.buildingMgr.addMapEquip(e, !1), this.atkRageStartTs = a
                        }
                        if (i.type == e.BuildType.door && !i.isOpen && i.curHp <= .2 * i.maxHp) {
                            XRandomUtil.random() <= .3 && fx.EventCenter.I.event(XEventNames.E_Dizzy_Refresh)
                        }
                    } else if (a - this.atkRageStartTs > 2e4) this.data.isGhost && (this.performSkill("rage"), this.atkRageStartTs = a);
                    else if (this.canDizzySkill && i.type == e.BuildType.door && !i.isOpen && i.curHp <= .2 * i.maxHp) {
                        XRandomUtil.random() <= .3 && (this.performSkill("dizzy"), this.canDizzySkill = !1)
                    }
                    this.attack(i), this.atkIntervalTs = a
                }
            }
            startAddSpeed() {
                this.img_angelAddSpeed.visible = !0, this.moveSpeed = 3 * t.cfg.constant.playerMoveSpeed * .87, this.moveSpeed /= t.gameMgr.speedRatio, this.owner.timerOnce(5e3, this, this.closeAddSpeed)
            }
            closeAddSpeed() {
                this.img_angelAddSpeed.visible = !1, this.moveSpeed = t.cfg.constant.playerMoveSpeed, this.moveSpeed /= t.gameMgr.speedRatio
            }
            useDizzy() {
                let e = t.playerMgr.hunters[0];
                if (e && !e.isDie) {
                    if (Math.abs(this.data.owner.x - e.owner.x) > 300 || Math.abs(this.data.owner.y - e.owner.y) > 300) return !1;
                    let i = new Laya.Animation;
                    return i.source = "res/atlas/res/Ani/zhua.atlas", EffectUtil.I.playAnim(i, e.owner.x - C.GridHalfSize, e.owner.y - C.GridHalfSize, !1), t.gameMgr.DizzyTarget(e, 2), !0
                }
                return !1
            }
        }
        class XDefenderScript extends XPlayerScript {
            constructor() {
                super(...arguments), this.type = e.PlayerType.E_Defender
            }
            onAwake() {
                super.onAwake(), this.moveSpeed = t.cfg.constant.playerMoveSpeed
            }
            onInit() {
                this.lb_name = new Laya.Label, this.lb_name.anchorX = .5, this.lb_name.anchorY = 1, this.lb_name.y = -100, this.lb_name.fontSize = 25, this.lb_name.color = "#ffffff", this.lb_name.stroke = 3, this.node.addChild(this.lb_name);
                let i = t.user.gameInfo.maxLevel,
                    s = 1;
                this.data.uuid != t.playerMgr.mineUuid ? (this.initAI(), t.gameMgr.gameMode == e.GameMode.E_Defense ? s = 1.1 : t.gameMgr.gameMode == e.GameMode.E_Hunt ? (i = XRandomUtil.getIntRandom(t.gameMgr.dCfg.lvlFloor - 1, t.gameMgr.dCfg.lvlCeil) + t.gameMgr.dCfg.id, i = Math.min(26, i)) : i = this.getRandomLv()) : t.gameMgr.gameMode == e.GameMode.E_Defense && (s = 1.5), this.data.uuid == t.playerMgr.mineUuid && (this.moveSpeed /= t.gameMgr.speedRatio), this.moveSpeed *= s;
                let a = t.cfg.difficultCfg.get(i);
                this.lb_name.text = a.title, this.lb_name.color = a.titleColor
            }
            getRandomLv() {
                let arr = [28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3]
                let sum = 0;
                for (const num of arr) sum += num;
                let randNum = XRandomUtil.getIntRandom(0, sum)
                let a = 1;
                for (const num of arr) {
                    if (randNum <= num) break;
                    randNum -= num, a += 1
                }
                return a > t.cfg.difficultCfg.length && (a = t.cfg.difficultCfg.length), a
            }
            initAI() {
                t.cfg.constant.repairTime;
                this.ai = new _t(this);
                let e = yt([this.ai.notInBed(this.ai.findMapBuild(this.ai.run("run", !0))), this.ai.notInBed(this.ai.takeMapBuild()), this.ai.notInBed(this.ai.findBed(this.ai.run("run", !0))), this.ai.notInBed(this.ai.gotoBed()), this.ai.upOrBuild(), this.ai.idle("idle")]);
                this.ai.load(e)
            }
            upBed(e) {
                let i = t.mapMgr.gridPosToMapPos(e.x, e.y);
                this.pos(i.x, i.y), this.lb_name.visible = !1, this.skinBedImg ? (this.skinBedImg.visible = !0, this.skinSpine ? this.skinSpine.visible = !1 : this.skinImg && (this.skinImg.visible = !1)) : this.playAnim("idle"), this.takeMapBuildNode.visible = !1
            }
            downBed() {
                this.skinBedImg ? (this.skinBedImg.visible = !1, this.skinSpine ? this.skinSpine.visible = !0 : this.skinImg && (this.skinImg.visible = !0)) : this.playAnim("run")
            }
            onUpdate() {
                this.isSkinLoaded && (t.gameMgr.isPause || this.data.isDie || (this.data.isBed || (this.node.zOrder = this.node.y), this.ai && this.ai.exec()))
            }
        }
        e.RewardType = void 0, (xe = e.RewardType || (e.RewardType = {})).Coin = "Coin", xe.Build = "Build", xe.Skin = "Skin";
        class vt extends fx.BaseData {}
        e.SkinUnlockWay = void 0, (Be = e.SkinUnlockWay || (e.SkinUnlockWay = {}))[Be.VIDEO = 1] = "VIDEO", Be[Be.FRAGMENT = 2] = "FRAGMENT", Be[Be.INITIAL = 999] = "INITIAL";
        class XMapCfg extends fx.BaseData {}
        class xt extends fx.BaseData {}
        e.BulletType = void 0, (Te = e.BulletType || (e.BulletType = {})).Follow = "Follow", Te.Normal = "Normal";
        class Bt extends fx.BaseData {}
        class Tt extends fx.BaseData {}
        class Et extends fx.BaseData {}
        class Lt extends fx.BaseData {}
        class Dt extends fx.BaseData {}
        class At extends fx.BaseData {}
        class Pt extends fx.BaseData {}
        class Nt extends fx.BaseData {}
        class Ut extends fx.BaseData {}
        class Gt extends fx.BaseData {}
        class InviteCfg extends fx.BaseData {}
        class Ht extends fx.BaseData {}
        class XBaseBuff {
            constructor(e) {
                this.val = 0, this.val = e
            }
            get Type() {
                return this.type
            }
            get Val() {
                return this.val
            }
            set Val(e) {
                this.val = e
            }
            result(e) {
                return this.Val * e
            }
        }
        class Vt extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.SPEED
            }
            result(e) {
                return this.Val
            }
        }
        class Ft extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ATK_POW
            }
        }
        class zt extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ATK_SPD
            }
        }
        class qt extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ATK_DST
            }
        }
        class Wt extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.DYC_ATK_SPD, this.val = 0
            }
            get Val() {
                return this.val
            }
            set Val(e) {
                this.val = e
            }
        }! function(e) {
            e[e.ATK_POW = 1] = "ATK_POW", e[e.ATK_SPD = 2] = "ATK_SPD", e[e.ATK_DST = 3] = "ATK_DST", e[e.ATK_SPLIT = 4] = "ATK_SPLIT", e[e.DYC_ATK_SPD = 5] = "DYC_ATK_SPD", e[e.INCOME_DOWN = 6] = "INCOME_DOWN", e[e.ENERGY_RATIO = 7] = "ENERGY_RATIO", e[e.FIGHT_BACK = 8] = "FIGHT_BACK", e[e.SPEED_POW = 9] = "SPEED_POW", e[e.DEF_ROI = 10] = "DEF_ROI", e[e.DOOR_HP_INCREASE = 11] = "DOOR_HP_INCREASE", e[e.SPEED = 12] = "SPEED"
        }(Ee || (Ee = {}));
        class Kt {
            static init() {
                this.effectMap = {
                    [e.EffectType.Add_Coin]: Xt, [e.EffectType.Add_Energy]: EnergyEffect, [e.EffectType.Add_CoinAndEnergy]: jt, [e.EffectType.Door_AlwaysAddHp]: Jt, [e.EffectType.Enemy_UseSkillBeDizzy]: EnemyUseSkillBeDizzy, [e.EffectType.Door_NotGetDmgOnHpLow]: Qt, [e.EffectType.Tower_GetCoinOnAtk]: ei, [e.EffectType.Tower_GetCoinOnAtk_1]: ti, [e.EffectType.Enemy_SlowAtkSpd]: EnemySlowAtkSpd, [e.EffectType.Enemy_EscapeBeDizzy]: EnemyEscapeBeDizzy, [e.EffectType.Door_FightBackOnBeAtk]: ai, [e.EffectType.Enemy_OnHpLowBeAtk]: EnemyOnHpLowBeAtk, [e.EffectType.Tower_AddAtkDst]: oi, [e.EffectType.Tower_AddAtkSpd]: XTowerAddAtkSpd, [e.EffectType.Tower_AddAtkSpdOnEnemyNear]: hi, [e.EffectType.Door_GetCoinOnHurt]: di, [e.EffectType.Eat_Mosquito]: XEatMosquito, [e.EffectType.Door_EnemyBeDizzy]: gi, [e.EffectType.Door_EnemyBeEscape]: ci, [e.EffectType.Enemy_EscapeBeSlowdown]: EnemyEscapeBeSlowdown, [e.EffectType.Enemy_HpRateBeDizzy]: EnemyHpRateBeDizzy
                }
            }
            static createEffect(e, t) {
                this.effectMap || this.init();
                let i = this.effectMap[e.type];
                return i && t ? new i(e, t) : null
            }
        }
        class XBaseEffect {
            constructor(e, t) {
                e && (this.type = e.type, this.cfg = e), t && (this.data = t, this.node = t.owner)
            }
            clear() {}
            getCurDoorModel() {
                let i = [],
                    s = t.buildingMgr.getRoom(this.data.roomId);
                if (s) {
                    for (const t of s.buildings)
                        if (t.type == e.BuildType.door) {
                            i.push(t);
                            break
                        }
                    return i
                }
            }
            getBuildingHpLowest() {
                let e = t.playerMgr.getPlayer(this.data.playerUuid);
                if (e) {
                    let t, i, s = e.buildings;
                    for (const e of s) {
                        if (!e.owner || e.isDie) continue;
                        if (e.curHp <= 0) continue;
                        if (8006 == e.id) continue;
                        let s = e.curHp / e.maxHp;
                        t || (t = s, i = e), s < t && (t = s, i = e)
                    }
                    return i
                }
            }
            getPlayerInsideGrids(e) {}
            playerWorkEff() {}
            showWorkEff() {
                let e = this.data.ownerScript;
                e && e.onWork()
            }
        }
        class Xt extends XBaseEffect {
            constructor(i, s, a = !0) {
                super(i, s), this.deltaX = 0, this.deltaY = 0, this.extra = 0, this.godExtra = 0, this.addValue = this.cfg.value[0];
                let n = 1e3,
                    r = s;
                if (5001 == r.id) this.data.playerUuid == t.playerMgr.mineUuid && t.user.gameInfo.getBuffData(13) && (this.extra = 1);
                else if (1e3 == r.id) {
                    let i = t.buildingMgr.getBuildCfg(r.id, r.lv);
                    if (t.gameMgr.gameMode == e.GameMode.E_Defense && i.buffId && this.data.playerUuid == t.playerMgr.mineUuid) {
                        if (t.user.gameInfo.getBuffData(22)) {
                            let e = t.user.gameInfo.getBuffData(22);
                            n = n * (100 - t.cfg.buffCfg.get(22).values[e.lv]) / 100
                        }
                        t.user.gameInfo.getBuffData(11) && (this.extra = 1)
                    }
                }
                this.node.timerLoop(n, this, this.exec)
            }
            exec() {
                if (this.data.palsyTime) return;
                let i = this.addValue;
                this.canDouble && this.data.playerUuid == t.playerMgr.mineUuid && (i *= 2);
                let s = i * this.data.coinRatio,
                    a = s * t.mapMgr.getRoomById(this.data.roomId).aiMult,
                    n = t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, a + this.extra + this.godExtra),
                    r = this.data;
                n ? t.gameUI.valueTips(e.TokenType.E_Coin, s, this.node.x + this.deltaX, this.node.y + this.deltaY, this.extra + this.godExtra) : r.type && r.type == e.BuildType.bed || t.gameUI.valueTips(e.TokenType.E_Coin, s, this.node.x + this.deltaX, this.node.y + this.deltaY, this.extra + this.godExtra), this.showWorkEff()
            }
            clear() {
                this.node.timer.clear(this, this.exec)
            }
        }
        class EnergyEffect extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.addValue = this.cfg.value[0];
                let i = this.cfg.value[1] ? this.cfg.value[1] : 1;
                this.node.timerLoop(1e3 * i, this, this.exec)
            }
            exec() {
                if (this.data.palsyTime) return;
                let i = this.addValue;
                t.playerMgr.getPlayer(this.data.playerUuid) && (i = Math.floor(i * this.data.energyRatio));
                let s = i * t.mapMgr.getRoomById(this.data.roomId).aiMult,
                    a = t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, 0, s),
                    n = this.data;
                a ? t.gameUI.valueTips(e.TokenType.E_Energy, i, this.node.x, this.node.y) : n.type && n.type == e.BuildType.bed || t.gameUI.valueTips(e.TokenType.E_Energy, i, this.node.x, this.node.y), this.showWorkEff()
            }
            clear() {
                this.node.timer.clear(this, this.exec)
            }
        }
        class jt extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.addCoinValue = this.cfg.value[0], this.addEnergyValue = this.cfg.value[1];
                let i = this.cfg.value[2] ? this.cfg.value[2] : 1;
                this.node.timerLoop(1e3 * i, this, this.exec)
            }
            exec() {
                if (this.data.palsyTime) return;
                let i = this.addCoinValue,
                    s = this.addEnergyValue,
                    a = t.playerMgr.getPlayer(this.data.playerUuid);
                a && (i = Math.floor(i * this.data.coinRatio)), a && (s = Math.floor(s * this.data.energyRatio));
                let n = t.mapMgr.getRoomById(this.data.roomId),
                    r = i * n.aiMult,
                    o = s * n.aiMult,
                    l = t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, r, o);
                this.data;
                l && (t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y - 20), t.gameUI.valueTips(e.TokenType.E_Energy, s, this.node.x, this.node.y + 20)), this.showWorkEff()
            }
            clear() {
                this.node.timer.clear(this, this.exec)
            }
        }
        class Jt extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.addValue = this.cfg.value[0], this.node.timerLoop(1e3, this, this.exec)
            }
            exec() {
                let i = this.addValue,
                    s = this.data,
                    a = t.buildingMgr.getBuildCfg(s.id, s.lv);
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && 6001 == s.id && a.buffId && a.buffId.includes(15) && t.user.gameInfo.getBuffData(15)) {
                    i *= 1 + t.cfg.buffCfg.get(15).values[0] / 100
                }
                let n = this.getCurDoorModel();
                if (n)
                    for (let e = 0; e < n.length; e++) {
                        let s = n[e];
                        s.curHp != s.maxHp ? (t.gameMgr.AddHp(s, i), t.gameMgr.playSound(s, 119), s.ownerScript.showRepairEff()) : s.ownerScript.hideRepairEff()
                    }
            }
            clear() {
                let e = this.getCurDoorModel();
                if (e)
                    for (let t = 0; t < e.length; t++) {
                        e[t].ownerScript.hideRepairEff()
                    }
                this.node.timer.clear(this, this.exec)
            }
        }
        class EnemyUseSkillBeDizzy extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.rate = e.value[0], this.time = e.value[1], fx.EventCenter.I.on(XEventNames.E_Hunter_Use_Skill, this, this.exec)
            }
            exec(e, i) {
                if (this.data.palsyTime) return;
                if (e != this.data.roomId || Math.random() > this.rate || !i) return;
                let s = this.time;
                t.user.gameInfo.getBuffData(4) && this.data.playerUuid == t.playerMgr.mineUuid && (s *= 1.5), t.gameMgr.DizzyTarget(i, s, !1);
                let a = "res/atlas/res/Ani/xuanyun.atlas";
                if (Laya.loader.getRes(a)) {
                    let e = EffectUtil.I.loadAnimAndPlayReturn(a, i.owner.x - 20, i.owner.y - 100, !0);
                    e.timer.once(1e3 * s, this, () => {
                        e.destroy()
                    })
                } else Laya.loader.load(a, Laya.Handler.create(this, () => {
                    if (t.mapMgr.effectLayer.destroyed) return;
                    let e = EffectUtil.I.loadAnimAndPlayReturn(a, i.owner.x - 20, i.owner.y - 100, !0);
                    e.timer.once(1e3 * s, this, () => {
                        e.destroy()
                    })
                }));
                this.playerWorkEff()
            }
            clear() {
                fx.EventCenter.I.off(XEventNames.E_Hunter_Use_Skill, this, this.exec)
            }
        }
        class Qt extends XBaseEffect {
            constructor(i, s) {
                super(i, s), this.threshold = i.value[0], this.time = i.value[1];
                let a = s,
                    n = t.buildingMgr.getBuildCfg(a.id, a.lv);
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && n.buffId && n.buffId.includes(7) && t.user.gameInfo.getBuffData(7)) {
                    let e = t.cfg.buffCfg.get(7);
                    this.time += e.values[0]
                }
                let r = this.getCurDoorModel()[0];
                r && r.owner.on(be.Battle_Be_Hit, this, this.exec, [r])
            }
            exec(e) {
                let t = e.owner.getChildAt(0),
                    i = t.getChildByName("energuhoodImg");
                if (!i) {
                    let e = t.getChildAt(0),
                        i = new Laya.Image("res/map/energuhoodImg.png");
                    i.name = "energuhoodImg", i.width = 1.4 * e.width, i.height = 1.4 * e.height, i.anchorX = .5, i.anchorY = .5, i.visible = !1, t.addChild(i)
                }
                e.invincible ? i && (i.visible = !0) : (this.isUsed && e.owner.timer.once(5e3, this, this.updateUsed), e.curHp / e.maxHp > this.threshold ? i && (i.visible = !1) : this.isUsed || (i && (i.visible = !0), e.invincible = !0, e.owner.timerOnce(1e3 * this.time, e.owner, () => {
                    e.invincible = !1, i && (i.visible = !1)
                }), this.playerWorkEff(), this.isUsed = !0))
            }
            updateUsed() {
                this.isUsed = !1
            }
            clear() {
                let e = this.getCurDoorModel();
                for (const t of e) {
                    if (!t || !t.owner || t.owner.destroyed) return;
                    let e = t.owner.getChildAt(0).getChildByName("energuhoodImg");
                    e && (e.visible = !1), t.owner.off(be.Hp_Changed, this, this.exec)
                }
            }
        }
        class ei extends XBaseEffect {
            constructor(i, s) {
                super(i, s), this.curCnt = 0, this.buffMult = 1, this.bonusRate = i.value[0], this.node.timerLoop(1e3, this, this.exec);
                let a = t.buildingMgr.getBuildCfg(this.data.id);
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && a.buffId && a.buffId.includes(14) && t.user.gameInfo.getBuffData(14)) {
                    let e = t.cfg.buffCfg.get(14);
                    this.buffMult = 1 + e.values[0] / 100
                }
                let n = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0];
                n && n.owner.on(be.Tower_Be_fire, this, this.addCoin)
            }
            addCoin(e) {
                if (this.data.palsyTime) return;
                let i = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0],
                    s = t.buildingMgr.getBuildCfg(i.id, i.lv).effectList[0].value[0],
                    a = Math.ceil(s / 200 * e * this.buffMult);
                this.curCnt += a
            }
            exec() {
                if (this.data.palsyTime) return;
                if (!this.curCnt) return;
                let i = this.bonusRate * this.data.coinRatio * this.curCnt;
                this.curCnt = 0, i && t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, i) && (t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y), this.showWorkEff())
            }
            clear() {
                this.node.clearTimer(this, this.exec);
                let e = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0];
                e && e.owner.off(be.Tower_Be_fire, this, this.addCoin)
            }
        }
        class ti extends XBaseEffect {
            constructor(e, i) {
                super(e, i), this.curCnt = 0, this.bonusRate = e.value[0], this.node.timerLoop(1e3, this, this.exec);
                let s = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0];
                s && s.owner.on(be.Tower_Be_fire, this, this.addCoin)
            }
            addCoin(e) {
                if (this.data.palsyTime) return;
                let i = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0],
                    s = t.buildingMgr.getBuildCfg(i.id, i.lv).effectList[0].value[0],
                    a = Math.ceil(s / 200 * e);
                this.curCnt += a
            }
            exec() {
                if (this.data.palsyTime) return;
                if (!this.curCnt) return;
                let i = this.bonusRate * this.data.coinRatio * this.curCnt;
                this.curCnt = 0, i && t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, i) && (t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y), this.showWorkEff())
            }
            clear() {
                this.node.clearTimer(this, this.exec);
                let e = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0];
                e && e.owner.off(be.Tower_Be_fire, this, this.addCoin)
            }
        }
        class EnemySlowAtkSpd extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.map = new Map, this.slowMult = 1, this.slowRatio = e.value[0];
                let i = this.getCurDoorModel()[0];
                i && (i.owner.on(be.Battle_Be_Hit, this, this.exec), fx.EventCenter.I.on(XEventNames.E_HUNTER_ESCAPE, this, this.onHunterEscape), fx.EventCenter.I.on(XEventNames.E_HUNTER_LEAVE, this, this.onHunterEscape), this.data.owner.timerLoop(100, this, this.onHunterEscape))
            }
            exec(e, i) {
                let s;
                if (this.getCurDoorModel()[0]) {
                    if (this.map.has(e)) {
                        this.data.playerUuid == t.playerMgr.player.uuid && t.user.gameInfo.getBuffData(5) && (this.slowMult = 1.5), s = new zt(this.slowRatio * this.slowMult);
                        for (const [i, a] of this.map) {
                            if (!e.buffs) continue;
                            let i = !0;
                            for (let t = 0; t < e.buffs.length; t++)
                                if (e.buffs[t].Type == s.Type && e.buffs[t].Val == s.Val) {
                                    i = !1;
                                    break
                                }
                            i && (t.buffMgr.addBuff(e, s), this.playerWorkEff())
                        }
                    }
                    this.map.set(e, s)
                }
            }
            clear() {
                this.data.owner.timer.clear(this, this.onHunterEscape), fx.EventCenter.I.off(XEventNames.E_HUNTER_ESCAPE, this, this.onHunterEscape), fx.EventCenter.I.off(XEventNames.E_HUNTER_LEAVE, this, this.onHunterEscape);
                let e = this.getCurDoorModel();
                for (const i of e) {
                    if (!i) return;
                    i.owner.off(be.Battle_Be_Hit, this, this.exec);
                    for (const [e, i] of this.map) {
                        let s = e.owner.getChildByName("skinNode");
                        s && (s.filters = []), t.buffMgr.removeBuff(e, i)
                    }
                    this.map.clear()
                }
            }
            onHunterEscape(e) {
                if (this.data.palsyTime) return;
                let i = this.getCurDoorModel();
                if (0 != i.length)
                    for (const s of i) {
                        if (!s) return;
                        if (e) {
                            for (const [i, s] of this.map)
                                if (i == e) {
                                    let e = i.owner.getChildByName("skinNode");
                                    e && (e.filters = []), t.buffMgr.removeBuff(i, s);
                                    break
                                }
                        } else
                            for (const [e, i] of this.map) {
                                let a = Math.abs(s.owner.x - e.owner.x),
                                    n = Math.abs(s.owner.y - e.owner.y);
                                if (a > 2 * C.GridSize && n > 2 * C.GridSize) break;
                                if (a > C.GridSize || n > C.GridSize) {
                                    let s = e.owner.getChildByName("skinNode");
                                    s && (s.filters = []), t.buffMgr.removeBuff(e, i);
                                    break
                                }
                            }
                    } else {
                        for (const [e, t] of this.map) {
                            let t = e.owner.getChildByName("skinNode");
                            t && (t.filters = []);
                            let i = new zt(this.slowRatio * this.slowMult);
                            if (!e.buffs) continue;
                            let s, a = !0;
                            for (s = 0; s < e.buffs.length; s++)
                                if (e.buffs[s].Type == i.Type && e.buffs[s].Val == i.Val) {
                                    a = !1;
                                    break
                                }
                            a || e.buffs.splice(s, 1)
                        }
                        this.clear()
                    }
            }
        }
        class EnemyEscapeBeDizzy extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.hunters = [], this.dizzyTime = e.value[0], this.data.owner.timerLoop(100, this, this.exec);
                let i = this.getCurDoorModel();
                if (i[0])
                    for (const e of i) e.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            exec() {
                if (this.data.palsyTime) return;
                let i = this.dizzyTime;
                t.user.gameInfo.getBuffData(8) && this.data.playerUuid == t.playerMgr.mineUuid && (i += 1);
                let s = this.getCurDoorModel();
                if (!s[0]) return;
                let a = [];
                for (const n of s) {
                    for (const s of this.hunters)
                        if (Math.abs(n.owner.x - s.owner.x) > 150 || Math.abs(n.owner.y - s.owner.y) > 150)
                            if (s.ownerScript.isEscape() || t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                                let e = new Laya.Animation;
                                e.source = "res/atlas/res/Ani/zhua.atlas", EffectUtil.I.playAnim(e, s.owner.x - C.GridHalfSize, s.owner.y - C.GridHalfSize, !1), t.gameMgr.DizzyTarget(s, i), a.push(s)
                            } else {
                                let e = this.hunters.indexOf(s);
                                e >= 0 && this.hunters.splice(e, 1)
                            }
                    if (a.length) {
                        for (; a.length;) {
                            let e = a.pop(),
                                t = this.hunters.findIndex(t => e == t); - 1 != t && this.hunters.splice(t, 1)
                        }
                        this.playerWorkEff()
                    }
                }
            }
            clear() {
                this.data.owner.timer.clear(this, this.exec);
                let e = this.getCurDoorModel();
                if (e[0])
                    for (const t of e) t.owner.off(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            onDoorBeHit(e, t) {
                this.hunters.includes(e) || this.hunters.push(e)
            }
        }
        class ai extends XBaseEffect {
            constructor(i, s) {
                super(i, s), this.reboundDmgRatio = 0, this.mult = 1, this.reboundDmgRatio = this.cfg.value[0];
                let a = this.getCurDoorModel()[0];
                if (!a) return;
                let n = t.buildingMgr.getBuildCfg(this.data.id);
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && n.buffId && n.buffId.includes(16) && t.user.gameInfo.getBuffData(16)) {
                    let e = t.cfg.buffCfg.get(16);
                    this.mult = 1 + e.values[0] / 100
                }
                this.create(a), a.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            clear() {
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            create(e) {
                let t = e.owner.getChildAt(0).getChildByName("thorn");
                t && (t.visible = !0)
            }
            onDoorBeHit(e) {
                let i = e.maxHp * this.reboundDmgRatio * this.mult;
                t.gameMgr.takeDamage(e, e, i), this.playerWorkEff()
            }
        }
        class EnemyOnHpLowBeAtk extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.canUse = !0, this.threshold = this.cfg.value[0], this.dmgPer = this.cfg.value[1];
                let i = this.getCurDoorModel();
                if (this.door = i[0], this.data.owner.timerLoop(100, this, this.exec), i[0])
                    for (const e of i) e.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            onDoorBeHit(e) {
                this.hunter || e != t.playerMgr.hunters[0] || (this.hunter = e)
            }
            exec() {
                if (this.data.palsyTime) return;
                let e = this.hunter;
                if (!e || !e.owner) return;
                if (!this.door || !this.door.owner) return;
                if (!(Math.abs(this.door.owner.x - e.owner.x) < 2 * C.GridSize && Math.abs(this.door.owner.y - e.owner.y) < 2 * C.GridSize)) return this.hunter = null, void(this.canUse = !0);
                if (!this.canUse) return;
                if (e.curHp / e.maxHp > this.threshold) return;
                this.canUse = !1;
                let i = e.maxHp * this.dmgPer;
                this.data.playerUuid == t.playerMgr.player.uuid && t.user.gameInfo.getBuffData(19) && (i *= 1.5), t.gameMgr.takeDamage(null, e, i);
                let s = "res/atlas/res/Ani/chujue.atlas";
                Laya.loader.getRes(s) ? EffectUtil.I.loadAnimAndPlayReturn(s, e.owner.x - 20, e.owner.y - 30, !1) : Laya.loader.load(s, Laya.Handler.create(this, () => {
                    t.mapMgr.effectLayer.destroyed || EffectUtil.I.loadAnimAndPlayReturn(s, e.owner.x - 20, e.owner.y - 30, !1)
                })), this.clear(), this.playerWorkEff()
            }
            clear() {
                this.data.owner.timer.callLater(this, this.exec);
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.exec)
            }
        }
        class XTowerBuffEffect extends XBaseEffect {
            constructor(i, s) {
                super(i, s), this.map = new Map, this.changeVal = this.cfg.value[0];
                let a = t.buildingMgr.getRoom(this.data.roomId);
                for (const t of a.buildings) t.type == e.BuildType.tower && this.addBuff(t);
                fx.EventCenter.I.on(XEventNames.E_BUILDING_BUILD, this, this.onBuildingBuild), 
                fx.EventCenter.I.on(XEventNames.E_BUILDING_REMOVED, this, this.onBuildingRemove)
            }
            createBuff() {
                return null
            }
            addBuff(e) {
                let i = this.createBuff();
                i && (t.buffMgr.addBuff(e, i), this.map.set(e, i))
            }
            removeBuff(e) {
                let i = this.map.get(e);
                t.buffMgr.removeBuff(e, i), this.map.delete(e)
            }
            onBuildingBuild(t) {
                t.roomId == this.data.roomId && t.type == e.BuildType.tower && this.addBuff(t)
            }
            onBuildingRemove(t) {
                t.roomId == this.data.roomId && t.type == e.BuildType.tower && this.removeBuff(t)
            }
            clear() {
                fx.EventCenter.I.off(XEventNames.E_BUILDING_BUILD, this, this.onBuildingBuild), 
                fx.EventCenter.I.off(XEventNames.E_BUILDING_REMOVED, this, this.onBuildingRemove);
                let i = t.buildingMgr.getRoom(this.data.roomId);
                for (const t of i.buildings) t.type == e.BuildType.tower && this.removeBuff(t)
            }
        }
        class oi extends XTowerBuffEffect {
            createBuff() {
                let i = this.changeVal,
                    s = t.buildingMgr.getBuildCfg(this.data.id);
                return t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && this.data.playerUuid == t.playerMgr.player.uuid && t.user.gameInfo.getBuffData(s.buffId[0]) && (i *= 2), new qt(i)
            }
        }
        class XTowerAddAtkSpd extends XTowerBuffEffect {
            createBuff() {
                let i = t.buildingMgr.getBuildCfg(this.data.id);
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && i.buffId && i.buffId.includes(17) && t.user.gameInfo.getBuffData(17)) {
                    let e = t.cfg.buffCfg.get(17).values[0] / 100 + 1;
                    return new zt(-this.changeVal * e)
                }
                return new zt(-this.changeVal)
            }
        }
        class hi extends XTowerBuffEffect {
            createBuff() {
                return new Wt(-this.changeVal)
            }
        }
        class di extends XBaseEffect {
            constructor(e, t, i = !0) {
                super(e, t), this.addValue = this.cfg.value[0];
                let s = this.getCurDoorModel()[0];
                s && s.owner.on(be.Battle_Be_Hit, this, this.exec)
            }
            exec(i, s) {
                if (this.data.palsyTime) return;
                if (!this.getCurDoorModel()[0]) return;
                let a = Math.floor(this.addValue * 2 * * i.lv);
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, a) && (t.gameUI.valueTips(e.TokenType.E_Coin, a, this.node.x, this.node.y), this.showWorkEff())
            }
            clear() {
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.exec)
            }
        }
        class XEatMosquito extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.addValue = this.cfg.value[0], this.node.on(be.AddCoin_By_Cnt, this, this.exec)
            }
            exec(i) {
                let s = i * this.addValue;
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, s) && t.gameUI.valueTips(e.TokenType.E_Coin, s, this.node.x, this.node.y)
            }
            clear() {
                this.node.off(be.AddCoin_By_Cnt, this, this.exec)
            }
        }
        class gi extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.threshold = e.value[0], this.dizzyTime = e.value[1];
                let i = this.getCurDoorModel()[0];
                i && i.owner.on(be.Battle_Be_Hit, this, this.exec)
            }
            exec(e, i) {
                if (this.data.palsyTime) return;
                let s = this.getCurDoorModel()[0];
                if (!s) return;
                if (s.curHp / s.maxHp > this.threshold) return;
                let a = new Laya.Animation;
                a.source = "res/atlas/res/Ani/lanyincao.atlas", EffectUtil.I.playAnim(a, e.owner.x - C.GridSize / 2, e.owner.y - C.GridSize, !1), t.gameMgr.DizzyTarget(e, this.dizzyTime, !1), this.clear();
                let n = this.data;
                t.buildingMgr.destroyBuilding(this.data.playerUuid, n.x, n.y, !1)
            }
            clear() {
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.exec)
            }
        }
        class ci extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.threshold = e.value[0];
                let i = this.getCurDoorModel()[0];
                i && i.owner.on(be.Battle_Be_Hit, this, this.exec)
            }
            exec(e, i) {
                if (this.data.palsyTime) return;
                let s = this.getCurDoorModel()[0];
                if (!s) return;
                if (s.curHp / s.maxHp > this.threshold) return;
                let a = new Laya.Animation;
                a.source = "res/atlas/res/Ani/xun.atlas", EffectUtil.I.playAnim(a, e.owner.x - C.GridHalfSize, e.owner.y - C.GridHalfSize, !1), e.ownerScript.setEscape(!0), this.clear();
                let n = this.data;
                t.buildingMgr.destroyBuilding(this.data.playerUuid, n.x, n.y, !1)
            }
            clear() {
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.exec)
            }
        }
        class EnemyEscapeBeSlowdown extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.map = new Map, this.slowRatio = e.value[0], this.time = 1e3 * e.value[1], this.data.owner.timerLoop(100, this, this.exec);
                let i = this.getCurDoorModel()[0];
                i && i.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            exec() {
                if (this.data.palsyTime) return;
                let e = this.hunter;
                if (!e) return;
                if (this.map.get(e)) return;
                let i = this.getCurDoorModel()[0];
                if (i && (Math.abs(i.owner.x - e.owner.x) > 150 || Math.abs(i.owner.y - e.owner.y) > 150)) {
                    let i = new Laya.Animation;
                    i.source = "res/atlas/res/Ani/gou.atlas", EffectUtil.I.playAnimByTime(i, 0, -80, this.time, e.owner);
                    let s = new Vt(this.slowRatio);
                    t.buffMgr.addBuff(e, s), this.map.set(e, s), e.owner.timerOnce(this.time, e, () => {
                        t.buffMgr.removeBuff(e, s)
                    }), this.clear();
                    let a = this.data;
                    t.buildingMgr.destroyBuilding(this.data.playerUuid, a.x, a.y, !1)
                }
            }
            clear() {
                this.data.owner.timer.clear(this, this.exec);
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            onDoorBeHit(e, t) {
                this.hunter = e
            }
        }
        class EnemyHpRateBeDizzy extends XBaseEffect {
            constructor(e, t) {
                super(e, t), this.threshold = e.value[0], this.dizzyTime = e.value[1];
                let i = this.getCurDoorModel()[0];
                i && (i.owner.on(be.Battle_Be_Hit, this, this.onDoorHit), this.data.owner.timerLoop(100, this, this.exec), this.hunterArr = [])
            }
            onDoorHit(e, t) {
                this.hunterArr.includes(e) || this.hunterArr.push(e)
            }
            exec() {
                for (const e of this.hunterArr) {
                    if (this.data.palsyTime) return;
                    if (e.isDie) return;
                    if (e.curHp / e.maxHp > this.threshold) return;
                    this.clear();
                    let i = e.owner.x,
                        s = e.owner.y - C.GridSize,
                        a = new Laya.Image("res/bullet/iceBall/1.png");
                    a.anchorX = 1, t.mapMgr.effectLayer.addChild(a), a.pos(i, s), (new fx.Sequence).rotate(-90, 500).exec(new Laya.Handler(this, () => {
                        t.gameMgr.DizzyTarget(e, this.dizzyTime, !0), a.destroy()
                    })).run(a);
                    let n = this.data;
                    t.buildingMgr.destroyBuilding(this.data.playerUuid, n.x, n.y, !1)
                }
                this.hunterArr = []
            }
            clear() {
                this.hunterArr = [], this.data.owner.timer.clear(this, this.exec);
                let e = this.getCurDoorModel()[0];
                e && e.owner.off(be.Battle_Be_Hit, this, this.exec)
            }
        }
        class XBuildingScript extends Laya.Script {
            constructor() {
                super(...arguments), this.isActive = !1, this.isDying = !1, this.effects = [], this.detlaAlpha = .05, this.onHitting = !1
            }
            init(e, i = 0) {
                this.isActive = !0, this.node = this.owner, this.skinNode = new Laya.Box, this.aniNode = new Laya.Box, 
                this.skinNode.width = this.skinNode.height = 90, this.aniNode.width = this.aniNode.height = 90;
                let s = C.GridSize / 90;
                this.skinNode.scale(s, s), this.aniNode.scale(s, s), 
                this.aniNode.anchorX = this.aniNode.anchorY = .5, 
                this.node.addChild(this.skinNode), 
                this.node.addChild(this.aniNode), 
                this.data = e, 
                this.data.ownerScript = this, 
                this.cfg = t.buildingMgr.getBuildCfg(this.data.id, this.data.lv), 
                this.initSkin(), 
                this.node.on(be.Hp_Changed, this, this.onHpChanged), 
                this.node.on(be.Battle_Be_Hit, this, this.onHit), i ? (this.isBuildCd = !0, this.buildCdTime = i, this.initCdUI(e)) : (this.onInit(), this.initEffects())
            }
            initCdUI(e) {
                this.barNode = fx.Utils.createPrefab(T.Prefab_BuildingCD);
                let i = this.barNode.getChildByName("img_building");
                this.panel_buildCd = i.getChildByName("panel_bar"), this.panel_buildCd.width = .001, t.mapMgr.buildCdLayer.addChild(this.barNode);
                let s = t.mapMgr.gridPosToMapPos(e.x, e.y);
                this.barNode.pos(s.x, s.y)
            }
            initSkin() {
                this.skinNode.destroyChildren(), this.initDiSkin();
                let i = !1;
                this.data.playerUuid == t.playerMgr.player.uuid && (i = !0), i && this.cfg.buffId && t.user.gameInfo.getBuffData(this.cfg.buffId[0]) && t.gameMgr.gameMode == e.GameMode.E_Defense ? this.initBuffSkin() : this.cfg.buildAni ? EffectUtil.I.playBuildAni(this.cfg.buildAni, this.skinNode) : (this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5), this.data.isSpecial && this.updateIcon()
            }
            initBuffSkin() {
                if (this.cfg.buffBuildAni) EffectUtil.I.playBuildAni(this.cfg.buffBuildAni, this.skinNode);
                else {
                    let e = this.cfg.buffIcon;
                    e || (e = this.cfg.icon), this.imgBody = new Laya.Image(e), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5
                }
            }
            initDiSkin() {
                this.cfg.diIcon && (this.imgDi && !this.imgDi.destroyed || (this.imgDi = new Laya.Image(this.cfg.diIcon), this.imgDi.anchorX = this.imgDi.anchorY = .5, this.skinNode.addChild(this.imgDi)))
            }
            onInit() {}
            onHpChanged() {
                this.data.isDie && (fx.EventCenter.I.event(XEventNames.E_BUILD_DEAD, [this.data]), this.onDead())
            }
            onDead() {
                this.isDead || (t.playerMgr.mineUuid == this.data.playerUuid ? t.gameMgr.addDataInArr(this.data) : this.data.type && "door" == this.data.type && t.playerMgr.player.roomId == this.data.roomId && t.gameMgr.addDataInArr(this.data), t.buildingMgr.destroyBuilding(this.data.playerUuid, this.data.x, this.data.y, !1))
            }
            onHit(e) {
                this.onHitting || (this.onHitting = !0, this.node.scale(1, 1), (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.node.scale(1, 1), this.onHitting = !1
                })).run(this.node))
            }
            onWork(e) {
                this.onHitting || (this.onHitting = !0, this.node.scale(1, 1), (new fx.Sequence).scaleOut(1.025, 100).scaleIn(.975, 200).scaleOut(1, 100).exec(Laya.Handler.create(this, () => {
                    this.node.scale(1, 1), this.onHitting = !1
                })).run(this.node))
            }
            initEffects() {
                if (this.cfg.effectList && 0 != this.cfg.effectList.length) {
                    for (let e = this.effects.length - 1; e >= 0; --e) {
                        let t = this.effects[e];
                        t.clearFlag && (t.clear(), this.effects.splice(e, 1))
                    }
                    for (const i of this.cfg.effectList) {
                        let s = Kt.createEffect(i, this.data);
                        if (s) {
                            if (s.clearFlag = !0, this.addEffect(s), i.type == e.EffectType.Enemy_SlowAtkSpd) {
                                return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.showDoorEff_1()
                            }
                            if (i.type == e.EffectType.Door_FightBackOnBeAtk) {
                                return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.showDoorEff_2()
                            }
                        }
                    }
                }
            }
            addEffect(e) {
                this.effects.push(e)
            }
            clearEffects() {
                for (const e of this.effects) e.clear();
                this.effects = []
            }
            removeEffect(e) {
                if (!this.effects || !this.effects.length) return;
                let t = this.effects.findIndex(t => t == e); - 1 != t && (this.effects[t].clear(), this.effects.splice(t, 1))
            }
            upgrade() {
                this.cfg = t.buildingMgr.getBuildCfg(this.data.id, this.data.lv), t.gameMgr.gameMode == e.GameMode.E_Defense && this.data.playerUuid == t.playerMgr.mineUuid && this.cfg.buffId && t.user.gameInfo.getBuffData(this.cfg.buffId[0]) && this.cfg.buffIcon ? this.imgBody.skin = this.cfg.buffIcon : (this.imgBody.skin = this.cfg.icon, this.imgBody_1 && (this.imgBody_1.skin = this.cfg.icon)), this.cfg.diIcon && (this.imgDi.skin = this.cfg.diIcon, this.imgDi_1 && (this.imgDi_1.skin = this.cfg.diIcon)), this.initEffects()
            }
            videoUpgrade() {}
            isInStage() {
                let e = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                return !!t.mapMgr.isInStageByMapPos(e.x - C.GridHalfSize, e.y - C.GridHalfSize) || (!!t.mapMgr.isInStageByMapPos(e.x + C.GridHalfSize, e.y + C.GridHalfSize) || (!!t.mapMgr.isInStageByMapPos(this.node.x - C.GridHalfSize, this.node.y - C.GridHalfSize) || !!t.mapMgr.isInStageByMapPos(this.node.x + C.GridHalfSize, this.node.y + C.GridHalfSize)))
            }
            onUpdate() {
                if (!t.gameMgr.isPause && this.updateBuildCd())
                    if (this.data.palsyTime) this.checkPalsyTime();
                    else if (this.map)
                    if (this.isInStage()) {
                        if (this.node.visible = !0, this.cfg.effectList && 0 != this.cfg.effectList.length && (this.node.alpha = 1, this.detlaAlpha = .05), !t.gameMgr.isHunter())
                            if (t.gameMgr.canHandleGrid(this.data.x, this.data.y) && t.buildingMgr.canUpgrade(t.playerMgr.mineUuid, this.data)) {
                                let i = this.data.type == e.BuildType.door ? t.playerMgr.mineRoomId == this.data.roomId : t.playerMgr.mineUuid == this.data.playerUuid;
                                3008 != this.data.id && this.isActive && this.map.showUpTips(this.data.x, this.data.y, i)
                            } else this.map.hideUpTips(this.data.x, this.data.y)
                    } else this.node.visible = !1
            }
            repair(e) {
                this.imgRepair || (this.imgRepair = new Laya.Image("res/game/img_repair.png"), this.node.addChild(this.imgRepair), this.imgRepair.anchorX = .5, this.imgRepair.anchorY = .5, this.imgRepair.pos(0, 0)), this.imgRepair.clearTimer(this, this.repairOnce);
                for (let t = 0; t < e; ++t) this.imgRepair.timerOnce(1e3 * t, this, this.repairOnce, null, !1)
            }
            repairOnce() {
                this.imgRepair.visible = !0, this.imgRepair.rotation = 0, Laya.Tween.clearAll(this.imgRepair), (new fx.Sequence).rotate(-30, 250).exec(Laya.Handler.create(this, this.repairHandler, [!0, !1])).rotate(0, 250).exec(Laya.Handler.create(this, this.repairHandler, [!1, !1])).rotate(30, 250).exec(Laya.Handler.create(this, this.repairHandler, [!0, !1])).rotate(0, 250).exec(Laya.Handler.create(this, this.repairHandler, [!1, !0])).run(this.imgRepair)
            }
            repairHandler(e, i) {
                this.data.hpPercent < 1 && t.gameMgr.AddHp(this.data, .05), i && (this.imgRepair.visible = !1, t.buildingMgr.stopRepairDoor(this.data))
            }
            onDestroy() {
                if (this.palsyEff && this.palsyEff.destroy(), this.barNode && this.barNode.destroy(), this.cfg.effectList && 0 != this.cfg.effectList.length) {
                    this.clearEffects();
                    for (const i of this.cfg.effectList) {
                        if (i.type == e.EffectType.Enemy_SlowAtkSpd) {
                            return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.hideDoorEff_1()
                        }
                        if (i.type == e.EffectType.Door_FightBackOnBeAtk) {
                            return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.hideDoorEff_2()
                        }
                    }
                }
            }
            updateBuildCd() {
                return !this.isBuildCd || (this.buildCdTime -= fx.Utils.getFrameDelta(.033), this.panel_buildCd.width = (60 - this.buildCdTime) / 60 * 89, this.buildCdTime <= 0 && (this.buildCdTime = 0, this.isBuildCd = !1, this.barNode.destroy(), this.onInit(), this.initEffects(), !0))
            }
            checkPalsyTime() {
                this.data.palsyTime && (this.data.palsyTime -= 1e3 * fx.Utils.getFrameDelta(.033), this.data.palsyTime <= 0 && (this.data.palsyTime = 0, this.palsyEff && this.palsyEff.destroy()))
            }
            playPalsyEff() {
                this.palsyEff = new Laya.Animation, this.palsyEff.source = "res/effect/build_dizzy.atlas", EffectUtil.I.playAnim(this.palsyEff, this.data.owner.x - 64, this.data.owner.y - 64, !0)
            }
            updateIcon() {}
            showRepairEff() {
                if (!this.doorRepair) {
                    this.doorRepair = new Laya.Image("res/game/img_repair.png"), this.node.addChild(this.doorRepair), this.doorRepair.anchorX = .5, this.doorRepair.anchorY = .5, this.doorRepair.pos(0, 0);
                    let e = (new fx.Sequence).rotate(-30, 250).rotate(0, 250).rotate(30, 250).rotate(0, 250);
                    e.isRepeat = !0, e.run(this.doorRepair)
                }
                this.doorRepair.visible = !0
            }
            hideRepairEff() {
                this.doorRepair && (this.doorRepair.visible = !1)
            }
        }
        class yi extends XAIModel {
            constructor(e) {
                super(e)
            }
            canPatrol(e) {
                let t = new XOneTrueCdt(new XHasPlayerBorrowCdt);
                return t.add(e), t
            }
            patrol() {
                let e = new XRunAction("run");
                return new fx.BTSequence({
                    children: [new XHasTargetCdt, new XHasPathCdt, new XNotInStopRangeCdt(this.data.getAttackRange()), e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            attack() {
                let e = new fx.BTInverter({
                    child: new XNotInStopRangeCdt(this.data.getAttackRange())
                });
                return new fx.BTSequence({
                    children: [e, new XHasTargetCdt, new XAttackAction],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            hasTarget(e) {
                let t = new XOneTrueCdt(new XHasTargetNewCdt);
                return t.add(e), t
            }
            OnCloseDoorCdt(e) {
                let t = new XOneTrueCdt(new XNotOnOpenSpaceCdt(this.data.getAttackRange()));
                return t.add(e), t
            }
            breakAway() {
                let e = new XBreakAwayAction;
                return new fx.BTSequence({
                    children: [e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            skill() {
                return new fx.BTSequence({
                    children: [new XHasSkillId01, new XSkillAction],
                    successPolicy: fx.EPolicy.RequireAll,
                    continuePolicy: Ie.SUCCESS
                })
            }
            canBack(e) {
                let t = new XOneTrueCdt(new XBackConditionCdt);
                return t.add(e), t
            }
            back(e) {
                let t = new XRunAction(e),
                    i = new XSimpleRunAction,
                    s = new fx.BTSequence({
                        children: [i, t],
                        continuePolicy: Ie.SUCCESS,
                        successPolicy: fx.EPolicy.RequireAll
                    }),
                    a = (new XHasPathCdt).bindout(t);
                return new fx.BTSequence({
                    children: [(new XRandomSpawnPosCdt).bindout(a), a, new XPostEventAction(XEventNames.E_HUNTER_ESCAPE), new fx.BTWaitUtil({
                        condition: new XIsMaxHpCdt,
                        child: s
                    }), new XClearTargetAction],
                    successPolicy: fx.EPolicy.RequireAll,
                    continuePolicy: Ie.SUCCESS
                })
            }
        }
        class Ci {
            static init() {
                this.clear(), this.engine = Matter.Engine.create(), this.engine.gravity.y = 0, this.world = this.engine.world, this.runner = Matter.Runner.create(), Matter.Runner.run(this.runner, this.engine), this.initEvent()
            }
            static clear() {
                this.engine && (Matter.Runner.stop(this.runner), this.engine = null, this.runner = null, this.world = null)
            }
            static initEvent() {
                Matter.Events.on(this.engine, "beforeUpdate", e => {
                    this.syncPhysicAndRender()
                }), Matter.Events.on(this.engine, "afterUpdate", e => {}), Matter.Events.on(this.engine, "collisionStart", e => {
                    let t = e.pairs;
                    for (let e = 0; e < t.length; e++) {
                        let i = t[e],
                            s = i.bodyA.owner,
                            a = i.bodyB.owner;
                        if (s && !s.destroyed) {
                            let e = [i.bodyB, i.bodyA, i.contacts];
                            s.event(Laya.Event.TRIGGER_ENTER, e)
                        }
                        if (a && !a.destroyed) {
                            let e = [i.bodyA, i.bodyB, i.contacts];
                            a.event(Laya.Event.TRIGGER_ENTER, e)
                        }
                    }
                }), Matter.Events.on(this.engine, "collisionActive", e => {
                    let t = e.pairs;
                    for (let e = 0; e < t.length; e++) {
                        let i = t[e],
                            s = i.bodyA.owner,
                            a = i.bodyB.owner;
                        if (s && !s.destroyed) {
                            let e = [i.bodyB, i.bodyA, i.contacts];
                            s.event(Laya.Event.TRIGGER_STAY, e)
                        }
                        if (a && !a.destroyed) {
                            let e = [i.bodyA, i.bodyB, i.contacts];
                            a.event(Laya.Event.TRIGGER_STAY, e)
                        }
                    }
                }), Matter.Events.on(this.engine, "collisionEnd", e => {
                    let t = e.pairs;
                    for (let e = 0; e < t.length; e++) {
                        let i = t[e],
                            s = i.bodyA.owner,
                            a = i.bodyB.owner;
                        if (s && !s.destroyed) {
                            let e = [i.bodyB, i.bodyA, i.contacts];
                            s.event(Laya.Event.TRIGGER_EXIT, e)
                        }
                        if (a && !a.destroyed) {
                            let e = [i.bodyA, i.bodyB, i.contacts];
                            a.event(Laya.Event.TRIGGER_EXIT, e)
                        }
                    }
                })
            }
            static syncPhysicAndRender() {
                if (!this.world) return;
                let e = this.world.bodies.length;
                for (let t = 0; t < e; ++t) {
                    let e = this.world.bodies[t];
                    e.isKinematic ? this.sysNodeToPhysic(e) : this.sysPhysicToNode(e)
                }
            }
            static sysNodeToPhysic(e) {
                let t = e.owner;
                if (t && !t.destroyed) {
                    let i = t.x,
                        s = t.y;
                    e.offset && (i += e.offset.x, s += e.offset.y), Matter.Body.setPosition(e, {
                        x: i,
                        y: s
                    })
                }
            }
            static sysPhysicToNode(e) {
                let t = e.owner;
                if (t && !t.destroyed) {
                    let i = e.position.x,
                        s = e.position.y;
                    e.offset && (i -= e.offset.x, s -= e.offset.y), t.pos(i, s)
                }
            }
            static createRectangle(e, t, i, s, a = !0) {
                let n = e.x,
                    r = e.y;
                s && s.offset && (n += s.offset.x, r += s.offset.y);
                let o = Matter.Bodies.rectangle(n, r, t, i, s);
                return o.owner = e, s && s.offset && (o.offset = s.offset), a && this.addBody(o), o
            }
            static createCircle(e, t, i, s = !0) {
                let a = e.x,
                    n = e.y;
                i && i.offset && (a += i.offset.x, n += i.offset.y);
                let r = Matter.Bodies.circle(a, n, t, i);
                return r.owner = e, i && i.offset && (r.offset = i.offset), s && this.addBody(r), r
            }
            static addBody(e) {
                this.removeBody(e), Matter.Body.setPosition(e, {
                    x: e.owner.x,
                    y: e.owner.y
                }), Matter.Body.setAngle(e, e.owner.rotation), Matter.Composite.add(this.world, e)
            }
            static removeBody(e) {
                this.world && e && Matter.Composite.remove(this.world, e)
            }
        }
        class XFighterScript extends XPlayerScript {
            constructor() {
                super(...arguments), this.type = e.PlayerType.E_Hunter, this.atkCnt = 0, this.lv = 1, this.skillCd = 20, this.normalAtkBuff = new Wt(0), this.addPowSkillBuff_1 = new Ft(.25), this.addPowSkillBuff_2 = new zt(-.3), this.rageSkillBuff = new zt(-.3), this.skillAttackTime = null, this.dismissDizzyFlag = !0, this.lastAttackRoomId = null, this.lastHealTime = 0, this.healSpeed = .1, this.isOutHeal = !0, this.isFirstOutHeal = !0
            }
            onAwake() {
                super.onAwake(), this.moveSpeed = t.cfg.constant.hunterMoveSpeed, this.moveSpeed /= t.gameMgr.hunterSpeedRatio, this.maxHpAddRate = t.gameMgr.dCfg.addMaxHp ? t.gameMgr.dCfg.addMaxHp : 0, this.atkCdScale = 1, this.lastAtkCdScale = 1
            }
            init(e) {
                super.init(e), this.lv = e.lv, e.invincible = !0
            }
            onInit() {
                this.lb_name = new Laya.Label, this.lb_name.anchorX = .5, this.lb_name.anchorY = 1, this.lb_name.y = -170, this.lb_name.fontSize = 25, this.lb_name.color = "#ffffff", this.lb_name.stroke = 3, this.node.addChild(this.lb_name), this.initBody(), this.data.uuid != t.playerMgr.mineUuid && this.initAI(), this.createHealthBar(), this.dCfg = t.gameMgr.dCfg, this.lb_name.text = "讨债鬼"
            }
            initBody() {
                let t = {
                    isSensor: !0,
                    isKinematic: !0,
                    collisionFilter: {
                        category: e.CollideGroupType.HUNTER,
                        mask: e.CollideGroupType.BULLET
                    },
                    offset: {
                        x: 0,
                        y: -C.GridHalfSize
                    }
                };
                this.body = Ci.createRectangle(this.node, C.GridSize, C.GridSize, t, !0)
            }
            initAI() {
                this.ai = new yi(this);
                let e = yt([this.ai.canBack(this.ai.back("escape")), this.ai.OnCloseDoorCdt(this.ai.breakAway()), this.ai.canPatrol(this.ai.patrol()), this.ai.attack(), this.ai.idle("idle")]);
                this.ai.load(e)
            }
            onUpdate() {
                if (t.gameMgr.gameStatus == e.GameStatus.E_GAME_START && this.isSkinLoaded && !t.gameMgr.isPause && !this.data.isDie) {
                    if (this.node.zOrder = this.node.y, this.data.dizzyDurSec) {
                        if (this.data.dizzyDurSec -= fx.Utils.getFrameDelta(.33), !(this.data.dizzyDurSec <= 0)) return;
                        this.data.dizzyDurSec = 0
                    }
                    this.checkHealZone(), this.ai && this.ai.exec()
                }
            }
            back() {
                XToast.show("讨债鬼拿着元宝离开了"), this.data.isDie = !0, this.barNode && (this.barNode.visible = !1), this.healthBarNode && (this.healthBarNode.visible = !1), this.skinNode && (this.skinNode.visible = !1), this.lb_name && (this.lb_name.visible = !1)
            }
            checkHealZone() {
                let e = t.mapMgr.isInHealZone(this.node.x, this.node.y);
                this.isInHealZone = e, e ? (this.isOutHeal && (this.isOutHeal = !1), this.data.isBack && this.back(), this.data.invincible = !0) : (this.isOutHeal || (this.isFirstOutHeal && (this.isFirstOutHeal = !1), this.isOutHeal = !0), this.data.invincible = !1, this.lastHealTime = 0)
            }
            attack(i) {
                if (this.control || this.data.isDie) return;
                this.isAtking = !0, this.playAnim("attack", !0, () => {
                    this.isAtking = !1, this.playAnim("idle")
                });
                let s = t.gameTime.now;
                i.type == e.BuildType.door && s - this.startAtkTime >= 1e4 && (this.startAtkTime = s), this.lastAttackRoomId = i.roomId, this.owner.timer.once(100, this, () => {
                    if (i && !i.owner.destroyed) {
                        let s = !1,
                            a = Math.max(this.data.getAtkPow(), 1);
                        this.data.equipAtk && (a += this.data.equipAtk), this.data.critRate + this.data.equipCritRate > XRandomUtil.random() && (a *= 2, s = !0), s && i.owner && !i.owner.destroyed && t.gameUI.iconTips(-C.GridHalfSize + i.owner.x, -C.GridHalfSize + i.owner.y, "res/game/crit.png", t.mapMgr.effectLayer), i.type == e.BuildType.door && i.doorkeeper ? t.gameMgr.takeDamage(this.data, i.doorkeeper, a) : t.gameMgr.takeDamage(this.data, i, a), EffectUtil.I.playHitEffect(i.owner.x, i.owner.y, this.data), t.gameMgr.playSound(this.data, 106), this.atkCnt++, this.checkUpgrade()
                    }
                }), this.atkCdScale > .5 ? this.setAtkFrqScale(this.atkCdScale - .05) : this.data.isRage ? this.setAtkFrqScale(this.lastAtkCdScale) : this.atkCdScale = 1
            }
            playAnim(e, t = !1, i) {
                let s;
                "idle" == e ? (s = "idle", e = "run") : "run" == e ? s = "run" : "attack" == e && (s = "attack"), s && s != this.curAniName && ("run" == s ? (this.playWalkSound(), Laya.timer.loop(500, this, this.playWalkSound)) : Laya.timer.clear(this, this.playWalkSound)), super.playAnim(e, t, i)
            }
            playWalkSound() {
                this.isInHealZone
            }
            checkUpgrade() {
                let e = t.cfg.hunterCfg.upAtcCntList;
                if (this.lv <= e.length) {
                    let t = e[this.lv - 1];
                    t = Math.ceil(t * (1 + this.dCfg.upRate)), this.data.equipExp && (t = Math.ceil(t * (1 - this.data.equipExp))), t <= this.atkCnt && this.upgrade(t)
                }
            }
            upgrade(i) {
                this.atkCnt -= i, this.lv++, this.data.lv = this.lv;
                let s = t.cfg.hunterCfg.hpList,
                    a = t.cfg.hunterCfg.attackList;
                t.gameMgr.gameMode != e.GameMode.E_Hunt || this.data.isGhost || (s = t.cfg.hunterCfg.hunterHpList, a = t.cfg.hunterCfg.hunterAttackList);
                let n = s[this.lv - 1] * (1 + this.maxHpAddRate),
                    r = a[this.lv - 1];
                n *= .8, this.data.lv > 5 ? r *= .8 : r *= .6, XToast.show(`${this.data.name} 升到${this.lv}等级`), this.data.attackPower = r, t.gameMgr.changeMaxHp(this.data, n + this.data.equipHp, this.data.curHp + n - this.data.maxHp + this.data.equipHp), XChoreUtil.playSound(107), this.healthBar.setLv(this.lv), fx.EventCenter.I.event(XEventNames.E_Hunter_Upgrade, this.lv)
            }
            dismissDizzy() {
                this.data.dizzyDurSec = 0, this.data.dizzyStartTime = 0
            }
            rageSkill(e, t = !1) {
                XChoreUtil.playSound(108);
                let i = this.owner.timer.currTimer / 1e3;
                this.skillAttackTime = i, this.data.isRage || (this.data.isRage = !0), XToast.show(`${this.data.name}暴躁了`);
                let s = e || 8;
                this.node.timerOnce(1e3 * s, this, this.cancelRage), fx.EventCenter.I.event(XEventNames.E_Hunter_Use_Skill, [this.lastAttackRoomId, this.data]), EffectUtil.I.playKuangbaoEffect(this.node.x, this.node.y), this.lastAtkCdScale = this.atkCdScale, this.setAtkFrqScale(this.atkCdScale - .3)
            }
            cancelRage() {
                this.data.isRage = !1, this.atkCdScale = this.lastAtkCdScale
            }
            performSkill(e) {
                "rage" == e && this.rageSkill()
            }
            setEscape(e) {
                this.isEscaped = e, e && (this.atkCdScale = 1)
            }
            getAttackCd() {
                let i = this.data.getAtkCD();
                return t.gameMgr.gameMode == e.GameMode.E_Hunt && (i *= .6), i *= this.atkCdScale, this.data.equipAtkSpeed && (i *= 1 - this.data.equipAtkSpeed), this.data.skillAtkSquRate && (i /= 1 + this.data.skillAtkSquRate), i = Math.max(.2, i)
            }
            setAtkFrqScale(e) {
                e >= 0 && e <= 1.2 && (this.atkCdScale = e)
            }
            onDestroy() {}
            changeSide(e) {
                this.data.changeSideUuid = e, this.healthBar.revertBarColor()
            }
        }
        class XMonsterAI extends XAIModel {
            constructor(e) {
                super(e)
            }
            dizzy(e) {
                let t = new XDizzyAction(e);
                return new fx.BTSequence({
                    children: [(new XIsDizzyingCdt).bindout(t), t],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            canPatrol(e) {
                let t = new XOneTrueCdt(new XHasAngelAroundCdt, new XHasPlayerAroundCdt, new XHasBuildingAroundCdt, new XHasPlayerAtkCdt, new XRandomRoomCdt);
                return t.add(e), t
            }
            patrol() {
                let e = new XRunAction("run");
                return new fx.BTSequence({
                    children: [new XHasTargetCdt, new XHasPathCdt, new XNotInStopRangeCdt(this.data.getAttackRange()), e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            attack() {
                let e = new fx.BTInverter({
                    child: new XNotInStopRangeCdt(this.data.getAttackRange())
                });
                return new fx.BTSequence({
                    children: [e, new XHasTargetCdt, new XAttackAction],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            canEscape(e) {
                let t = new XOneTrueCdt(new XEscapeCdt);
                return t.add(e), t
            }
            escape(e) {
                let t = new XRunAction(e),
                    i = new XSimpleRunAction,
                    s = new fx.BTSequence({
                        children: [i, t],
                        continuePolicy: Ie.SUCCESS,
                        successPolicy: fx.EPolicy.RequireAll
                    }),
                    a = (new XHasPathCdt).bindout(t);
                return new fx.BTSequence({
                    children: [(new XRandomSpawnPosCdt).bindout(a), a, new XPostEventAction(XEventNames.E_HUNTER_ESCAPE), new fx.BTWaitUtil({
                        condition: new XIsMaxHpCdt,
                        child: s
                    }), new XClearTargetAction],
                    successPolicy: fx.EPolicy.RequireAll,
                    continuePolicy: Ie.SUCCESS
                })
            }
            hasTarget(e) {
                let t = new XOneTrueCdt(new XHasTargetNewCdt);
                return t.add(e), t
            }
            OnCloseDoorCdt(e) {
                let t = new XOneTrueCdt(new XNotOnOpenSpaceCdt(this.data.getAttackRange()));
                return t.add(e), t
            }
            breakAway() {
                let e = new XBreakAwayAction;
                return new fx.BTSequence({
                    children: [e],
                    continuePolicy: Ie.SUCCESS,
                    successPolicy: fx.EPolicy.RequireAll
                })
            }
            skill() {
                return new fx.BTSequence({
                    children: [new XHasSkillId01, new XSkillAction],
                    successPolicy: fx.EPolicy.RequireAll,
                    continuePolicy: Ie.SUCCESS
                })
            }
            usingSkill() {
                return new fx.BTSequence({
                    children: [new XHasSkillId02],
                    successPolicy: fx.EPolicy.RequireAll,
                    continuePolicy: Ie.SUCCESS
                })
            }
        }
        class XHunterScript extends XPlayerScript {
            constructor() {
                super(...arguments), this.type = e.PlayerType.E_Hunter, this.atkCnt = 0, this.lv = 1, this.skillCd = 20, this.normalAtkBuff = new Wt(0), this.addPowSkillBuff_1 = new Ft(.25), this.addPowSkillBuff_2 = new zt(-.3), this.rageSkillBuff = new zt(-.3), this.skillAttackTime = null, this.dismissDizzyFlag = !0, this.lastAttackRoomId = null, this.lastHealTime = 0, this.healSpeed = .1, this.isOutHeal = !0, this.isFirstOutHeal = !0, this.curAutoSkillCd = 0, this.isStartCd = !0, this.useSkillCnt = 1, this.passiveSkillCd = 0, this.critCnt = 5, this.critCurCnt = 1, this.critScale = 1, this.hpHeal = 0, this.hpCnt = .2, this.createId = 10001
            }
            onAwake() {
                super.onAwake(), this.moveSpeed = t.cfg.constant.hunterMoveSpeed, this.moveSpeed /= t.gameMgr.hunterSpeedRatio, this.maxHpAddRate = t.gameMgr.dCfg.addMaxHp ? t.gameMgr.dCfg.addMaxHp : 0, this.atkCdScale = 1, this.lastAtkCdScale = 1, fx.EventCenter.I.on(XEventNames.E_Player_Dead, this, this.onPlayerDead)
            }
            onPlayerDead() {
                if (this.canBig) {
                    this.curBigCnt += 1;
                    let e = .5 + .1 * this.curBigCnt;
                    (new fx.Sequence).scaleOut(e, 1e3).run(this.skinSpine), this.healthBarNode.y = -128 * (1 + .2 * this.curBigCnt), this.lb_name.y = -170 + this.healthBarNode.y + 128
                }
            }
            init(i) {
                super.init(i), this.lv = i.lv, i.invincible = !0, t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? (i.isGhost && (this.moveSpeed *= 2), this.data.escapeOdds = .4, this.moveSpeed *= .87) : (t.gameMgr.gameMode != e.GameMode.E_Defense || 1 == t.gameMgr.difficultABTest && t.user.gameInfo.curLv > 2 && (1 != t.gameMgr.skillABTest || t.user.userInfo.loginDay > 1)) && (10006 != this.data.skinId || this.data.isGhost || (this.moveSpeed *= 1.5), 10002 == this.data.skinId ? this.passiveIntervalTime = 90 : 10007 == this.data.skinId ? this.passiveIntervalTime = 120 : this.passiveIntervalTime = 30)
            }
            onInit() {
                this.lb_name = new Laya.Label, this.lb_name.anchorX = .5, this.lb_name.anchorY = 1, this.lb_name.y = -170, this.lb_name.fontSize = 25, this.lb_name.color = "#ffffff", this.lb_name.stroke = 3, this.node.addChild(this.lb_name), this.initBody(), this.data.uuid != t.playerMgr.mineUuid && this.initAI(), this.createHealthBar(), this.dCfg = t.gameMgr.dCfg;
                let i = t.user.gameInfo.maxHunterLevel;
                t.gameMgr.gameMode == e.GameMode.E_Hunt || (i = this.dCfg.id);
                let s = t.cfg.hunterDifficultCfg.get(i);
                if (t.gameMgr.gameMode == e.GameMode.E_Hunt || t.gameMgr.gameMode == e.GameMode.E_Defense) this.data.isGhost || (this.lb_name.text = s.title, this.lb_name.color = s.titleColor);
                else if (t.gameMgr.gameMode == e.GameMode.E_SevenGhost && !this.data.isGhost) {
                    let e = t.user.gameInfo.curSevenGhostLv,
                        i = [1, 4, 7, 11, 14, 17, 26],
                        s = t.cfg.hunterDifficultCfg.get(i[e - 1]);
                    this.lb_name.text = s.title, this.lb_name.color = s.titleColor
                }
            }
            initBody() {
                let t = {
                    isSensor: !0,
                    isKinematic: !0,
                    collisionFilter: {
                        category: e.CollideGroupType.HUNTER,
                        mask: e.CollideGroupType.BULLET
                    },
                    offset: {
                        x: 0,
                        y: -C.GridHalfSize
                    }
                };
                this.body = Ci.createRectangle(this.node, C.GridSize, C.GridSize, t, !0)
            }
            initAI() {
                this.ai = new XMonsterAI(this);
                let e = yt([this.ai.dizzy("dizzy"), this.ai.canEscape(this.ai.escape("escape")), this.ai.usingSkill(), this.ai.OnCloseDoorCdt(this.ai.breakAway()), this.ai.canPatrol(this.ai.patrol()), this.ai.skill(), this.ai.attack(), this.ai.idle("idle")]);
                this.ai.load(e)
            }
            onUpdate() {
                if (t.gameMgr.gameStatus == e.GameStatus.E_GAME_START && this.isSkinLoaded && !t.gameMgr.isPause) {
                    if (this.node.zOrder = this.node.y, this.data.dizzyDurSec) {
                        if (this.data.dizzyDurSec -= fx.Utils.getFrameDelta(.33), !(this.data.dizzyDurSec <= 0)) return;
                        this.data.dizzyDurSec = 0
                    }!this.data.isGhost && (t.gameMgr.gameMode != e.GameMode.E_Defense || 1 == t.gameMgr.difficultABTest && t.user.gameInfo.curLv > 2 && (1 != t.gameMgr.skillABTest || t.user.userInfo.loginDay > 1)) && (this.canUseSkill ? this.useSkillsByTime() : (this.passiveSkillCd += fx.Utils.getFrameDelta(.033), this.passiveSkillCd >= this.passiveIntervalTime && (console.log("------------技能刷新------------"), this.canUseSkill = !0, this.isUsedSkill = !1)), this.checkAutoSkill()), this.checkHealZone(), this.ai && this.ai.exec()
                }
            }
            checkHealZone() {
                let e = t.mapMgr.isInHealZone(this.node.x, this.node.y);
                if (this.isInHealZone = e, e) {
                    if (this.isOutHeal) {
                        this.isOutHeal = !1;
                        for (const e of this.data.skillIdArr) 13 == e || 8 == e ? this.data.skillEquipHp += .5 * this.data.maxHp : 14 == e && this.data.skillIsUsed && (this.data.skillIsUsed = !1);
                        this.changeSkin(!0)
                    }
                    let e = this.owner.timer.delta / 1e3;
                    if (this.lastHealTime += e, this.lastHealTime >= 1 && (this.lastHealTime = 0, this.data.hpPercent < 1)) {
                        let e = this.healSpeed;
                        if (t.user.gameInfo.isStartLv) {
                            let i = t.gameMgr.dCfg;
                            i.addHpLv && this.lv >= i.addHpLv && (e = i.addHpRate)
                        }
                        t.gameMgr.AddHp(this.data, e)
                    }
                    this.data.invincible = !0
                } else this.isOutHeal || (this.isFirstOutHeal ? this.isFirstOutHeal = !1 : 1 != t.gameMgr.difficultABTest && this.lv >= this.dCfg.addExpLv && this.dCfg.addExp && (this.atkCnt += this.dCfg.addExp, this.checkUpgrade()), this.isOutHeal = !0), this.data.invincible = !1, this.lastHealTime = 0
            }
            switchTarget() {
                let e = this.isSwitchTarget,
                    t = this.tempTarget;
                return this.isSwitchTarget = !1, this.tempTarget = null, {
                    isSwitchTarget: e,
                    tempTarget: t
                }
            }
            attack(i) {
                if (this.control || this.data.isDie) return;
                this.data.isEntice && (this.data.isEntice = !1), this.isAtking = !0, this.playAnim("attack", !0, () => {
                    this.isAtking = !1, this.playAnim("idle")
                });
                let s = t.gameTime.now;
                i.type == e.BuildType.door && s - this.startAtkTime >= 1e4 && (this.startAtkTime = s, this.data.skillIdArr.includes(14) && !this.data.skillIsUsed && (this.startAtkTime = 0, this.data.skillIsUsed = !0, this.changeSkin(!1), this.usePalsySkill(i))), this.lastAttackRoomId = i.roomId, this.owner.timer.once(100, this, () => {
                    if (i && !i.owner.destroyed) {
                        if (!this.data.isGhost && (t.gameMgr.gameMode != e.GameMode.E_Defense || 1 == t.gameMgr.difficultABTest && t.user.gameInfo.curLv > 2 && (1 != t.gameMgr.skillABTest || t.user.userInfo.loginDay > 1)) && this.canUseSkill && !this.isUsedSkill) {
                            let s = i;
                            if (10003 == this.data.skinId)
                                if (t.gameMgr.gameMode == e.GameMode.E_Defense) {
                                    if (this.data.lv >= 4) {
                                        let i = t.mapMgr.getRoomById(s.roomId);
                                        s.type != e.BuildType.door || i.bedModelList[0].isDie || this.useSkillsOfAtk(s.roomId)
                                    }
                                } else {
                                    let i = t.mapMgr.getRoomById(s.roomId);
                                    s.type != e.BuildType.door || i.bedModelList[0].isDie || this.useSkillsOfAtk(s.roomId)
                                } else this.useSkillsOfAtk(s.roomId)
                        }
                        let s = !1,
                            a = Math.max(this.data.getAtkPow(), 1);
                        !this.data.isGhost && (t.gameMgr.gameMode != e.GameMode.E_Defense || 1 == t.gameMgr.difficultABTest && t.user.gameInfo.curLv > 2 && (1 != t.gameMgr.skillABTest || t.user.userInfo.loginDay > 1)) && (a *= 1 + this.data.skillAtkRate, 10001 == this.data.skinId && this.canUseSkill && (this.critCurCnt > this.critCnt ? (this.critCurCnt = 1, this.closeSkillByAtk()) : (this.critCurCnt++, this.critScale = 2, s = !0))), this.data.equipAtk && (a += this.data.equipAtk), this.data.critRate + this.data.equipCritRate > XRandomUtil.random() && (a *= 2, s = !0), t.gameMgr.gameMode == e.GameMode.E_Hunt && i.type == e.BuildType.door && (a = (1 - this.dCfg.doorReduce) * a), a *= this.critScale, s && i.owner && !i.owner.destroyed && t.gameUI.iconTips(-C.GridHalfSize + i.owner.x, -C.GridHalfSize + i.owner.y, "res/game/crit.png", t.mapMgr.effectLayer), i.type == e.BuildType.door && i.doorkeeper ? t.gameMgr.takeDamage(this.data, i.doorkeeper, a) : t.gameMgr.takeDamage(this.data, i, a), this.suckHp(a), EffectUtil.I.playHitEffect(i.owner.x, i.owner.y, this.data), t.gameMgr.playSound(this.data, 106), this.atkCnt++, this.checkUpgrade()
                    }
                }), this.atkCdScale > .5 ? this.setAtkFrqScale(this.atkCdScale - .05) : this.data.isRage ? this.setAtkFrqScale(this.lastAtkCdScale) : this.atkCdScale = 1
            }
            suckHp(e) {
                if (this.data.skillSuckHpRate) {
                    let i = e * this.data.skillSuckHpRate,
                        s = this.data.curHp;
                    s += i, this.data.curHp = Math.min(s, this.data.maxHp), this.healthBar.updateHealth(), t.gameUI.iconTips(0, -106, "res/game/suckHp.png", this.data.owner)
                }
            }
            playAnim(e, t = !1, i) {
                let s;
                "idle" == e ? s = "idle" : "run" == e ? s = "run" : "attack" == e && (s = "attack"), s && s != this.curAniName && ("run" == s ? (this.playWalkSound(), Laya.timer.loop(500, this, this.playWalkSound)) : Laya.timer.clear(this, this.playWalkSound)), super.playAnim(e, t, i)
            }
            playWalkSound() {
                this.isInHealZone
            }
            checkUpgrade() {
                let e = t.cfg.hunterCfg.upAtcCntList;
                if (this.lv <= e.length) {
                    let t = e[this.lv - 1];
                    t = Math.ceil(t * (1 + this.dCfg.upRate)), this.data.equipExp && (t = Math.ceil(t * (1 - this.data.equipExp))), t <= this.atkCnt && this.upgrade(t)
                }
            }
            addUpgradeCnt(e = 30) {
                this.atkCnt += e, this.checkUpgrade()
            }
            upgrade(i) {
                this.atkCnt -= i, this.lv++, t.gameMgr.gameMode != e.GameMode.E_Hunt || this.data.isGhost || 2 == this.lv && (this.autoSkillId = XRandomUtil.getIntRandom(1, 4), this.autoSkillId < 3 ? this.autoSkillCd = 90 : this.autoSkillCd = 60, this.useAutoSkill(), this.curAutoSkillCd = 0, this.healthBar.showAutoSkillBar(), this.healthBar.updateAutoSkillBar(0)), this.data.lv = this.lv;
                let s = t.cfg.hunterCfg.hpList,
                    a = t.cfg.hunterCfg.attackList;
                t.gameMgr.gameMode != e.GameMode.E_Hunt || this.data.isGhost || (s = t.cfg.hunterCfg.hunterHpList, a = t.cfg.hunterCfg.hunterAttackList);
                let n = s[this.lv - 1] * (1 + this.maxHpAddRate),
                    r = a[this.lv - 1];
                this.data.isGhost ? (n *= .8, this.data.lv > 5 ? r *= .8 : r *= .6, t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? XToast.show(`${this.data.name} 执行人升到${this.lv}等级`) : XToast.show(`${this.data.name} 升到${this.lv}等级`)) : t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? XToast.show(`木头人升到${this.lv}等级`) : XToast.show(`噬魂者升到${this.lv}等级`), this.data.attackPower = r, t.gameMgr.changeMaxHp(this.data, n + this.data.equipHp, this.data.curHp + n - this.data.maxHp + this.data.equipHp), t.gameMgr.gameMode == e.GameMode.E_Defense && t.gameMgr.dCfg.addSkillLv == this.lv && this.getSkill(), XChoreUtil.playSound(107), this.healthBar.setLv(this.lv), fx.EventCenter.I.event(XEventNames.E_Hunter_Upgrade, this.lv)
            }
            takeEquip(e) {
                this.refreshEquip(e), this.addUpgradeCnt()
            }
            refreshEquip(e, i = !1) {
                switch (e.type) {
                    case 0:
                        i ? this.data.equipAtk -= e.value : this.data.equipAtk += e.value;
                        break;
                    case 1:
                        let s = t.cfg.hunterCfg.hunterHpList[this.lv - 1] * (1 + this.maxHpAddRate);
                        i ? (this.data.equipHp -= e.value, t.gameMgr.changeMaxHp(this.data, s + this.data.equipHp, this.data.curHp)) : (this.data.equipHp += e.value, t.gameMgr.changeMaxHp(this.data, s + this.data.equipHp, this.data.curHp));
                        break;
                    case 2:
                        i ? (this.data.equipMoveSpeed -= e.value, e.extraValue && (this.data.equipAtkSpeed -= e.extraValue)) : (this.data.equipMoveSpeed += e.value, e.extraValue && (this.data.equipAtkSpeed += e.extraValue));
                        break;
                    case 3:
                        i ? this.data.equipExp -= e.value : this.data.equipExp += e.value;
                        break;
                    case 4:
                        i ? this.data.equipCritRate -= e.value : this.data.equipCritRate += e.value
                }
            }
            deleteEquip(e) {
                this.refreshEquip(e, !0)
            }
            getSkill() {
                let i = t.gameMgr.dCfg.skillWeight,
                    s = t.gameMgr.difficultABTest;
                if (1 == s && t.gameMgr.gameMode == e.GameMode.E_Defense && (i = t.gameMgr.dCfg.difficultSkillWeight), i) {
                    let e = [];
                    for (let a = 0; a < i.length; a++) {
                        let n = a + 1,
                            r = t.cfg.hunterSkillCfg.get(n);
                        (r.isOpen || 1 == s && 4 == r.id) && !this.data.skillIdArr.includes(n) && e.push({
                            o: n,
                            weight: i[a]
                        })
                    }
                    if (!e.length) return;
                    let a = fx.Utils.takeOneByWeight(e)[1].o,
                        n = t.cfg.hunterSkillCfg.get(a);
                    if (!n) return;
                    let r = n.des;
                    switch (this.data.skillIdArr.push(a), a) {
                        case 1:
                            this.skinSpine.scale(.25, .25), this.data.skillAtkRate += -.05, this.data.addReduceRate = -.1;
                            break;
                        case 2:
                            this.curBigCnt = 0, this.canBig = !0;
                            break;
                        case 3:
                            break;
                        case 4:
                            let e = 0,
                                i = XRandomUtil.getNumberRandom(0, 1);
                            e = i <= .85 ? 1 : i <= .9 ? 2 : 3;
                            let s = t.cfg.skin.get(this.data.skinId);
                            for (let t = 0; t < e; t++) this.createGhost(this.data.skinId, s.name + "镜像");
                            r = r.replace("{0}", `${e}`);
                            break;
                        case 5:
                        case 6:
                            break;
                        case 7:
                            this.skinSpine.showSkinByName("guimianju"), this.data.skillMoveSpeedRate += .5;
                            break;
                        case 8:
                            this.skinSpine.showSkinByName("maozi"), this.data.skillEquipHp += .5 * this.data.maxHp;
                            break;
                        case 9:
                            this.skinSpine.showSkinByName("dianju"), this.data.skillAtkRate += .5;
                            break;
                        case 10:
                            this.img_addHp = new Laya.Image("res/game/img_addHp.png"), this.img_addHp.anchorX = .5, this.img_addHp.anchorY = .1, this.diEffect.addChild(this.img_addHp), this.owner.timerLoop(1e3, this, this.addHpBySkill);
                            break;
                        case 11:
                        case 12:
                            break;
                        case 13:
                            this.skinSpine.showSkinByName("guancai"), this.data.skillEquipHp += .5 * this.data.maxHp;
                            break;
                        case 14:
                            this.skinSpine.showSkinByName("fanwan");
                            break;
                        case 15:
                            this.skinSpine.showSkinByName("liandao"), this.data.skillAtkRate += .2;
                            break;
                        case 16:
                            this.skinSpine.showSkinByName("wenzi"), this.data.skillSuckHpRate += .05;
                            break;
                        case 17:
                            this.skinSpine.showSkinByName("zhaohunfan"), this.data.skillAtkSquRate += .2
                    }
                    XToast.show(r, 2)
                }
            }
            addHpBySkill() {
                if (!this.data.isDie && this.data.curHp < this.data.maxHp) {
                    let e = Math.ceil(.01 * this.data.maxHp);
                    this.data.curHp += e, this.data.curHp = Math.min(this.data.curHp, this.data.maxHp), this.healthBar.updateHealth(), t.gameUI.iconTips(0, -106, "res/game/suckHp.png", this.data.owner)
                }
            }
            dizzySkill(i = 4, s = 3, a = !0) {
                this.dismissDizzyFlag = !1;
                let n = t.mapMgr.mapPosToGridPos(this.node.x, this.node.y),
                    r = t.buildingMgr.getAroundBuildings(n.x, n.y, null, i),
                    o = this.owner.timer.currTimer;
                for (const t of r) t.owner && t.type == e.BuildType.tower && (t.dizzyStartTime = o, t.dizzyDurSec = s, EffectUtil.I.playDizzyEffect(t.owner.x, t.owner.y, s));
                return a && XToast.show("玩家被震撼了！"), !0
            }
            dismissDizzy() {
                this.data.dizzyDurSec = 0, this.data.dizzyStartTime = 0
            }
            rageSkill(i, s = !1) {
                XChoreUtil.playSound(108);
                let a = this.owner.timer.currTimer / 1e3;
                this.skillAttackTime = a, this.data.isRage || (this.data.isRage = !0), t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? this.data.isGhost ? XToast.show("执行人暴躁了") : XToast.show("木头人暴躁了") : this.data.isGhost ? XToast.show(`${this.data.name}暴躁了`) : XToast.show("噬魂者暴躁了");
                let n = i || 8;
                this.node.timerOnce(1e3 * n, this, this.cancelRage), fx.EventCenter.I.event(XEventNames.E_Hunter_Use_Skill, [this.lastAttackRoomId, this.data]), EffectUtil.I.playKuangbaoEffect(this.node.x, this.node.y), this.lastAtkCdScale = this.atkCdScale, this.setAtkFrqScale(this.atkCdScale - .3)
            }
            cancelRage() {
                this.data.isRage = !1, this.atkCdScale = this.lastAtkCdScale
            }
            performSkill(e) {
                "rage" == e ? this.rageSkill() : "dizzy" == e && this.dizzySkill()
            }
            setEscape(e) {
                this.isEscaped = e, e && (this.atkCdScale = 1)
            }
            getAttackCd() {
                let i = this.data.getAtkCD();
                return t.gameMgr.gameMode == e.GameMode.E_Hunt && (i *= .6), i *= this.atkCdScale, this.data.equipAtkSpeed && (i *= 1 - this.data.equipAtkSpeed), this.data.skillAtkSquRate && (i /= 1 + this.data.skillAtkSquRate), i = Math.max(.2, i)
            }
            setAtkFrqScale(e) {
                e >= 0 && e <= 1.2 && (this.atkCdScale = e)
            }
            usePalsySkill(i) {
                let s = i,
                    a = t.mapMgr.getRoomById(s.roomId),
                    n = [];
                for (const t of a.buildings) t.type != e.BuildType.door && t.type != e.BuildType.bed && n.push(t);
                if (n.length) {
                    let e = fx.Utils.randomInArray(n),
                        i = new Laya.Image("res/game/img_fanwan.png");
                    i.anchorX = i.anchorY = .5, t.mapMgr.mapNode.addChild(i), i.pos(this.data.owner.x, this.data.owner.y), (new fx.Sequence).to({
                        x: e.owner.x,
                        y: e.owner.y
                    }, 500).exec(new Laya.Handler(this, () => {
                        i.destroy(), !e.owner.destroyed && e && e.ownerScript && (e.palsyTime = 2e4, e.ownerScript.playPalsyEff())
                    })).run(i)
                }
            }
            autoHeal() {
                this.data.curHp += .5 * this.data.maxHp, this.data.curHp = Math.min(this.data.curHp, this.data.maxHp), this.data.owner.event(be.Hp_Changed), this.healEff ? (this.healEff.visible = !0, this.healEff.play(0, !1), this.healEff.offAll(Laya.Event.STOPPED), this.healEff.on(Laya.Event.STOPPED, this, () => {
                    this.healEff.visible = !1
                })) : t.assetLoader.createSpine("spines/effect/heal/huatuo_phyattack_2.bin", e => {
                    this.healEff = e, this.node.addChild(e), this.healEff.play(0, !1), this.healEff.on(Laya.Event.STOPPED, this, () => {
                        this.healEff.visible = !1
                    })
                })
            }
            autoInvincible() {
                this.data.invincible_skill = !0, this.img_invincible ? this.img_invincible.visible = !0 : (this.img_invincible = new Laya.Image("res/game/img_invincible.png"), this.img_invincible.anchorX = .5, this.img_invincible.anchorY = 1, this.node.addChild(this.img_invincible)), this.owner.timer.once(5e3, this, () => {
                    this.isStartCd = !0, this.img_invincible.visible = !1, this.data.invincible_skill = !1
                })
            }
            autoMoveSpeed() {
                if (this.moveSpeedScale = 2, this.img_addSpeed) this.img_addSpeed.visible = !0;
                else {
                    this.img_addSpeed = new Laya.Image("res/game/img_addSpeed.png"), this.img_addSpeed.anchorX = .5, this.img_addSpeed.anchorY = .2, this.diEffect.addChild(this.img_addSpeed);
                    let e = (new fx.Sequence).scaleOut(.9, 100).scaleOut(1, 100);
                    e.isRepeat = !0, e.run(this.img_addSpeed)
                }
                this.owner.timer.once(5e3, this, () => {
                    this.isStartCd = !0, this.img_addSpeed.visible = !1, this.moveSpeedScale = 1
                })
            }
            autoRageSkill(e) {
                XChoreUtil.playSound(108), this.data.isRage || (this.data.isRage = !0);
                let i = e || 10;
                this.node.timerOnce(1e3 * i, this, this.cancelRage), this.node.timerOnce(1e3 * i, this, () => {
                    this.isStartCd = !0
                }), this.lastAtkCdScale = this.atkCdScale, this.setAtkFrqScale(this.atkCdScale - .3), this.kuangbaoEff ? (this.kuangbaoEff.visible = !0, this.kuangbaoEff.play(0, !1), this.kuangbaoEff.offAll(Laya.Event.STOPPED), this.kuangbaoEff.on(Laya.Event.STOPPED, this, () => {
                    this.kuangbaoEff.visible = !1
                })) : t.assetLoader.createSpine("spines/effect/kuangbao/skeleton.bin", e => {
                    this.kuangbaoEff = e, this.node.addChild(e), this.kuangbaoEff.play(0, !1), this.kuangbaoEff.on(Laya.Event.STOPPED, this, () => {
                        this.kuangbaoEff.visible = !1
                    })
                })
            }
            useAutoSkill() {
                this.isStartCd = !1;
                let e = "";
                switch (this.autoSkillId) {
                    case 1:
                        this.autoHeal(), e = "回复", this.isStartCd = !0;
                        break;
                    case 2:
                        this.autoInvincible(), e = "无敌";
                        break;
                    case 3:
                        this.autoMoveSpeed(), e = "疾跑";
                        break;
                    case 4:
                        this.autoRageSkill(), e = "狂暴"
                }
                XToast.show(`使用技能---${e}`)
            }
            checkAutoSkill() {
                this.autoSkillCd && (this.isStartCd && (this.curAutoSkillCd += fx.Utils.getFrameDelta(.033)), this.healthBar.updateAutoSkillBar(Math.min(this.curAutoSkillCd / this.autoSkillCd, 1)), this.curAutoSkillCd >= this.autoSkillCd && (this.curAutoSkillCd = 0, this.useAutoSkill()))
            }
            useYanluo() {
                this.data.curHp = this.data.maxHp, this.data.reduceRate = .5, this.img_yanluo = new Laya.Box, this.skinAniNode.addChild(this.img_yanluo), this.img_yanluo.anchorX = this.img_yanluo.anchorY = .5, this.img_yanluo.pos(C.GridHalfSize, C.GridSize), t.assetLoader.createSpine("spines/effect/yanluo/skeleton.bin", e => {
                    this.img_yanluo.addChild(e), e.play(0, !0)
                }), this.owner.timer.once(6e4, this, this.clearYanluo), this.data.owner.event(be.Hp_Changed)
            }
            clearYanluo() {
                this.data.reduceRate = 0, this.img_yanluo.destroy()
            }
            useSkillsOfAtk(e) {
                switch (this.data.skinId) {
                    case 10001:
                        this.isUsedSkill = !0, this.critCnt = Math.min(Math.ceil(this.useSkillCnt / 3) - 1 + 5, 8);
                        break;
                    case 10003:
                        let i = t.mapMgr.getRandomPosByRoomId(e);
                        if (i) {
                            let e = t.mapMgr.gridPosToMapPos(i.x, i.y);
                            fx.EventCenter.I.event(XEventNames.E_Hurter_Dig, [e]), this.isUsedSkill = !0, this.owner.timer.once(2e3, this, this.closeSkillByAtk)
                        }
                        break;
                    case 10005:
                        this.isUsedSkill = !0;
                        let s = new Laya.Image("res/game/dizzy.png");
                        s.anchorX = s.anchorY = .5, s.scale(0, 0), t.mapMgr.effectLayer.addChild(s), s.pos(this.node.x, this.node.y), (new fx.Sequence).scaleOut(4, 200).exec(new Laya.Handler(this, () => {
                            s.destroy()
                        })).run(s);
                        let a = Math.min(6, Math.ceil(this.useSkillCnt / 2) + 2);
                        this.dizzySkill(10, a, !1), this.owner.timer.once(1e3 * a, this, this.closeSkillByAtk)
                }
            }
            useSkillsByTime() {
                let e = !1;
                switch (this.data.skinId) {
                    case 10002:
                        let i = Math.min(5, Math.ceil(this.useSkillCnt / 2)),
                            s = t.cfg.skin.get(10002);
                        for (let e = 0; e < i; e++) this.createGhost(this.data.skinId, s.name + "镜像");
                        this.owner.timer.once(4e4, this, this.closeSkillByTime), XToast.show("召唤镜像"), e = !0;
                        break;
                    case 10004:
                        this.data.curHp / this.data.maxHp < .4 && (Laya.timer.loop(100, this, this.healHP), this.owner.timer.once(1e3, this, this.closeSkillByTime), e = !0, this.owner.timer.once(100, this, () => {
                            this.autoHealEff ? (this.autoHealEff.visible = !0, this.autoHealEff.play(0, !1), this.autoHealEff.offAll(Laya.Event.STOPPED), this.autoHealEff.on(Laya.Event.STOPPED, this, () => {
                                this.autoHealEff.visible = !1
                            })) : t.assetLoader.createSpine("spines/effect/heal/huatuo_phyattack_2.bin", e => {
                                this.autoHealEff = e, this.node.addChild(e), e.pos(0, 20), this.autoHealEff.play(0, !1), this.autoHealEff.on(Laya.Event.STOPPED, this, () => {
                                    this.autoHealEff.visible = !1
                                })
                            })
                        }));
                        break;
                    case 10007:
                        if (e = !0, this.createId < 10007) {
                            let e = t.cfg.skin.get(this.createId);
                            this.createGhost(this.createId, e.name + "恶鬼"), this.createId += 1, XToast.show("召唤恶鬼")
                        }
                }
                e && (this.canUseSkill = !1, this.useSkillCnt++, this.passiveSkillCd = 0)
            }
            closeSkillByAtk() {
                switch (this.canUseSkill = !1, this.useSkillCnt++, this.passiveSkillCd = 0, this.data.skinId) {
                    case 10001:
                        this.critScale = 1
                }
            }
            closeSkillByTime() {
                switch (this.data.skinId) {
                    case 10002:
                        this.deleteGhost();
                        break;
                    case 10004:
                        Laya.timer.clear(this, this.healHP), this.autoHealEff.stop()
                }
            }
            healHP() {
                let e = Math.min(.6, this.hpCnt + .1 * (Math.ceil(this.useSkillCnt / 2) - 1));
                this.hpHeal = Math.ceil(this.data.maxHp * e / 10), this.data.curHp = Math.min(this.data.curHp + this.hpHeal, this.data.maxHp), this.data.owner.event(be.Hp_Changed)
            }
            createGhost(i, s) {
                let a = new XPlayerModel;
                a.isGhost = !0, a.uuid = fx.Utils.createUUID(), a.name = s;
                let n = t.playerMgr.hunters[0].lv;
                a.lv = n, n > 2 ? (a.curHp = a.maxHp = t.cfg.hunterCfg.hpList[n - 2], a.attackPower = t.cfg.hunterCfg.attackList[n - 2]) : 2 == n ? (a.curHp = a.maxHp = 400, a.attackPower = 4) : (a.curHp = a.maxHp = t.cfg.hunterCfg.hpList[0], a.attackPower = t.cfg.hunterCfg.attackList[0]), a.skinId = i, a.type = e.PlayerType.E_Hunter, t.playerMgr.addGhost(a)
            }
            deleteGhost() {
                t.playerMgr.deleteGhost()
            }
            digHole() {}
            onDestroy() {
                fx.EventCenter.I.on(XEventNames.E_Player_Dead, this, this.onPlayerDead)
            }
        }
        class XBulletScript extends Laya.Script {
            constructor() {
                super(...arguments), this.speed = 1e3, this.maxDistSquared = 1e6, this.subBullet = [], this.unlimitedRange = !1
            }
            onAwake() {
                super.onAwake(), this.speed = t.cfg.constant.bulletSpeed, this.speed /= t.gameMgr.speedRatio
            }
            shoot(e, i, s, a, n, r, o, l, h, d) {
                this.bulletKey = e, this.attack = i, this.moveDir = s, this.target = a, this.baseModel = n, this.collisionCb = h, this.isRotate = d;
                for (let e of t.playerMgr.defenders) n.playerUuid == e.uuid && (this.fromModel = e);
                this.node = this.owner, this.node.rotation = 0, this.isActive = !0, this.originPos = new fx.V2(this.node.x, this.node.y), this.isDirZero() ? this.recover() : r || o || (this.initBody(l), this.node.on(Laya.Event.TRIGGER_ENTER, this, this.onCollision))
            }
            isDirZero() {
                return Math.abs(this.moveDir.x) < .01 && Math.abs(this.moveDir.y) < .01
            }
            isOutRange() {
                let e = this.maxDistSquared,
                    t = this.node.x - this.originPos.x,
                    i = this.node.y - this.originPos.y;
                return t * t + i * i >= e
            }
            isInHitRange(e) {
                let t = C.GridHalfSize * C.GridHalfSize,
                    i = this.node.x - e.x,
                    s = this.node.y - e.y;
                return i * i + s * s <= t
            }
            onUpdate() {
                if (!this.isActive) return;
                if (this.target && this.target.isDie) return void this.recover();
                let t, i = this.node.timer.delta / 1e3;
                if (0 == i || 0 == this.speed) return;
                if (this.target) {
                    let i = this.target.owner;
                    if (i.destroyed) return void this.recover();
                    if (!i.visible && this.target.type != e.BuildType.door) return void this.recover();
                    t = {
                        x: i.x,
                        y: i.y - C.GridHalfSize
                    }, this.moveDir.setValue(t.x - this.node.x, t.y - this.node.y)
                }
                this.moveDir.normalize(i * this.speed);
                let s = this.node.x + this.moveDir.x,
                    a = this.node.y + this.moveDir.y;
                this.node.pos(s, a), this.isRotate ? (this.node.rotation += 10, this.node.rotation >= 360 && (this.node.rotation -= 360)) : t && XV2Util01.faceTo(this.node, t.x, t.y, 90)
            }
            onCollision(e) {
                if (!this.isActive) return;
                let i, s = e.owner;
                if (!s.destroyed && (t.gameMgr.playSoundByNode(this.node, 110), (i = s.getComponent(XHunterScript)) || (i = s.getComponent(XFighterScript)), i && !i.data.isDie)) {
                    let s = this.attack;
                    t.gameMgr.takeDamage(this.baseModel, i.data, s), this.collisionCb && this.collisionCb.runWith(i.data);
                    for (const e of this.subBullet) e.recover();
                    this.recover(), EffectUtil.I.playbulletEffect(e.owner.x, e.owner.y - C.GridHalfSize, this.fromModel)
                }
            }
            recover() {
                this.isActive = !1, this.removeBody(), t.bulletMgr.recoverBulletNode(this.bulletKey, this.node)
            }
            onDestroy() {
                this.removeBody()
            }
            initBody(t) {
                let i = {
                    isSensor: !0,
                    isKinematic: !0,
                    collisionFilter: t || {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender
                    }
                };
                this.body = Ci.createCircle(this.node, 20, i, !0)
            }
            removeBody() {
                this.body && (Ci.removeBody(this.body), this.body = null)
            }
            setSpeed(e) {
                (e || 0 === e) && (this.speed = e)
            }
        }
        class XTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD(),
                    i = t.user.gameInfo.getBuffData(2),
                    s = t.mapMgr.getRoomById(this.data.roomId);
                return !i || s.doorModel && !s.doorModel.isDie || (e /= 2), 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isChange) return;
                if (this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            findTargets() {
                let e, i = [],
                    s = 1 / 0,
                    a = this.getAtkDstSqu(),
                    n = this.getHunters();
                for (const t of n) {
                    if (t.isDie) continue;
                    if (t.changeSideUuid == this.data.playerUuid) continue;
                    let n = t.owner;
                    if (!n || n.destroyed || this.node.destroyed) continue;
                    let r = XV2Util01.pDistanceSquared(n, this.node);
                    r <= a && (r < s ? (s = r, e = t, i.splice(0, 0, t)) : i.push(t))
                }
                if (i.length > 1) {
                    let e = t.playerMgr.getPlayer(this.data.playerUuid);
                    if (e)
                        for (const t of e.buildings)
                            if (6022 == t.id) return i;
                    i.splice(1, i.length - 1)
                }
                return i
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner;
                    if (t && this.node) {
                        let s = XV2Util01.pDistanceSquared(t, this.node);
                        s <= i && s < e && (e = s)
                    }
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTargets();
                if (e.length) {
                    this.atkTarget = e[0], XV2Util01.faceTo(this.node, this.atkTarget.owner.x, this.atkTarget.owner.y, 90), this.addCoinByAtk();
                    for (const t of e) this.fire(t);
                    this.isWork = !0
                } else this.isWork = !1
            }
            fire(i) {
                let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!s) return;
                s.rotation = this.node.rotation, s.x = this.node.x, s.y = this.node.y;
                let a = s.getComponent(XBulletScript);
                a && a.destroy();
                let n = this.cfg.bulletType,
                    r = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    o = i ? new fx.V2(i.owner.x - s.x, i.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = i;
                let l = this.cfg.atkDamage * this.getDamageMult();
                n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, l, o, null, this.data, null, void 0, r) : a.shoot(this.cfg.bullet, l, o, i, this.data, null, void 0, r), this.playFireEff(), this.fireEvent()
            }
            playFireEff() {
                (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody)
            }
            updateSpecial() {
                this.isChange = !0, t.assetLoader.createSpine("spines/specialTower/dongbai_effect2_1.bin", e => {
                    e.play(0, !0), this.destroyed ? e.destroy() : (this.specialSpine = e, t.mapMgr.effectLayer.addChild(e), e.pos(this.node.x, this.node.y))
                }), this.owner.timer.once(2e3, this, () => {
                    this.specialSpine && this.specialSpine.destroy(), t.buildingMgr.destroyBuilding(this.data.playerUuid, this.data.x, this.data.y, !1), t.buildingMgr.buildSpecial(this.data)
                })
            }
            getDamageMult() {
                return 1
            }
            upgrade() {
                super.upgrade(), this.data.isSpecial && this.updateIcon(), this.initEffects()
            }
            updateIcon() {
                let e = t.buildingMgr.specialTowerCfg.get(this.data.specialId);
                e.diIcon && (this.imgDi.skin = e.diIcon)
            }
            addCoinByAtk() {}
            fireEvent() {
                let e = t.buildingMgr.getRoom(this.data.roomId).bedModelList[0];
                e && !e.isDie && e.owner.event(be.Tower_Be_fire, this.data.lv)
            }
        }
        class Ii extends XTowerScript {
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize * 1.5;
                return a * a
            }
        }
        class XBedScript extends XBuildingScript {
            onAwake() {
                super.onAwake(), fx.EventCenter.I.on(XEventNames.E_Bed_Up, this, this.onPlayerGotoBed), fx.EventCenter.I.on(XEventNames.E_Bed_Down, this, this.onPlayerDownBed)
            }
            upgrade() {
                this.cfg = t.buildingMgr.getBuildCfg(this.data.id, this.data.lv), this.imgBody.skin = this.cfg.icon, this.initEffects()
            }
            onPlayerGotoBed(i, s) {
                if (!i || i != this.data) return;
                let a = t.gameMgr.playTime,
                    n = t.mapMgr.getRoomById(i.roomId),
                    r = 0,
                    o = 0;
                for (const i of n.buildings) {
                    let s = t.buildingMgr.getBuildCfg(i.id);
                    if (s.effectList)
                        for (const t of s.effectList)
                            if (t.type == e.EffectType.Add_Coin) r += t.value[0] * a;
                            else if (t.type == e.EffectType.Add_Energy) {
                        let e = t.value[1] ? t.value[1] : 1;
                        o += Math.floor(t.value[0] * a / e)
                    }
                }
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, r, o);
                for (const e of this.effects) e.data.playerUuid = i.playerUuid;
                this.handcart && (this.handcart.visible = !0), i.playerUuid = s, 0 == this.effects.length && this.initEffects(), t.gameMgr.playSound(this.data, 124)
            }
            onPlayerDownBed(e, t) {
                e === this.data.playerUuid && (this.data.isUsed = !1, this.data.playerUuid = void 0, this.clearEffects())
            }
            onDestroy() {
                super.onDestroy(), this.bedHead && this.bedHead.destroy()
            }
            onWork() {
                if ((this.data.playerUuid || this.bedHead) && !this.onHitting && (this.onHitting = !0, this.node.scale(1, 1), (new fx.Sequence).scaleOut(1.025, 100).scaleIn(.975, 200).scaleOut(1, 100).exec(Laya.Handler.create(this, () => {
                        this.node.scale(1, 1), this.onHitting = !1
                    })).run(this.node), this.bedHead && (this.bedHead.scale(1, 1), (new fx.Sequence).scaleOut(1.025, 100).scaleIn(.975, 200).scaleOut(1, 100).exec(Laya.Handler.create(this, () => {
                        this.bedHead.scale(1, 1)
                    })).run(this.bedHead)), this.data.playerUuid)) {
                    let e = t.playerMgr.getPlayer(this.data.playerUuid).owner;
                    e.scale(1, 1), (new fx.Sequence).scaleOut(1.025, 100).scaleIn(.975, 200).scaleOut(1, 100).exec(Laya.Handler.create(this, () => {
                        e.scale(1, 1)
                    })).run(e)
                }
            }
            createZhiren() {}
        }
        class XBingdongTowerScript extends XTowerScript {
            constructor() {
                super(...arguments), this.atkCnt = 0
            }
            fire(i) {
                let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!s) return;
                s.rotation = this.node.rotation, s.x = this.node.x, s.y = this.node.y;
                let a = s.getComponent(XBulletScript);
                a && a.destroy();
                let n = this.cfg.bulletType,
                    r = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    o = i ? new fx.V2(i.owner.x - s.x, i.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = i;
                let l, h = this.cfg.atkDamage * this.getDamageMult();
                this.atkCnt++, this.atkCnt >= 15 && (this.atkCnt -= 15, l = new Laya.Handler(this, this.freezeTarget)), n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, h, o, null, this.data, null, void 0, r, l) : a.shoot(this.cfg.bullet, h, o, i, this.data, null, void 0, r, l), this.playFireEff(), this.fireEvent()
            }
            freezeTarget(e) {
                if (e) {
                    let i = new Laya.Animation;
                    i.source = "res/atlas/res/Ani/freeze.atlas", i.interval = 200, EffectUtil.I.playAnimByTime(i, e.owner.x - 150, e.owner.y - 195, 2e3), t.gameMgr.DizzyTarget(e, 2.1, !1)
                }
            }
        }
        class XBorrowMoneyScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.interestMult = .005
            }
            onInit() {
                this.mult = 1, this.curBorrowMoney = 0, this.curHireMoney = 0;
                let e = t.mapMgr.getRoomById(this.data.roomId);
                this.doorModel = e.doorModel, fx.EventCenter.I.on(XEventNames.E_Hunter_Dead, this, this.onHunterDead)
            }
            onHunterDead(e) {
                e == this.curFighter && this.curBorrowMoney && this.refreshBorrowMoneyTime()
            }
            refreshBorrowMoneyTime() {
                this.curFighter = null, this.borrowMoneyTime = 60
            }
            loopTime() {
                if (this.curAmount) {
                    this.interestMult = this.interestMult < 50 ? 1.005 * this.interestMult : 50;
                    let e = (this.curBorrowMoney + this.curAmount * this.interestMult).toFixed(1);
                    this.curBorrowMoney = Number(e);
                    let t = (this.curAmount * this.interestMult / 2 + this.curHireMoney).toFixed(1);
                    this.curHireMoney = Number(t)
                }
                this.borrowMoneyTime && (this.borrowMoneyTime -= 1, this.borrowMoneyTime <= 0 && !this.curFighter && (this.borrowMoneyTime = 0, this.createFighter()))
            }
            getBorrowAmount() {
                let e = t.buildingMgr.getBuildCfg(this.doorModel.id, this.doorModel.lv + 1);
                return e || (e = t.buildingMgr.getBuildCfg(this.doorModel.id, this.doorModel.lv)), e.coin * this.mult
            }
            repayMoney() {
                let i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = i.coin;
                if (s >= this.curBorrowMoney) {
                    return t.playerMgr.changePlayerIncomeByUuid(i.uuid, -this.curBorrowMoney) && t.gameUI.valueTips(e.TokenType.E_Coin, -this.curBorrowMoney, this.node.x, this.node.y), this.curAmount = 0, this.mult += 1, this.borrowMoneyTime = 0, this.curBorrowMoney = 0, this.curHireMoney = 0, XToast.show("已还清！已提升借款额度"), this.imgBody.timer.clear(this, this.loopTime), this.curFighter && (this.curFighter.isBack = !0, this.curFighter = null), !0
                } {
                    let a = (this.curBorrowMoney - s).toFixed(1);
                    return this.curBorrowMoney = Number(a), t.playerMgr.changePlayerIncomeByUuid(i.uuid, -s) && t.gameUI.valueTips(e.TokenType.E_Coin, -s, this.node.x, this.node.y), XToast.show("未还清！请继续还款"), !1
                }
            }
            borrowMoney() {
                let i = this.getBorrowAmount();
                this.interestMult = .005, this.curAmount = i, this.curBorrowMoney = i, this.curHireMoney = i, this.borrowMoneyTime = 60;
                let s = t.playerMgr.getPlayer(this.data.playerUuid);
                t.playerMgr.changePlayerIncomeByUuid(s.uuid, i) && t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y), this.imgBody.timerLoop(1e3, this, this.loopTime)
            }
            hireFighter() {
                let i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = i.coin;
                if (s >= this.curHireMoney) {
                    t.playerMgr.changePlayerIncomeByUuid(i.uuid, -s) && t.gameUI.valueTips(e.TokenType.E_Coin, -s, this.node.x, this.node.y), this.curHireFighter = this.curFighter, this.curFighter.ownerScript.changeSide(this.data.playerUuid), this.refreshBorrowMoneyTime(), XToast.show("收买成功！")
                } else XToast.show("元宝不足，快去升级床铺吧！")
            }
            createFighter() {
                let i = new XPlayerModel;
                i.isGhost = !0, i.uuid = fx.Utils.createUUID(), i.name = "讨债鬼";
                let s = t.playerMgr.hunters[0].lv;
                i.lv = s, s > 2 ? (i.curHp = i.maxHp = t.cfg.hunterCfg.hpList[s - 2], i.attackPower = t.cfg.hunterCfg.attackList[s - 2]) : 2 == s ? (i.curHp = i.maxHp = 400, i.attackPower = 4) : (i.curHp = i.maxHp = t.cfg.hunterCfg.hpList[0], i.attackPower = t.cfg.hunterCfg.attackList[0]), i.skinId = 90004, i.type = e.PlayerType.E_Hunter, this.curFighter = i, t.playerMgr.addFighter(i), XToast.show("鬼市钱庄已派出讨债鬼！")
            }
        }
        class XBoxMonsterScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.isClick = !1, this.monsterLv = 0, this.curClickNum = 0
            }
            onInit() {
                this.data.canHandle = !1, fx.EventCenter.I.on(XEventNames.E_Hunter_Dead, this, this.onHunterDead), this.imgBody.timerLoop(1e3, this, this.autoAddCoin), this.initOutDoorPos()
            }
            onHunterDead(e) {
                "宝箱怪" == e.name && (this.curClickNum = 0, this.monsterLv += 1, this.isOut = !1, this.isClick = !1, this.updateBox())
            }
            initOutDoorPos() {
                let e = t.mapMgr.getRoomById(this.data.roomId);
                if (!e) return;
                let i, s = e.doorPos,
                    a = e.doorRot;
                for (const e of t.mapMgr.rooms) {
                    if (this.getDoorPos(e, s)) {
                        s = e.doorPos, a = e.doorRot;
                        break
                    }
                }
                0 == a ? i = t.mapMgr.gridPosToMapPos(s.x + 1, s.y) : 90 == a ? i = t.mapMgr.gridPosToMapPos(s.x, s.y - 1) : 180 == a ? i = t.mapMgr.gridPosToMapPos(s.x - 1, s.y) : 270 == a && (i = t.mapMgr.gridPosToMapPos(s.x, s.y + 1)), this.outDoorPos = i
            }
            getDoorPos(e, i) {
                if (e.doorPos.x == i.x && e.doorPos.y == i.y) return !0;
                if (e.doorPosArr && e.doorPosArr.length)
                    for (const s of e.doorPosArr) {
                        let e = t.mapMgr.getRoomByGridPos(s.x, s.y);
                        return this.getDoorPos(e, i)
                    }
            }
            onClickOwner() {
                this.isOut ? XToast.show("宝箱是空的") : (this.isClick = !0, this.curClickNum < 30 && (this.curClickNum += 1), this.addCoin())
            }
            autoAddCoin() {
                this.isOut || (this.isClick ? this.isClick = !1 : this.curClickNum > 0 && (this.curClickNum -= 1), this.addCoin())
            }
            addCoin() {
                let i = t.gameMgr.playerDeadCnt,
                    s = Math.min(13, this.monsterLv + i),
                    a = 1 * Math.pow(2, s);
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, a) && (t.gameUI.valueTips(e.TokenType.E_Coin, a, this.node.x, this.node.y), this.onWork(), this.updateBox())
            }
            updateBox() {
                if (30 == this.curClickNum) this.isOut = !0, this.imgBody.skin = "res/build/specialBuild/baoxiang/box_7.png", this.startCreateBoxMonster();
                else {
                    let e = `res/build/specialBuild/baoxiang/box_${Math.max(1,Math.ceil(this.curClickNum/5))}.png`;
                    e != this.imgBody.skin && (this.imgBody.skin = e)
                }
            }
            startCreateBoxMonster() {
                let e = new Laya.Image("res/build/specialBuild/baoxiang/monster.png");
                e.anchorX = e.anchorY = .5, t.mapMgr.mapNode.addChild(e), e.pos(this.node.x, this.node.y);
                let i = t.playerMgr.player;
                if (!i) return;
                let s = i.roomId;
                if (!s) return;
                if (!t.mapMgr.getRoomById(s)) return;
                let a = this.outDoorPos,
                    n = (new fx.Sequence).to({
                        x: a.x,
                        y: a.y - 25
                    }, 1e3);
                e.scale(1.5, 1.5);
                let r = (new fx.Sequence).scaleOut(2, 500).scaleOut(1.5, 500).exec(new Laya.Handler(this, () => {
                    this.createBoxMonster(a), e.destroy()
                }));
                n.run(e), r.run(e)
            }
            createBoxMonster(i) {
                let s = new XPlayerModel;
                s.isGhost = !0, s.uuid = fx.Utils.createUUID(), s.name = "宝箱怪";
                let a = t.playerMgr.hunters[0].lv;
                s.lv = a, a > 2 ? (s.curHp = s.maxHp = t.cfg.hunterCfg.hpList[a - 2], s.attackPower = t.cfg.hunterCfg.attackList[a - 2]) : 2 == a ? (s.curHp = s.maxHp = 400, s.attackPower = 4) : (s.curHp = s.maxHp = t.cfg.hunterCfg.hpList[0], s.attackPower = t.cfg.hunterCfg.attackList[0]), s.skinId = 10001, s.type = e.PlayerType.E_Hunter, t.playerMgr.addBoxMonster(s, i)
            }
            initSkin() {
                this.skinNode.destroyChildren(), this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = .5, this.imgBody.anchorY = 1, this.imgBody.y += 40
            }
        }
        class XCatBedScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.curIdx = 1, this.idxArr = [1, 2, 3, 4], this.fsTime = 0, this.fireCd = 0
            }
            onInit() {
                switch (this.imgBody.timerLoop(1e3, this, this.autoAddCoin), this.data.id) {
                    case 5103:
                        this.initFanShen();
                        break;
                    case 5104:
                        this.initChongWu();
                        break;
                    case 5105:
                        break;
                    case 5106:
                        this.initXianYanBao()
                }
            }
            onUpdate() {
                if (super.onUpdate(), t.gameMgr.isPause) return;
                if (!this.updateBuildCd()) return;
                let e = fx.Utils.getFrameDelta();
                if (this.fireCd > 0 && (this.fireCd -= e, this.fireCd <= 0 && (this.fireCd = 0, this.img_bullet.visible = !0)), 5103 == this.data.id && (this.fsTime += e, this.fsTime >= 10))
                    if (this.fsTime = 0, "res/build/mine_fs1.png" == this.imgBody.skin) {
                        XRandomUtil.getNumberRandom(0, 1) >= .5 && (this.imgBody.skin = "res/build/mine_fs2.png", this.imgBody.timerOnce(500, this, this.fsToBack))
                    } else this.imgBody.skin = "res/build/mine_fs2.png", this.imgBody.timerOnce(500, this, this.fsToFront)
            }
            autoAddCoin() {
                this.addCoin()
            }
            addCoin() {
                let i = t.gameMgr.playerDeadCnt,
                    s = 1 * Math.pow(2, i);
                if (5103 == this.data.id && "res/build/mine_fs1.png" != this.imgBody.skin && (s *= 2), t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, s) && (t.gameUI.valueTips(e.TokenType.E_Coin, s, this.node.x, this.node.y), 5104 != this.data.id && this.onWork()), 5105 == this.data.id)
                    for (const i of t.playerMgr.players)
                        if (this.data.playerUuid != i.uuid && i.isBed && !i.isDie) {
                            t.playerMgr.changePlayerIncomeByUuid(i.uuid, s) && t.gameUI.valueTips(e.TokenType.E_Coin, s, i.bedModel.owner.x, i.bedModel.owner.y + C.GridHalfSize)
                        }
            }
            initEffects() {}
            onClickOwner() {
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, 1) && t.gameUI.valueTips(e.TokenType.E_Coin, 1, this.node.x, this.node.y), this.updateChongWu()
            }
            initChongWu() {
                this.data.canHandle = !1
            }
            updateChongWu() {
                this.curIdx++, this.curIdx > this.idxArr.length && (this.curIdx = 1), this.imgBody.skin = `res/build/mine_cw${this.curIdx}.png`
            }
            initFanShen() {}
            fsToBack() {
                this.imgBody.skin = "res/build/mine_fs3.png"
            }
            fsToFront() {
                this.imgBody.skin = "res/build/mine_fs1.png"
            }
            initXianYanBao() {
                let e = t.mapMgr.getRoomById(this.data.roomId);
                e.doorModel && e.doorModel.owner && e.doorModel.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit), this.initBullet()
            }
            initBullet() {
                let e = new Laya.Image("res/build/bullet_xyb.png");
                this.img_bullet = e, e.anchorX = e.anchorY = .5, this.imgBody.addChild(this.img_bullet), this.img_bullet.centerX = this.img_bullet.centerY = 0
            }
            onDoorBeHit(e) {
                t.mapMgr.getRoomById(this.data.roomId).doorModel.hpPercent <= .3 && 0 == this.fireCd && (this.fire(e), this.img_bullet.visible = !1, this.fireCd = 60)
            }
            fire(i) {
                let s = "res/bullet/cat_xyb_bullet.png",
                    a = t.bulletMgr.createBulletNode(s);
                if (!a) return;
                a.rotation = this.node.rotation, a.x = this.node.x, a.y = this.node.y;
                let n = a.getComponent(XBulletScript);
                n && n.destroy();
                let r = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    o = i ? new fx.V2(i.owner.x - a.x, i.owner.y - a.y) : new fx.V2(Math.cos((a.rotation - 90) * Math.PI / 180), Math.sin((a.rotation - 90) * Math.PI / 180));
                o.normalize(), (n = a.addComponent(XBulletScript)).lockTarget = i;
                let l = .1 * i.maxHp;
                n.shoot(s, l, o, i, this.data, null, void 0, r, null, !0)
            }
        }
        class Ei extends XTowerScript {
            initSkin() {
                super.initSkin(), this.imgBody.scale(1.3, 1.3)
            }
            playFireEff() {
                (new fx.Sequence).scaleOut(1.4, 50).scaleIn(1.2, 100).scaleOut(1.3, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1.3, 1.3)
                })).run(this.imgBody)
            }
            getDamageMult() {
                return 1.5
            }
        }
        class XDoorGuardTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            onInit() {
                this.node.zOrder = 9998, this.initX = this.node.x, this.initY = this.node.y;
                let i = t.buildingMgr.getRoom(this.data.roomId);
                if (i)
                    for (const t of i.buildings)
                        if (t.type == e.BuildType.door) {
                            this.door = t;
                            break
                        }
                this.door && !this.door.isDie && this.door.owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit), this.data.owner.timerLoop(100, this, this.timeLoop)
            }
            onDoorBeHit(e, t) {
                this.atkTarget || (this.lastAtkTime = this.owner.timer.currTimer), this.atkTarget = e
            }
            timeLoop() {
                let e = this.atkTarget;
                e && this.door && this.door.owner && (Math.abs(this.door.owner.x - e.owner.x) > 150 || Math.abs(this.door.owner.y - e.owner.y) > 150) && (this.atkTarget = null)
            }
            getAtkCD() {
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getFollowDstSqu() {
                let e = 3 * C.GridSize;
                return e * e
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.door && this.door.isDie) return;
                if (this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || this.atkTarget && e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            tryAttack() {
                this.data.isDizzy ? this.isWork = !1 : (this.fire(), this.isWork = !0)
            }
            fire() {
                if (this.atkTarget.isDie || !this.atkTarget.owner || this.atkTarget.owner.destroyed) return;
                let e = this.atkTarget,
                    i = .03 * this.atkTarget.maxHp;
                (new fx.Sequence).moveToTarget(this.atkTarget.owner, 300, fx.V2.ZERO).exec(new Laya.Handler(this, () => {
                    t.gameMgr.takeDamage(this.data, e, i)
                })).to({
                    x: this.initX,
                    y: this.initY
                }, 300).run(this.node)
            }
        }
        class XDoorkeeperScript extends XBuildingScript {
            onInit() {
                let e = t.mapMgr.getRoomById(this.data.roomId);
                if (e.doorModel && !e.doorModel.isDie) {
                    e.doorModel.doorkeeper = this.data;
                    let t = e.doorModel.maxHp;
                    this.data.curHp = t, this.data.maxHp = t
                }
                this.createHealthBar()
            }
            createHealthBar() {
                let e = fx.Utils.createPrefab(T.Prefab_HealthBar);
                this.node.addChild(e), e.zOrder = 100, this.healthBar = e.addComponent(wt), this.healthBar.init(this.data), e.y = -C.GridHalfSize
            }
            onDestroy() {
                let e = t.mapMgr.getRoomById(this.data.roomId);
                e.doorModel && !e.doorModel.isDie && (e.doorModel.doorkeeper = null)
            }
        }
        class XDoorScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.open = !1
            }
            get moveMod() {
                let e = Math.abs(this.data.rotation);
                return 0 == e || 180 == e
            }
            initSkin() {
                this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5, this.originX = this.node.x, this.originY = this.node.y, this.data.isOpen && this.openDoor(), this.img_doorEff_1 = new Laya.Image("res/build/doorEff_1.png"), this.skinNode.addChild(this.img_doorEff_1), this.img_doorEff_1.anchorX = this.imgBody.anchorY = .5, this.img_doorEff_1.pos(0, -45), this.img_doorEff_1.visible = !1, this.img_doorEff_2 = new Laya.Image("res/build/doorEff_2.png"), this.skinNode.addChild(this.img_doorEff_2), this.img_doorEff_2.anchorX = this.imgBody.anchorY = .5, this.img_doorEff_2.pos(0, -45), this.img_doorEff_2.visible = !1
            }
            onInit() {
                this.createHealthBar(), Laya.timer.clear(this, this.timerloop), Laya.timer.loop(1e3, this, this.timerloop)
            }
            onDestroy() {
                Laya.timer.clear(this, this.timerloop)
            }
            timerloop() {
                if (this.updateBuildCd() && this.map)
                    if (this.isInStage()) {
                        if (this.data.curHp != this.data.maxHp) {
                            let e = this.data.curHp;
                            e += this.data.maxHp * this.data.lv * .01, this.data.curHp = Math.min(e, this.data.maxHp), this.healthBar.updateHealth()
                        }
                    } else this.node.visible = !1
            }
            openDoor() {
                !this.open && this.data.canHandle && (this.open = !0, Laya.Tween.clearAll(this.node), this.node.clearTimer(this, this.checkAutoClose), this.node.timerOnce(3e3, this, this.checkAutoClose), this.moveMod ? Laya.Tween.to(this.node, {
                    x: this.originX + C.GridSize
                }, 300, null, null, 0, !0) : Laya.Tween.to(this.node, {
                    y: this.originY + C.GridSize
                }, 300, null, null, 0, !0))
            }
            closeDoor() {
                if (!this.data.canHandle) return;
                if (!this.open) return;
                this.open = !1, Laya.Tween.clearAll(this.node), this.node.clearTimer(this, this.checkAutoClose), this.moveMod ? Laya.Tween.to(this.node, {
                    x: this.originX
                }, 300, null, null, 0, !0) : Laya.Tween.to(this.node, {
                    y: this.originY
                }, 300, null, null, 0, !0);
                let i = t.playerMgr.player,
                    s = t.playerMgr.hunters,
                    a = [i];
                t.gameMgr.gameStatus == e.GameStatus.E_GAME_START && (a = a.concat(s));
                for (const i of a) {
                    let s = new fx.V2(i.owner.x, i.owner.y),
                        a = new fx.V2(this.originX, this.originY);
                    if (s.distanceSq(a) < 11236 && -1 != i.roomId && t.gameMgr.mineRoom) {
                        let n = t.gameMgr.mineRoom.doorPos,
                            r = t.buildingMgr.getIndoorEmptyGrids(n.x, n.y);
                        i.type == e.PlayerType.E_Hunter && (r = t.buildingMgr.getOutdoorEmptyGrids(n.x, n.y));
                        let o = r.length - 1;
                        if (o >= 0) {
                            let e = 1 / 0,
                                l = 0;
                            a.from(n);
                            let h = t.mapMgr.gridPosToMapPos(a.x, a.y);
                            for (; o--;) {
                                s.from(r[o]);
                                let i = t.mapMgr.gridPosToMapPos(s.x, s.y).distanceSq(h);
                                i < e && (s.x != n.x || s.y != n.y) && (e = i, l = o)
                            }
                            let d = t.mapMgr.gridPosToMapPos(r[l].x, r[l].y);
                            i.owner.pos(d.x, d.y), i.uuid == t.playerMgr.mineUuid && fx.EventCenter.I.event(XEventNames.E_Look_Player, i)
                        }
                    }
                }
            }
            checkAutoClose() {
                t.gameMgr.isRoomBedUsed(this.data.roomId) && t.buildingMgr.closeDoorByGridPos(this.data.x, this.data.y)
            }
            createHealthBar() {
                let e = fx.Utils.createPrefab(T.Prefab_HealthBar);
                this.node.addChild(e), e.zOrder = 100, this.healthBar = e.addComponent(wt), this.healthBar.init(this.data), e.y = -C.GridHalfSize
            }
            showDoorEff_1() {
                this.img_doorEff_1.visible = !0
            }
            hideDoorEff_1() {
                this.img_doorEff_1.visible = !1
            }
            showDoorEff_2() {
                this.img_doorEff_2.visible = !0
            }
            hideDoorEff_2() {
                this.img_doorEff_2.visible = !1
            }
            showHuiFuEff() {
                let e = "res/atlas/res/Ani/huifu.atlas";
                Laya.loader.getRes(e) ? this.playAni(e, -15, -C.GridSize / 2) : Laya.loader.load(e, Laya.Handler.create(this, () => {
                    this.skinNode.destroyed || this.playAni(e, -15, -C.GridSize / 2)
                }))
            }
            playAni(e, t, i) {
                let s = new Laya.Animation;
                s.loadAtlas(e), s.play(0, !1);
                let a = s.getGraphicBounds(!0);
                s.pivot(a.width / 2, a.height / 2), this.skinNode.addChild(s), s.pos(t, i), s.on(Laya.Event.COMPLETE, this, () => {
                    s.offAll(), s.destroy()
                })
            }
        }
        class XEatMosquitoScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.flameArr = [], this.dir = new fx.V2(0, -1), this.temp = new fx.V2(0, 0)
            }
            onInit() {
                this.cnt = 0, this.updateStatus(), this.attackImg = new Laya.Image("res/build/skillBuild/fox_hand.png"), this.attackImg.anchorX = .5, this.skinNode.addChild(this.attackImg), this.attackImg.pos(15, 5), this.attackImg.sizeGrid = "2,0,27,0", this.attackImg.visible = !1
            }
            updateStatus() {
                this.node.timerOnce(5e3, this, this.createCoin)
            }
            createCoin() {
                this.cnt++, this.cnt > 10 && (this.cnt = 1), this.createFlame(), this.eatCnt = 0, this.startTime = t.gameTime.now
            }
            createFlame() {
                let e = "res/build/skillBuild/skillEff/foxFire.atlas";
                for (let t = 0; t < this.cnt; t++) {
                    let t = this.getRandomNum(),
                        i = this.getRandomNum();
                    Laya.loader.getRes(e) ? this.loadAnimAndPlay(e, t, i) : Laya.loader.load(e, Laya.Handler.create(this, () => {
                        this.destroyed || this.loadAnimAndPlay(e, t, i)
                    }))
                }
            }
            loadAnimAndPlay(e, t, i) {
                let s = new Laya.Animation;
                s.loadAtlas(e), s.play(0, !1);
                let a = s.getGraphicBounds(!0);
                s.pivot(a.width / 2, a.height / 2), this.playAnim(s, t, i), this.flameArr.push(s)
            }
            playAnim(e, t, i, s = !0, a) {
                this.aniNode.addChild(e), e.pos(t, i), e.play(0, s), s || e.on(Laya.Event.COMPLETE, this, () => {
                    e.offAll(), e.destroy(), a && a.run()
                })
            }
            getRandomNum() {
                return 10 * Math.floor(9 * XRandomUtil.random())
            }
            onUpdate() {
                if (super.onUpdate(), this.updateBuildCd() && !this.data.palsyTime && (this.cnt || this.eatCnt) && this.cnt != this.eatCnt && t.gameTime.now - this.startTime > 800 && this.flameArr.length) {
                    let e = this.flameArr.splice(0, 1)[0];
                    this.startTime = t.gameTime.now;
                    let i = Math.min(700 / (this.cnt - this.eatCnt), 500);
                    this.attackImg.visible = !0, this.temp.setValue(e.x - C.GridHalfSize, e.y - C.GridHalfSize);
                    let s = this.temp.len();
                    XV2Util01.faceTo(this.attackImg, this.temp.x, this.temp.y, -90), (new fx.Sequence).to({
                        height: s
                    }, i / 2).exec(new Laya.Handler(this, () => {
                        e.destroy()
                    })).to({
                        height: 10
                    }, i / 2).exec(new Laya.Handler(this, () => {
                        this.attackImg.visible = !1, this.eatCnt++, this.eatCnt == this.cnt && (this.node.event(be.AddCoin_By_Cnt, this.eatCnt), this.updateStatus())
                    })).run(this.attackImg)
                }
            }
        }
        class Ni extends Laya.Script {
            constructor() {
                super(), this.anchorCenter = !0, this.scaleX = .88, this.scaleY = .88
            }
            onAwake() {
                let e = this.owner;
                this.anchorCenter && fx.Utils.resetAnchor(e, .5, .5), fx.Effect.btnScaleEff(this.owner, {
                    x: this.scaleX,
                    y: this.scaleY
                }), e.on(Laya.Event.MOUSE_DOWN, this.owner, this.onClicked)
            }
            onClicked() {
                let e = this.soundId;
                e ? XChoreUtil.playSound(e) : 0 != e && XChoreUtil.playSound(4)
            }
        }
        class EnticeScript extends XBuildingScript {
            onInit() {
                this.cdNode = fx.Utils.createPrefab(T.Prefab_SkillCD);
                let e = this.cdNode.getChildByName("img_building");
                this.panel_bar = e.getChildByName("panel_bar"), this.panel_bar.width = .001, t.mapMgr.buildCdLayer.addChild(this.cdNode);
                let i = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                this.cdNode.pos(i.x, i.y), this.cdNode.visible = !1, this.btn_entice = new Laya.Image("res/game/entice.png"), this.btn_entice.anchorX = this.btn_entice.anchorY = .5, t.gameUI.gameNode.addChild(this.btn_entice), this.btn_entice.addComponent(Ni), this.btn_entice.visible = !1, this.data.playerUuid == t.playerMgr.mineUuid && this.btn_entice.on(Laya.Event.CLICK, this, this.onClickBtn), this.updateBtnPos()
            }
            onClickBtn() {
                if (this.data.palsyTime) return;
                if (this.isCd) return void XToast.show("冷却中");
                let e = t.playerMgr.hunters[0];
                e && e.ownerScript.isEscaped ? XToast.show("噬魂者正在逃跑，无法引诱") : (e.isEntice = !0, e.ownerScript.setCurTarget(null), this.isCd = !0, this.curTime = 60, this.cdNode.visible = !0, this.btn_entice.visible = !1)
            }
            onUpdate() {
                super.onUpdate(), t.gameMgr.isPause || this.updateBuildCd() && this.btn_entice && this.data.playerUuid == t.playerMgr.mineUuid && (this.updateBtnPos(), this.isCd ? (this.curTime -= fx.Utils.getFrameDelta(.033), this.panel_bar.width = (60 - this.curTime) / 60 * 89, this.curTime <= 0 && (this.isCd = !1, this.cdNode.visible = !1, this.btn_entice.visible = !0)) : this.btn_entice.visible || (this.btn_entice.visible = !0))
            }
            updateBtnPos() {
                let e = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y),
                    i = t.mapMgr.mapPosToStagePos(e.x, e.y);
                this.btn_entice.pos(i.x, i.y + 20)
            }
            onDestroy() {
                super.onDestroy(), this.cdNode && this.cdNode.destroy(), this.btn_entice && this.btn_entice.destroy()
            }
        }
        class XBulletRotScript extends XBulletScript {
            constructor() {
                super(...arguments), this.subBullet = [], this.unlimitedRange = !1
            }
            onUpdate() {
                if (!this.isActive) return;
                if (this.curRot += 2, this.curRot >= 360) return this.recover(), void this.owner.event(be.FlyCutter_End);
                let e = this.rot + this.curRot;
                e > 360 && (e -= 360), this.node.rotation += 10;
                let t = Math.cos(Math.rad(e)) * this.length,
                    i = Math.sin(Math.rad(e)) * this.length;
                this.node.pos(this.centerPos.x + t, this.centerPos.y + i)
            }
            shoot(e, i, s, a, n, r, o, l) {
                this.bulletKey = e, this.attack = i, this.centerPos = new fx.V2(s.x, s.y), this.target = a, this.baseModel = n;
                for (let e of t.playerMgr.defenders) n.playerUuid == e.uuid && (this.fromModel = e);
                this.node = this.owner;
                let h = new fx.V2(this.node.x, this.node.y).subOut(this.centerPos);
                this.length = h.len();
                let d = Math.atan2(h.y, h.x) * (180 / Math.PI);
                d > 360 ? d -= 360 : d < 0 && (d += 360), this.rot = d, this.curRot = 0, this.isActive = !0, this.originPos = new fx.V2(this.node.x, this.node.y), r || o || (this.initBody(l), this.node.on(Laya.Event.TRIGGER_ENTER, this, this.onCollision))
            }
            onCollision(e) {
                if (!this.isActive) return;
                let i, s = e.owner;
                s.destroyed || ((i = s.getComponent(XHunterScript)) || (i = s.getComponent(XFighterScript)), i && !i.data.isDie && (this.removeBody(), t.gameMgr.takeDamage(this.baseModel, i.data, this.attack), this.owner.event(be.FlyCutter_Be_Hit)))
            }
        }
        class XFlyCutterScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.centerPos = new fx.V2, this.fireCnt = 0
            }
            onAwake() {
                super.onAwake()
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && this.tryAttack()
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return;
                let e = this.findTarget();
                if (e)
                    if (this.atkTarget = e, this.centerPos.setValue((e.owner.x + this.data.owner.x) / 2, (e.owner.y + this.data.owner.y) / 2), this.hitCnt = 0, this.fireCnt = 0, 3008 == this.data.id) this.fireCnt = 1, this.fire();
                    else {
                        this.fireCnt = 3, this.fire(), (new fx.Sequence).delay(300).exec(new Laya.Handler(this, this.fire)).delay(300).exec(new Laya.Handler(this, this.fire)).run(this.node)
                    }
            }
            fire() {
                let i = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!i) return;
                i.rotation = this.node.rotation, i.x = this.node.x, i.y = this.node.y;
                let s = i.getComponent(XBulletRotScript);
                s && s.destroy();
                let a = {
                    category: e.CollideGroupType.BULLET,
                    mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                };
                s = i.addComponent(XBulletRotScript), i.off(be.FlyCutter_Be_Hit, this, this.onFlyCutterBeHit), i.off(be.FlyCutter_End, this, this.onFlyCutterEnd), i.once(be.FlyCutter_Be_Hit, this, this.onFlyCutterBeHit), i.once(be.FlyCutter_End, this, this.onFlyCutterEnd), s.shoot(this.cfg.bullet, .02 * this.atkTarget.maxHp, this.centerPos, null, this.data, null, void 0, a), this.canAttack = !1
            }
            onFlyCutterBeHit() {
                this.hitCnt += 1
            }
            onFlyCutterEnd() {
                if (this.lastAtkTime = this.owner.timer.currTimer, this.fireCnt--, 0 == this.fireCnt) {
                    if (this.lastAtkTime = this.owner.timer.currTimer, this.canAttack = !0, this.hitCnt) {
                        let i = t.playerMgr.getPlayer(this.data.playerUuid);
                        if (i.bedModel) {
                            let s = i.bedModel,
                                a = t.buildingMgr.getBuildCfg(s.id, s.lv),
                                n = Math.ceil(5 * this.hitCnt * a.effectList[0].value[0]);
                            t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, n) && t.gameUI.valueTips(e.TokenType.E_Coin, n, this.node.x, this.node.y)
                        }
                    }
                    this.hitCnt = 0
                }
            }
        }
        class XFollowSpringTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            onInit() {
                this.initX = this.node.x, this.initY = this.node.y
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || (e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack()), this.followTarget())
            }
            getFollowSqu() {
                let e = 18 * C.GridSize;
                return e * e
            }
            followTarget() {
                if (this.isAtking) return;
                let e = this.getHunters();
                if (e && e.length) {
                    let t = e[0],
                        i = XV2Util01.pDistanceSquared(t.owner, {
                            x: this.initX,
                            y: this.initY
                        }),
                        s = this.getAtkDstSqu();
                    if (this.getFollowSqu() > i)
                        if (s > i) this.v2.setValue(this.initX, this.initY), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y);
                        else {
                            XV2Util01.pDistanceSquared(t.owner, this.node) > s / 4 && (this.v2.setValue(t.owner.x, t.owner.y), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y))
                        } else this.v2.setValue(this.initX, this.initY), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y)
                }
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, {
                        x: this.node.x,
                        y: this.node.y
                    });
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, this.fire(), this.isWork = !0) : this.isWork = !1
            }
            fire() {
                let i = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!i) return;
                i.rotation = this.node.rotation, i.x = this.node.x, i.y = this.node.y;
                let s = i.getComponent(XBulletScript);
                s && s.destroy();
                let a = this.cfg.bulletType,
                    n = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    r = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - i.x, this.atkTarget.owner.y - i.y) : new fx.V2(Math.cos((i.rotation - 90) * Math.PI / 180), Math.sin((i.rotation - 90) * Math.PI / 180));
                r.normalize(), (s = i.addComponent(XBulletScript)).lockTarget = this.atkTarget, a == e.BulletType.Normal ? s.shoot(this.cfg.bullet, .3 * this.atkTarget.attackPower, r, null, this.data, null, void 0, n) : s.shoot(this.cfg.bullet, .3 * this.atkTarget.attackPower, r, this.atkTarget, this.data, null, void 0, n)
            }
        }
        class Oi extends Laya.Script {
            constructor() {
                super(...arguments), this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            onAwake() {
                this.node = this.owner
            }
            onUpdate() {
                if (t.playerMgr.player) {
                    let e = t.playerMgr.player.owner;
                    this.v2.setValue(e.x, e.y), this.v2_1.setValue(this.node.x, this.node.y), this.v2.distanceSq(this.v2_1) < 1e4 && this.node.destroy()
                }
            }
        }
        class JiguangTowerScript extends XTowerScript {
            constructor() {
                super(...arguments), this.v2 = new fx.V2, this.v2_1 = new fx.V2, this.atkTime = 0
            }
            onInit() {
                this.initJiguang()
            }
            initJiguang() {
                this.imgNum = 1, this.img_laser = new Laya.Image("res/bullet/laser/1.png"), this.img_laser.anchorX = .5, this.img_laser.anchorY = 1, t.mapMgr.bulletLayer.addChild(this.img_laser), this.img_laser.pos(this.node.x, this.node.y)
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isChange) return;
                if (this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.changeLaserSkin(), this.data.palsyTime) return void(this.img_laser.visible = !1);
                this.img_laser.visible || (this.img_laser.visible = !0);
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || (this.faceToHunter(), e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack()))
            }
            changeLaserSkin() {
                this.imgNum += .2, this.imgNum >= 4 && (this.imgNum = 1);
                let e = `res/bullet/laser/${Math.floor(this.imgNum)}.png`;
                this.img_laser.skin = e
            }
            faceToHunter() {
                let e = this.getHunters()[0];
                if (e && !e.isDie) {
                    this.atkTime += fx.Utils.getFrameDelta(.033), this.atkTime >= 1 && (this.atkTime -= 1, t.gameMgr.takeDamage(this.data, e, .01 * e.maxHp)), XV2Util01.faceTo(this.node, e.owner.x, e.owner.y, 90), XV2Util01.faceTo(this.img_laser, e.owner.x, e.owner.y, 90), this.v2.setValue(e.owner.x, e.owner.y), this.v2_1.setValue(this.node.x, this.node.y);
                    let i = this.v2.distance(this.v2_1);
                    this.img_laser.height = i
                } else this.atkTime = 0
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTargets();
                if (e.length) {
                    this.atkTarget = e[0], this.addCoinByAtk();
                    for (const t of e) this.fire(t);
                    this.isWork = !0
                } else this.isWork = !1
            }
            onDestroy() {
                super.onDestroy(), this.img_laser && this.img_laser.destroy()
            }
        }
        class JisuTowerScript extends XTowerScript {
            constructor() {
                super(...arguments), this.curBuffTime = 0, this.curCdTime = 0
            }
            onInit() {
                this.cdNode = fx.Utils.createPrefab(T.Prefab_SkillCD);
                let e = this.cdNode.getChildByName("img_building");
                this.panel_bar = e.getChildByName("panel_bar"), this.panel_bar.width = .001, t.mapMgr.buildCdLayer.addChild(this.cdNode);
                let i = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                this.cdNode.pos(i.x, i.y), this.cdNode.visible = !1, this.btn_jiasu = new Laya.Image("res/game/img_jiasu.png"), this.btn_jiasu.anchorX = this.btn_jiasu.anchorY = .5, t.gameUI.gameNode.addChild(this.btn_jiasu), this.btn_jiasu.addComponent(Ni), this.btn_jiasu.visible = !1, this.data.playerUuid == t.playerMgr.mineUuid && this.btn_jiasu.on(Laya.Event.CLICK, this, this.onClickBtn), this.updateBtnPos()
            }
            onClickBtn() {
                this.data.palsyTime || (this.isCd ? XToast.show("冷却中") : (this.isBuff = !0, this.btn_jiasu.visible = !1, this.curBuffTime = 8))
            }
            onUpdate() {
                if (super.onUpdate(), !t.gameMgr.isPause && !this.isChange && !this.isBuildCd && this.canAttack && this.updateBuildCd() && this.btn_jiasu && this.data.playerUuid == t.playerMgr.mineUuid) {
                    if (this.updateBtnPos(), this.isBuff) return this.curBuffTime -= fx.Utils.getFrameDelta(.033), void(this.curBuffTime <= 0 && (this.isCd = !0, this.cdNode.visible = !0, this.curCdTime = 60, this.isBuff = !1));
                    this.isCd ? (this.curCdTime -= fx.Utils.getFrameDelta(.033), this.panel_bar.width = (60 - this.curCdTime) / 60 * 89, this.curCdTime <= 0 && (this.isCd = !1, this.cdNode.visible = !1, this.btn_jiasu.visible = !0)) : this.btn_jiasu.visible || (this.btn_jiasu.visible = !0)
                }
            }
            getDamageMult() {
                return this.isBuff ? .6 : .5
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == Ee.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return this.isBuff ? e /= 5 : e /= 3, 1e3 * (e = Math.max(.2, e))
            }
            updateBtnPos() {
                let e = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y),
                    i = t.mapMgr.mapPosToStagePos(e.x, e.y);
                this.btn_jiasu.pos(i.x, i.y + 20)
            }
            onDestroy() {
                super.onDestroy(), this.cdNode && this.cdNode.destroy(), this.btn_jiasu && this.btn_jiasu.destroy()
            }
        }
        class JuTowerScript extends XTowerScript {
            initSkin() {
                super.initSkin(), this.imgBody.scale(1.5, 1.5)
            }
            playFireEff() {
                (new fx.Sequence).scaleOut(1.6, 50).scaleIn(1.4, 100).scaleOut(1.5, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1.5, 1.5)
                })).run(this.imgBody)
            }
            getDamageMult() {
                return 1.9
            }
        }
        class XKnifeScript extends XBuildingScript {
            onInit() {
                let i = t.buildingMgr.getRoom(this.data.roomId);
                if (i)
                    for (const t of i.buildings)
                        if (t.type == e.BuildType.door) {
                            this.door = t;
                            break
                        }
                this.data.owner.timerLoop(100, this, this.timeLoop), this.cdNode = fx.Utils.createPrefab(T.Prefab_SkillCD);
                let s = this.cdNode.getChildByName("img_building");
                this.panel_bar = s.getChildByName("panel_bar"), this.panel_bar.width = .001, t.mapMgr.buildCdLayer.addChild(this.cdNode);
                let a = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                this.cdNode.pos(a.x, a.y), this.cdNode.visible = !1, this.btn_slash = new Laya.Image("res/game/slash.png"), this.btn_slash.anchorX = this.btn_slash.anchorY = .5, t.gameUI.gameNode.addChild(this.btn_slash), this.btn_slash.addComponent(Ni), this.btn_slash.visible = !1, this.data.playerUuid == t.playerMgr.mineUuid && this.btn_slash.on(Laya.Event.CLICK, this, this.onClickBtn), this.updateBtnPos()
            }
            timeLoop() {
                let e = t.playerMgr.hunters[0];
                e && this.door && this.door.owner && (Math.abs(this.door.owner.x - e.owner.x) < 2 * C.GridSize || Math.abs(this.door.owner.y - e.owner.y) < 2 * C.GridSize ? this.hunter = e : this.hunter && (this.hunter = null))
            }
            onClickBtn() {
                if (this.data.palsyTime) return;
                if (this.isCd) return void XToast.show("冷却中");
                this.hunter ? (this.isCd = !0, this.curTime = 60, this.cdNode.visible = !0, this.btn_slash.visible = !1, this.fire()) : t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? XToast.show("木头人太远了") : XToast.show("噬魂者太远了")
            }
            fire() {
                let i = .1,
                    s = "res/bullet/knife/1.png";
                this.data.isSuper && (i = .25, s = "res/bullet/knife/2.png");
                let a = this.hunter,
                    n = t.bulletMgr.createBulletNode(s);
                if (!n) return;
                n.rotation = this.node.rotation, n.x = this.node.x, n.y = this.node.y;
                let r = n.getComponent(XBulletScript);
                r && r.destroy();
                let o = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    l = a ? new fx.V2(a.owner.x - n.x, a.owner.y - n.y) : new fx.V2(Math.cos((n.rotation - 90) * Math.PI / 180), Math.sin((n.rotation - 90) * Math.PI / 180));
                l.normalize(), (r = n.addComponent(XBulletScript)).lockTarget = a;
                let h = a.maxHp * i;
                r.shoot(s, h, l, a, this.data, null, void 0, o, null, !0)
            }
            onUpdate() {
                super.onUpdate(), t.gameMgr.isPause || this.updateBuildCd() && this.btn_slash && this.data.playerUuid == t.playerMgr.mineUuid && (this.updateBtnPos(), this.isCd ? (this.curTime -= fx.Utils.getFrameDelta(.033), this.panel_bar.width = (60 - this.curTime) / 60 * 89, this.curTime <= 0 && (this.isCd = !1, this.cdNode.visible = !1, this.btn_slash.visible = !0)) : this.btn_slash.visible || (this.btn_slash.visible = !0))
            }
            updateBtnPos() {
                let e = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y),
                    i = t.mapMgr.mapPosToStagePos(e.x, e.y);
                this.btn_slash.pos(i.x, i.y + 20)
            }
            videoUpgrade() {
                this.data.superId = this.cfg.videoUpgradeIdArr[0], this.updateIcon()
            }
            upgrade() {
                super.upgrade(), this.updateIcon()
            }
            onDestroy() {
                super.onDestroy(), this.cdNode && this.cdNode.destroy(), this.btn_slash && this.btn_slash.destroy()
            }
            updateIcon() {
                let e = t.buildingMgr.superBuildCfg.get(this.data.superId);
                this.imgBody.skin = e.icon
            }
        }
        class Wi extends XBuildingScript {
            onInit() {
                if (t.gameMgr.gameMode == e.GameMode.E_Defense)
                    if (this.data.playerUuid == t.playerMgr.mineUuid) XAnalyticsUtil.useLevelItem("摇签盒"), t.gameMgr.randomCnt += 1;
                    else {
                        let e = t.playerMgr.getPlayer(this.data.playerUuid);
                        e && (e.randomCnt += 1)
                    } else {
                    let e = t.playerMgr.getPlayer(this.data.playerUuid);
                    e && (e.randomCnt += 1)
                }
                this.data.owner.timerOnce(1e3, this, this.randomBuild)
            }
            randomBuild() {
                if (4 == t.gameMgr.randomCnt) {
                    this.specialTower();
                    let e = this.data.x,
                        i = this.data.y;
                    return void t.buildingMgr.destroyBuilding(t.playerMgr.mineUuid, e, i, !1)
                }
                let e = "";
                if (1 == t.gameMgr.randomCnt && t.taskMgr.getInit()) e = "5000_2";
                else {
                    let i = t.cfg.magicBoxCfg.getList(),
                        s = [];
                    for (let e = 0; e < i.length; e++) {
                        let a = i[e].sid.split("_"),
                            n = Number(a[0]),
                            r = Number(a[1]),
                            o = t.buildingMgr.getBuildCfg(n, r),
                            l = !1;
                        if (o) {
                            if (o.maxCnt) {
                                let e = t.playerMgr.player,
                                    i = 0;
                                for (const t of e.buildings)
                                    if (t.id == o.buildId && ++i == o.maxCnt) {
                                        l = !0;
                                        break
                                    }
                            }
                        } else l = !0;
                        l || s.push({
                            o: i[e].sid,
                            weight: i[e].weight
                        })
                    }
                    for (;
                        "" == e;) e = fx.Utils.takeOneByWeight(s)[1].o
                }
                let i = e.split("_"),
                    s = Number(i[0]),
                    a = Number(i[1]),
                    n = t.buildingMgr.getBuildCfg(s, a);
                s = (n = this.checkVariant(n)).buildId;
                let r = this.data.x,
                    o = this.data.y;
                t.buildingMgr.destroyBuilding(t.playerMgr.mineUuid, r, o, !1), t.buildingMgr.buildFree(this.data.playerUuid, s, r, o, 0, a)
            }
            checkVariant(e) {
                if (e.variantList && XRandomUtil.getNumberRandom(0, 10) < 3) {
                    let i = [];
                    for (const t of e.variantList) i.push({
                        o: t.id,
                        weight: t.weight
                    });
                    let s = fx.Utils.takeOneByWeight(i)[1].o;
                    return t.buildingMgr.getBuildCfg(s)
                }
                return e
            }
            specialTower() {
                let e = t.mapMgr.getRoomById(this.data.roomId),
                    i = [];
                if (e.buildings && e.buildings.length) {
                    for (const t of e.buildings) t.isSpecial || 3e3 != t.id || i.push(t);
                    if (i.length) {
                        let e = t.user.gameInfo.getBuffData(20),
                            s = 2;
                        if (e) {
                            s = t.cfg.buffCfg.get(20).values[e.lv] / 100
                        }
                        let a = Math.min(s / i.length, 1);
                        s > 2 && (a = s / i.length), XToast.show(`当前所有炮台有${Math.round(100*a)}%几率变化底座`);
                        let n = 0;
                        for (const e of i)
                            if (XRandomUtil.getNumberRandom(0, 1) <= a) {
                                let i = t.buildingMgr.getSpecialTowerByWeight();
                                e.isSpecial = !0, e.specialId = i.id, console.log(`随机特殊炮台id---------${i.id}`), e.ownerScript.updateSpecial(), n++
                            }
                        t.gameMgr.showSpecialTip(n)
                    } else XToast.show("当前没有炮台")
                } else XToast.show("当前没有炮台")
            }
        }
        class Ki {
            from(e) {
                this.minX = e.minX, this.maxX = e.maxX, this.minY = e.minY, this.maxY = e.maxY
            }
            equal(e) {
                return this.minX == e.minX && this.maxX == e.maxX && this.minY == e.minY && this.maxY == e.maxY
            }
        }
        class XMapScript extends Laya.Script {
            constructor() {
                super(...arguments), this.displayGrounds = [], this.groundPool = [], this.buildTipsList = [], this.mowHideTipList = [], 
                this.upTipsList = [], this.doorTipsList = [], this.views = [], this.lookPos = new fx.V2, this.updateSign = !1
            }
            get node() {
                return this.owner
            }
            init() {
                this.groundLayer = this.owner.getChildByName("GroundLayer"), 
                this.lowLayer = this.owner.getChildByName("LowLayer"), 
                this.buildCdLayer = this.owner.getChildByName("BuildCdLayer"), 
                this.viewLayer = this.owner.getChildByName("ViewLayer"), 
                this.buildLayer = this.owner.getChildByName("BuildLayer"), 
                this.buildMoveLayer = this.owner.getChildByName("BuildMoveLayer"), 
                this.playerLayer = this.owner.getChildByName("PlayerLayer"), 
                this.bulletLayer = this.owner.getChildByName("BulletLayer"), 
                this.effectLayer = this.owner.getChildByName("EffectLayer"), 
                this.hunterLayer = this.owner.getChildByName("HunterLayer"), 
                this.petLayer = this.owner.getChildByName("PetLayer"), 
                this.barLayer = this.owner.getChildByName("BarLayer"), 
                this.fogLayer = this.owner.getChildByName("FogLayer"), 
                this.propLayer = this.owner.getChildByName("PropLayer"), 
                this.skillEffLayer = this.owner.getChildByName("SkillEffLayer"), 
                this.dropLayer = this.owner.getChildByName("DropLayer"), 
                this.gridSize = C.GridSize, 
                this.initViewLayer(), 
                this.initHealZoneEffects(), 
                t.mapMgr.groundLayer = this.groundLayer, 
                t.mapMgr.viewLayer = this.viewLayer, 
                t.mapMgr.buildLayer = this.buildLayer, 
                t.mapMgr.playerLayer = this.playerLayer, 
                t.mapMgr.bulletLayer = this.bulletLayer, 
                t.mapMgr.effectLayer = this.effectLayer, 
                t.mapMgr.hunterLayer = this.hunterLayer, 
                t.mapMgr.petLayer = this.petLayer,
                t.mapMgr.barLayer = this.barLayer, 
                t.mapMgr.fogLayer = this.fogLayer, 
                t.mapMgr.propLayer = this.propLayer, 
                t.mapMgr.skillEffLayer = this.skillEffLayer, 
                t.mapMgr.lowLayer = this.lowLayer, 
                t.mapMgr.buildCdLayer = this.buildCdLayer, 
                t.mapMgr.dropLayer = this.dropLayer, 
                t.mapMgr.buildMoveLayer = this.buildMoveLayer
            }
            initViewLayer() {
                let views = t.mapMgr.views;
                for (const view of views) {
                    let e = view.image,
                        s = new Laya.Image(e);
                    this.viewLayer.addChild(s);
                    let a = t.mapMgr.gridPosToMapPos(view.x, view.y);
                    a.x -= C.GridHalfSize, 
                    a.y -= C.GridHalfSize, 
                    s.pos(a.x, a.y), 
                    this.views[view.x] || (this.views[view.x] = []), 
                    this.views[view.x][view.y] = s
                }
            }
            hideRoomView(e) {
                let t = e.grids.concat(e.walls);
                for (const e of t) this.views[e.x] && this.views[e.x][e.y] && (this.views[e.x][e.y].visible = !1)
            }
            updateArea() {
                this.curRange || (this.displayGrounds = [], this.curRange = new Ki);
                let e = Math.max(0 - this.node.x, 0),
                    t = Math.max(0 - this.node.x + Laya.stage.width, 0),
                    i = Math.max(0 - this.node.y, 0),
                    s = Math.max(0 - this.node.y + Laya.stage.height, 0);
                this.curRange.minX = Math.floor(e / this.gridSize), this.curRange.maxX = Math.floor(t / this.gridSize), 
                this.curRange.minY = Math.floor(i / this.gridSize), this.curRange.maxY = Math.floor(s / this.gridSize), this.hideOutGround(), 
                this.showInGround(), 
                this.preRange || (this.preRange = new Ki), this.preRange.from(this.curRange)
            }
            hideOutGround() {
                if (this.preRange && !this.preRange.equal(this.curRange))
                    for (let e = this.preRange.minY; e <= this.preRange.maxY; ++e)
                        for (let t = this.preRange.minX; t <= this.preRange.maxX; ++t) 
                            !this.isGridPosInMap(e, t) && this.displayGrounds[e][t] && (this.recoverGroundImg(this.displayGrounds[e][t]), this.displayGrounds[e][t] = null)
            }
            updateGround(e, t) {
                this.displayGrounds[e][t] && (this.recoverGroundImg(this.displayGrounds[e][t]), this.displayGrounds[e][t] = null);
                let i = this.createGroundImg(e, t);
                i && (this.displayGrounds[e][t] = i)
            }
            showInGround() {
                for (let e = this.curRange.minY; e <= this.curRange.maxY; ++e) {
                    this.displayGrounds[e] || (this.displayGrounds[e] = []);
                    for (let t = this.curRange.minX; t <= this.curRange.maxX; ++t)
                        if (!this.displayGrounds[e][t]) {
                            let i = this.createGroundImg(e, t);
                            i && (this.displayGrounds[e][t] = i)
                        }
                }
            }
            isGridPosInMap(e, t) {
                return t >= this.curRange.minX && t <= this.curRange.maxX && e >= this.curRange.minY && e <= this.curRange.maxY
            }
            createGroundImg(e, i) {
                let s, a = t.mapMgr.getTiledInfo(e, i);
                if (a) {
                    if(this.groundPool.length > 0) {
                        s = this.groundPool.pop()
                    }else{
                        s = new Laya.Image
                        this.groundLayer.addChild(s)
                        s.size(this.gridSize + 1, this.gridSize + 1) 
                        s.anchorX = s.anchorY = .5
                    }
                    s && !s.destroyed || (s = new Laya.Image, this.groundLayer.addChild(s), s.size(this.gridSize + 1, this.gridSize + 1), s.anchorX = s.anchorY = .5)
                    s.visible = !0, 
                    s.pos((i + .5) * this.gridSize, (e + .5) * this.gridSize)
                    s.rotation = a.groundRot, 
                    s.name = a.groundBlock, 
                    s.skin = `res/map/${a.groundBlock}.png`
                }
                return s
            }
            recoverGroundImg(e) {
                e.visible = !1, this.groundPool.push(e)
            }
            initHealZoneEffects() {
                let e = t.mapMgr.healZones;
                for (const t of e) {
                    let e = new fx.V2(0, 0);
                    this.createHealZoneEffect(t.x + e.x, t.y + e.y)
                }
            }
            createHealZoneEffect(e, t, i) {
                let s = fx.Utils.createPrefab(T.Prefab_HealZoneEff);
                i && (s.name = i), this.effectLayer.addChild(s), s.pos(e, t), s._aniList[0].play(0, !0)
            }
            showBuildTips(e, t, i) {
                if (this.buildTipsList[e] || (this.buildTipsList[e] = []), this.buildTipsList[e][t]) {
                    let i = this.buildTipsList[e][t];
                    return i.visible = !0, void new fx.Sequence(null, !0).fadeIn(1e3).fadeOut(1e3).run(i)
                }
                let s;
                s = i ? new Laya.Image("res/game/capture_bg.png") : new Laya.Image("res/game/img_buildTips.png"), this.groundLayer.addChild(s), s.anchorX = s.anchorY = .5, s.pos((t + .5) * this.gridSize, (e + .5) * this.gridSize), s.alpha = 0, s.width = s.height = this.gridSize, new fx.Sequence(null, !0).to({
                    alpha: .9
                }, 1e3).fadeOut(1e3).run(s), this.buildTipsList[e][t] = s
            }
            hideBuildTips(e, t) {
                if (!this.buildTipsList[e] || !this.buildTipsList[e][t]) return;
                let i = this.buildTipsList[e][t];
                i.destroyed || (i.visible = !1, Laya.Tween.clearAll(i))
            }
            clearBuilTips(e, t) {
                this.buildTipsList[e] && this.buildTipsList[e][t] && (this.buildTipsList[e][t].destroy(), delete this.buildTipsList[e][t])
            }
            changeBuildTips(e, t) {
                if (!this.buildTipsList[e] || !this.buildTipsList[e][t]) {
                    let i = new Laya.Image("res/game/capture_bg.png");
                    return this.groundLayer.addChild(i), i.anchorX = i.anchorY = .5, i.pos((t + .5) * this.gridSize, (e + .5) * this.gridSize), i.alpha = 0, i.width = i.height = this.gridSize, new fx.Sequence(null, !0).to({
                        alpha: .9
                    }, 1e3).fadeOut(1e3).run(i), void(this.buildTipsList[e][t] = i)
                }
                this.buildTipsList[e][t].skin = "res/game/capture_bg.png"
            }
            hideAllBuildTips() {
                for (const e of t.mapMgr.rooms)
                    for (const t of e.grids) this.hideBuildTips(t.x, t.y)
            }
            clearHideTip(e, t) {
                this.mowHideTipList[e] && this.mowHideTipList[e][t] && this.mowHideTipList[e][t].destroy()
            }
            showUpTips(e, t, i = !0) {
                let s = i ? "res/game/img_upgradeTips.png" : "res/game/img_upgradeTips02.png",
                    a = i ? "res/game/img_up.png" : "res/game/img_up02.png";
                this.upTipsList[e] || (this.upTipsList[e] = []);
                let n, r, o = this.upTipsList[e][t];
                o ? (n = o.getChildAt(0), r = o.getChildAt(1)) : ((o = new Laya.Box).width = o.height = .01, o.anchorX = o.anchorY = .5, this.hunterLayer.addChild(o), o.pos((t + .5) * this.gridSize, (e + .5) * this.gridSize), (n = new Laya.Image(s)).visible = !1, n.width = n.height = C.GridSize, n.anchorX = n.anchorY = .5, o.addChild(n), (r = new Laya.Image(a)).anchorX = r.anchorY = .5, o.addChild(r), Laya.Tween.clearAll(n), n.alpha = 0, new fx.Sequence(null, !0).fadeIn(1e3).fadeOut(1e3).run(n), Laya.Tween.clearAll(r), r.y = 0, new fx.Sequence(null, !0).move(0, -16, 350).move(0, 16, 350).run(r), this.upTipsList[e][t] = o), o.visible || (o.visible = !0, Laya.Tween.clearAll(n), n.skin = s, n.alpha = 0, new fx.Sequence(null, !0).fadeIn(1e3).fadeOut(1e3).run(n), Laya.Tween.clearAll(r), r.y = 0, r.skin = a, new fx.Sequence(null, !0).move(0, -16, 350).move(0, 16, 350).run(r))
            }
            hideUpTips(e, t) {
                if (!this.upTipsList[e] || !this.upTipsList[e][t]) return;
                let i = this.upTipsList[e][t];
                if (i.destroyed) return;
                if (!i.visible) return;
                let s = i.getChildAt(0),
                    a = i.getChildAt(1);
                Laya.Tween.clearAll(s), Laya.Tween.clearAll(a), i.visible = !1
            }
            createDoorTips(e, t, i) {
                if (this.doorTipsList[e] || (this.doorTipsList[e] = []), this.doorTipsList[e][t]) return;
                let s = new Laya.Image("res/game/img_doorTips.png");
                this.buildLayer.addChild(s), s.rotation = i, s.anchorX = s.anchorY = .5, s.pos((t + .5) * this.gridSize, (e + .5) * this.gridSize), s.alpha = 0, new fx.Sequence(null, !0).fadeIn(1e3).fadeOut(1e3).run(s), this.doorTipsList[e][t] = s
            }
            removeDoorTips(e, t) {
                this.doorTipsList[e] && this.doorTipsList[e][t] && (this.doorTipsList[e][t].destroy(), delete this.doorTipsList[e][t])
            }
            lookAt(e, i) {
                let s = t.gameMgr.mapCfg.row,
                    a = t.gameMgr.mapCfg.column;
                e = Math.max(Laya.stage.width / 2 + 0 * C.GridSize, Math.min((s - 0) * C.GridSize - Laya.stage.width / 2, e)), i = Math.max(Laya.stage.height / 2 + 0 * C.GridSize, Math.min((a - 0) * C.GridSize - Laya.stage.height / 2, i)), this.lookPos.setValue(e, i), e = Laya.stage.width / 2 - e, i = Laya.stage.height / 2 - i, this.node.x = e, this.node.y = i
            }
            onUpdate() {
                this.updateSign && this.updateArea()
            }
            lookAtSmoothly(e, i, s = 200, a) {
                this.lookPos.setValue(e, i), 
                e = Laya.stage.width / 2 - e, 
                i = Laya.stage.height / 2 - i, 
                this.updateSign = !0, 
                t.gameMgr.inputScript.canHandle = !1, 
                Laya.Tween.to(this.node, {
                    x: e,
                    y: i
                }, s, null, Laya.Handler.create(this, () => {
                    this.updateArea(), this.updateSign = !1, a && a.run(), t.gameMgr.inputScript.canHandle = !0
                }))
            }
        }
        class XMiniTowerScript extends XTowerScript {
            initSkin() {
                super.initSkin(), this.imgBody.scale(.6, .6)
            }
            getDamageMult() {
                return .3
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == Ee.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return e /= 3, 1e3 * (e = Math.max(.2, e))
            }
            playFireEff() {
                (new fx.Sequence).scaleOut(.7, 50).scaleIn(.5, 100).scaleOut(.6, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(.6, .6)
                })).run(this.imgBody)
            }
        }
        class XMirrorScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.isUsingSkill = !1, this.isCanSkill = !1, this.buildTime = 90, this.skillTime = 5e3, this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            onInit() {
                this.bullet = new Laya.Image(this.cfg.bullet), this.bullet.anchorX = .5, this.bullet.anchorY = 1, t.mapMgr.bulletLayer.addChild(this.bullet), this.bullet.pos(this.node.x, this.node.y), this.atkTarget = this.getHunters()[0]
            }
            onUpdate() {
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.atkTarget) return;
                XV2Util01.faceTo(this.bullet, this.atkTarget.owner.x, this.atkTarget.owner.y, 90), this.v2.setValue(this.atkTarget.owner.x, this.atkTarget.owner.y), this.v2_1.setValue(this.node.x, this.node.y);
                let e = this.v2.distance(this.v2_1);
                this.bullet.height = e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
        }
        class XPoisonSpringTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.v2 = new fx.V2, this.v2_1 = new fx.V2, this.attackTime = 0, this.attackNum = 0
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, this.fire(), this.isWork = !0) : this.isWork = !1
            }
            fire() {
                let i = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!i) return;
                i.rotation = this.node.rotation, i.x = this.node.x, i.y = this.node.y;
                let s = i.getComponent(XBulletScript);
                s && s.destroy();
                let a, n = this.cfg.bulletType,
                    r = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    o = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - i.x, this.atkTarget.owner.y - i.y) : new fx.V2(Math.cos((i.rotation - 90) * Math.PI / 180), Math.sin((i.rotation - 90) * Math.PI / 180));
                o.normalize(), (s = i.addComponent(XBulletScript)).lockTarget = this.atkTarget, this.attackNum % 5 == 0 ? (a = .01 * this.atkTarget.maxHp, this.isPoisoned = !0) : this.attackTime + 5e3 >= this.owner.timer.currTimer ? (a = .003 * this.atkTarget.maxHp, this.isPoisoned = !1) : (a = .01 * this.atkTarget.maxHp, this.isPoisoned = !0), n == e.BulletType.Normal ? s.shoot(this.cfg.bullet, a, o, null, this.data, null, void 0, r) : s.shoot(this.cfg.bullet, a, o, this.atkTarget, this.data, null, void 0, r)
            }
        }
        class XQianjinTowerScript extends XTowerScript {
            addCoinByAtk() {
                let i = Math.round(.5 * this.cfg.atkDamage * .25);
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, i) && t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y)
            }
        }
        class XQianliTowerScript extends XTowerScript {
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize * 2;
                return a * a
            }
        }
        class XQuirkyTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.curNum = 180, this.isCoin = !1, this.isSuper = !1
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return this.isSuper && (e /= 3), 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            findTargets() {
                let e, t = [],
                    i = 1 / 0,
                    s = this.getAtkDstSqu(),
                    a = this.getHunters();
                for (const n of a) {
                    if (n.isDie) continue;
                    if (n.changeSideUuid == this.data.playerUuid) continue;
                    let a = n.owner;
                    if (!a || a.destroyed || this.node.destroyed) continue;
                    let r = XV2Util01.pDistanceSquared(a, this.node);
                    r <= s && (r < i ? (i = r, e = n, t.splice(0, 0, n)) : t.push(n))
                }
                return t.length > 1 && t.splice(1, t.length - 1), t
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTargets();
                if (e.length) {
                    this.atkTarget = e[0], XV2Util01.faceTo(this.node, this.atkTarget.owner.x, this.atkTarget.owner.y, 90);
                    for (const t of e) this.fire(t);
                    this.isWork = !0
                } else this.isWork = !1
            }
            fire(i) {
                let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!s) return;
                s.rotation = this.node.rotation, s.x = this.node.x, s.y = this.node.y;
                let a = s.getComponent(XBulletScript);
                a && a.destroy();
                let n = this.cfg.bulletType,
                    r = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    o = i ? new fx.V2(i.owner.x - s.x, i.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = i, n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, this.cfg.atkDamage, o, null, this.data, null, void 0, r) : a.shoot(this.cfg.bullet, this.cfg.atkDamage, o, i, this.data, null, void 0, r), (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody);
                let l = this.node.rotation,
                    h = this.getAtkCD();
                if ((new fx.Sequence).to({
                        rotation: l + this.curNum
                    }, h / 4).to({
                        rotation: l
                    }, h / 4).run(this.node), this.curNum *= -1, this.isCoin) {
                    let i = 2 * * (this.data.lv - 1);
                    i > 512 && (i = 512), t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, i) && t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y)
                }
            }
            videoUpgrade() {
                this.isCoin = !0, XRandomUtil.getNumberRandom(1, 11) <= 5 ? (this.isSuper = !0, this.data.superId = this.cfg.videoUpgradeIdArr[1]) : this.data.superId = this.cfg.videoUpgradeIdArr[0], this.updateIcon()
            }
            upgrade() {
                super.upgrade(), this.data.isSuper && this.updateIcon()
            }
            updateIcon() {
                let e = t.buildingMgr.superBuildCfg.get(this.data.superId);
                this.imgBody.skin = e.icon
            }
        }
        class XRabbitScript extends XBuildingScript {get moveMod() {
                let e = Math.abs(this.data.rotation);
                return 0 == e || 180 == e
            }
            initSkin() {
                this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5
            }
            onInit() {
                this.createHealthBar(), Laya.timer.clear(this, this.timerloop), Laya.timer.loop(1e3, this, this.timerloop)
            }
            onDestroy() {
                Laya.timer.clear(this, this.timerloop)
            }
            timerloop() {
                if (this.updateBuildCd() && this.map)
                    if (this.isInStage()) {
                        if (this.data.curHp != this.data.maxHp) {
                            let e = this.data.curHp;
                            e += this.data.maxHp * this.data.lv * .01, this.data.curHp = Math.min(e, this.data.maxHp), this.healthBar.updateHealth()
                        }
                    } else this.node.visible = !1
            }
            createHealthBar() {
                let e = fx.Utils.createPrefab(T.Prefab_HealthBar);
                this.node.addChild(e), e.zOrder = 100, this.healthBar = e.addComponent(wt), this.healthBar.init(this.data), e.y = -C.GridHalfSize
            }
        }
        class XShuangtouTowerScript extends XTowerScript {
            initSkin() {
                this.cfg.diIcon && (this.imgDi = new Laya.Image(this.cfg.diIcon), this.imgDi.anchorX = this.imgDi.anchorY = .5, this.skinNode.addChild(this.imgDi), this.imgDi.pos(0, 0)), this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5, this.imgBody.pos(-25, 0), this.imgBody_1 = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody_1), this.imgBody_1.anchorX = this.imgBody_1.anchorY = .5, this.imgBody_1.pos(25, 0), this.initEffects(), this.updateIcon()
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, XV2Util01.faceTo_1(this.node, this.imgDi, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody_1, e.owner.x, e.owner.y, 90), this.fire(), this.isWork = !0) : this.isWork = !1
            }
            fire() {
                for (let i = 0; i < 2; i++) {
                    let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                    if (!s) return;
                    0 == i ? (s.rotation = this.imgBody.rotation, s.x = this.node.x - 30) : (s.rotation = this.imgBody_1.rotation, s.x = this.node.x + 30), s.y = this.node.y;
                    let a = s.getComponent(XBulletScript);
                    a && a.destroy();
                    let n = this.cfg.bulletType,
                        r = {
                            category: e.CollideGroupType.BULLET,
                            mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                        },
                        o = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - s.x, this.atkTarget.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                    o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = this.atkTarget;
                    let l = .75 * this.cfg.atkDamage;
                    n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, l, o, null, this.data, null, void 0, r) : a.shoot(this.cfg.bullet, l, o, this.atkTarget, this.data, null, void 0, r)
                }(new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody), (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody_1.scale(1, 1)
                })).run(this.imgBody_1), this.fireEvent()
            }
        }
        class XSpringBoxScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.isUsedSkill = !1, this.isDouble = !1, this.isSuper = !1, this.v2 = new fx.V2
            }
            onInit() {
                let i = this.roomData = t.buildingMgr.getRoom(this.data.roomId);
                if (i)
                    for (const t of i.buildings)
                        if (t.type == e.BuildType.bed) {
                            this.bed = t;
                            break
                        }
                this.initOutDoorPos(), this.bedPos = new fx.V2(i.bedModelList[0].x, i.bedModelList[0].y), t.gameMgr.mapScript.changeBuildTips(this.bedPos.x, this.bedPos.y), this.cdNode = fx.Utils.createPrefab(T.Prefab_SkillCD);
                let s = this.cdNode.getChildByName("img_building");
                this.panel_bar = s.getChildByName("panel_bar"), this.panel_bar.width = .001, t.mapMgr.buildCdLayer.addChild(this.cdNode);
                let a = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                this.cdNode.pos(a.x, a.y), this.cdNode.visible = !1, this.skillBtn = new Laya.Image("res/game/out.png"), this.skillBtn.anchorX = this.skillBtn.anchorY = .5;
                let n = t.mapMgr.mapPosToStagePos(this.node.x, this.node.y - 25);
                t.gameUI.gameNode.addChild(this.skillBtn), this.skillBtn.pos(n.x, n.y + 50), this.skillBtn.addComponent(Ni), this.skillBtn.on(Laya.Event.CLICK, this, this.onClickSkill)
            }
            initOutDoorPos() {
                let e = t.mapMgr.getRoomById(this.data.roomId);
                if (!e) return;
                let i, s = e.doorPos,
                    a = e.doorRot;
                for (const e of t.mapMgr.rooms) {
                    if (this.getDoorPos(e, s)) {
                        s = e.doorPos, a = e.doorRot;
                        break
                    }
                }
                0 == a ? i = t.mapMgr.gridPosToMapPos(s.x + 1, s.y) : 90 == a ? i = t.mapMgr.gridPosToMapPos(s.x, s.y - 1) : 180 == a ? i = t.mapMgr.gridPosToMapPos(s.x - 1, s.y) : 270 == a && (i = t.mapMgr.gridPosToMapPos(s.x, s.y + 1)), this.outDoorPos = i
            }
            getDoorPos(e, i) {
                if (e.doorPos.x == i.x && e.doorPos.y == i.y) return !0;
                if (e.doorPosArr && e.doorPosArr.length)
                    for (const s of e.doorPosArr) {
                        let e = t.mapMgr.getRoomByGridPos(s.x, s.y);
                        return this.getDoorPos(e, i)
                    }
            }
            onClickSkill() {
                if (this.isTween) return;
                let e = this.outDoorPos,
                    i = t.mapMgr.gridPosToMapPos(this.bedPos.x, this.bedPos.y);
                if (this.isUsedSkill) {
                    this.skillBtn.skin = "res/game/out.png", t.playerMgr.player.isOutDoor = !1, this.isUsedSkill = !1, this.isCd = !0, this.curTime = 90, this.cdNode.visible = !0, this.skillBtn.visible = !1, XChoreUtil.playSound(133), (new fx.Sequence).to({
                        x: i.x,
                        y: i.y
                    }, 1e3).exec(new Laya.Handler(this, () => {
                        this.isTween = !1
                    })).run(this.roomData.bedModelList[0].owner), (new fx.Sequence).to({
                        x: i.x,
                        y: i.y
                    }, 1e3).run(this.roomData.players[0].ownerScript.node)
                } else {
                    let i = t.playerMgr.hunters;
                    for (const e of i) {
                        if (e.isDie) continue;
                        if (e.changeSideUuid == this.data.playerUuid) continue;
                        let i = t.mapMgr.mapPosToGridPos(e.owner.x, e.owner.y),
                            s = t.mapMgr.mapPosToGridPos(this.outDoorPos.x, this.outDoorPos.y);
                        if (i.x == s.x && i.y == s.y) return void XToast.show("怪物在门口无法使用")
                    }
                    this.skillBtn.skin = "res/game/back.png", XChoreUtil.playSound(133), (new fx.Sequence).to({
                        x: e.x,
                        y: e.y
                    }, 1e3).exec(new Laya.Handler(this, () => {
                        this.isTween = !1, this.isUsedSkill = !0, t.playerMgr.player.isOutDoor = !0
                    })).run(this.roomData.bedModelList[0].owner), (new fx.Sequence).to({
                        x: e.x,
                        y: e.y
                    }, 1e3).run(this.roomData.players[0].ownerScript.node)
                }
                this.isTween = !0
            }
            onUpdate() {
                super.onUpdate(), t.gameMgr.isPause || this.updateBuildCd() && (this.updateBtn(), this.updateExtra(), this.updateRun())
            }
            updateRun() {
                if (this.isUsedSkill && this.isSuper) {
                    let e = t.playerMgr.hunters[0];
                    this.moveSpeed = 2 * e.ownerScript.moveSpeed;
                    let i = t.mapMgr.mapPosToGridPos(e.owner.x, e.owner.y),
                        s = t.mapMgr.mapPosToGridPos(this.bed.owner.x, this.bed.owner.y);
                    this.curPath && this.curPath.length ? this.runWithPath(this.curPath) : i.distanceSq(s) < 9 && this.setTargetPos(i, s)
                }
            }
            getOwnerPos() {
                return this.v2.setValue(this.bed.owner.x, this.bed.owner.y)
            }
            runWithPath(e, t) {
                if (0 == e.length) return !0;
                let i = e[0];
                let s = this.getOwnerPos().sub(i).scale(-1),
                    a = s.len();
                if (a <= 1e-6) return e.shift(), this.runWithPath(e); {
                    let e = fx.Utils.getFrameDelta(),
                        i = this.moveSpeed;
                    s.normalize(Math.min(i * e, a)), this.checkWalkAble(s.x, s.y) ? this.move(s.x, s.y, !t) : this.curPath = null
                }
                return !1
            }
            move(e, i, s = !0) {
                let a;
                a = s ? t.mapMgr.limitMove(this.bed.owner.x, this.bed.owner.y, e, i, 16) : t.mapMgr.move(this.bed.owner.x, this.bed.owner.y, e, i, 16);
                let n = this.roomData.players[0].ownerScript.node;
                this.bed.owner.pos(a.x, a.y), n.pos(a.x, a.y)
            }
            checkWalkAble(e, i) {
                let s = new fx.V2(this.data.owner.x + e, this.data.owner.y + i),
                    a = t.mapMgr.mapPosToGridPos(s.x, s.y),
                    n = t.mapMgr.getTiledInfo(a.x, a.y);
                return !(!n || null != n.walkable && !n.walkable)
            }
            getPath(e, i, s = !1) {
                if (!this.bed.owner || this.bed.owner.destroyed) return;
                return t.mapMgr.findPath(e.x, e.y, i.x, i.y, s)
            }
            setTargetPos(e, i, s = 3) {
                let a = t.mapMgr.outRoomGrids,
                    n = [];
                for (const e of a) {
                    if (e.x < 3 || e.y < 3) continue;
                    3 == Math.abs(i.x - e.x) + Math.abs(i.y - e.y) && n.push(e)
                }
                if (n.length) {
                    let s, a = 0;
                    for (const t of n) {
                        let i = e.distanceSq(t);
                        e.distanceSq(t) > a ? (a = i, s = t) : e.distanceSq(t) == a && s && e.distanceSq(t) > e.distanceSq(s) && (s = t)
                    }
                    let r = t.mapMgr.gridPosToMapPos(i.x, i.y),
                        o = t.mapMgr.gridPosToMapPos(s.x, s.y);
                    this.curPath = this.getPath(r, o)
                } else this.setTargetPos(e, i, s + 1)
            }
            updateBtn() {
                if (this.skillBtn && this.data.playerUuid == t.playerMgr.mineUuid) {
                    let e = t.mapMgr.mapPosToStagePos(this.node.x, this.node.y - 25);
                    this.skillBtn.pos(e.x, e.y + 50), this.isCd ? (this.curTime -= fx.Utils.getFrameDelta(.033), this.panel_bar.width = (90 - this.curTime) / 90 * 89, this.curTime <= 0 && (this.isCd = !1, this.cdNode.visible = !1, this.skillBtn.visible = !0)) : this.skillBtn.visible || (this.skillBtn.visible = !0)
                }
            }
            updateExtra() {
                if (this.isUsedSkill) {
                    let e = t.buildingMgr.getBuildCfg(this.bed.id, this.bed.lv).effectList[0].value[0];
                    for (const i of this.bed.ownerScript.effects)
                        if (i instanceof Xt) {
                            let s = .5 * e;
                            if (this.isDouble) s = e;
                            else if (this.isSuper) {
                                let i = t.mapMgr.mapPosToGridPos(this.bed.owner.x, this.bed.owner.y),
                                    a = t.mapMgr.mapPosToGridPos(this.outDoorPos.x, this.outDoorPos.y).distanceSq(i);
                                s = a <= 9 ? .5 * e : a <= 36 ? 1 * e : 2 * e
                            }
                            s != i.godExtra && (i.godExtra = s)
                        }
                } else
                    for (const e of this.bed.ownerScript.effects)
                        if (e instanceof Xt) {
                            let t = 0;
                            t != e.godExtra && (e.godExtra = t)
                        }
            }
            onDestroy() {
                super.onDestroy(), this.skillBtn && this.skillBtn.destroy(), this.cdNode && this.cdNode.destroy()
            }
            videoUpgrade() {
                XRandomUtil.getNumberRandom(1, 11) <= 2 ? (this.isSuper = !0, this.data.superId = this.cfg.videoUpgradeIdArr[1]) : (this.isDouble = !0, this.data.superId = this.cfg.videoUpgradeIdArr[0]), this.updateIcon()
            }
            upgrade() {
                super.upgrade(), this.data.isSuper && this.updateIcon()
            }
            updateIcon() {
                let e = t.buildingMgr.superBuildCfg.get(this.data.superId);
                this.imgBody.skin = e.icon
            }
        }
        class XSpringTowerScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, this.fire(), this.isWork = !0) : this.isWork = !1
            }
            fire() {
                let i = t.bulletMgr.createBulletNode(this.cfg.bullet);
                if (!i) return;
                i.rotation = this.node.rotation, i.x = this.node.x, i.y = this.node.y;
                let s = i.getComponent(XBulletScript);
                s && s.destroy();
                let a = this.cfg.bulletType,
                    n = {
                        category: e.CollideGroupType.BULLET,
                        mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                    },
                    r = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - i.x, this.atkTarget.owner.y - i.y) : new fx.V2(Math.cos((i.rotation - 90) * Math.PI / 180), Math.sin((i.rotation - 90) * Math.PI / 180));
                r.normalize(), (s = i.addComponent(XBulletScript)).lockTarget = this.atkTarget, a == e.BulletType.Normal ? s.shoot(this.cfg.bullet, .3 * this.atkTarget.attackPower, r, null, this.data, null, void 0, n) : s.shoot(this.cfg.bullet, .3 * this.atkTarget.attackPower, r, this.atkTarget, this.data, null, void 0, n)
            }
        }
        class as extends XTowerScript {
            getDamageMult() {
                return .5
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == Ee.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return e /= 3, 1e3 * (e = Math.max(.21, e))
            }
        }
        class ns extends XTowerScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0, this.v2 = new fx.V2, this.v2_1 = new fx.V2
            }
            onInit() {
                this.initX = this.node.x, this.initY = this.node.y
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return void this.back();
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || (e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack()), this.followTarget())
            }
            getFollowSqu() {
                let e = 15 * C.GridSize;
                return e * e
            }
            back() {
                this.v2.setValue(this.initX, this.initY), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y)
            }
            followTarget() {
                if (this.isAtking) return;
                let e = this.getHunters();
                if (e && e.length) {
                    let t = e[0],
                        i = XV2Util01.pDistanceSquared(t.owner, {
                            x: this.initX,
                            y: this.initY
                        }),
                        s = this.getAtkDstSqu();
                    if (this.getFollowSqu() > i)
                        if (s > i) this.v2.setValue(this.initX, this.initY), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y);
                        else {
                            XV2Util01.pDistanceSquared(t.owner, this.node) > s / 4 && (this.v2.setValue(t.owner.x, t.owner.y), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y))
                        } else this.v2.setValue(this.initX, this.initY), this.v2_1.setValue(this.node.x, this.node.y), fx.V2.lerp(this.v2_1, this.v2, .03, this.v2_1), this.node.pos(this.v2_1.x, this.v2_1.y)
                }
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, {
                        x: this.node.x,
                        y: this.node.y
                    });
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, XV2Util01.faceTo(this.node, this.atkTarget.owner.x, this.atkTarget.owner.y, 90), this.fire(e), this.isWork = !0) : this.isWork = !1
            }
        }
        class XTowerDoubleScript extends XBuildingScript {
            constructor() {
                super(...arguments), this.canAttack = !0, this.lastAtkTime = 0
            }
            getAtkCD() {
                for (const e of this.data.buffs)
                    if (e.Type == M.DYC_ATK_SPD) {
                        let t = this.getTargetDstSqu();
                        if (t == 1 / 0) continue;
                        let i = t / this.getAtkDstSqu();
                        i = Math.clamp(i, 0, 1), e.Val = -(1 - i)
                    }
                let e = this.data.getAtkCD();
                return 1e3 * (e = Math.max(.21, e))
            }
            getAtkDstSqu() {
                let e = this.data.getAtkDst(),
                    i = t.playerMgr.getPlayer(this.data.playerUuid),
                    s = e;
                if (i && !i.isDie && i.buffs)
                    for (const t of i.buffs) t.Type == M.ATK_DST && (s += t.result(e));
                let a = s * C.GridSize;
                return a * a
            }
            initSkin() {
                this.cfg.diIcon && (this.imgDi = new Laya.Image(this.cfg.diIcon), this.imgDi.anchorX = this.imgDi.anchorY = .5, this.skinNode.addChild(this.imgDi), this.imgDi.pos(-25, 0), this.imgDi_1 = new Laya.Image(this.cfg.diIcon), this.imgDi_1.anchorX = this.imgDi_1.anchorY = .5, this.skinNode.addChild(this.imgDi_1), this.imgDi_1.pos(25, 0)), this.imgBody = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5, this.imgBody.pos(-25, 0), this.imgBody_1 = new Laya.Image(this.cfg.icon), this.skinNode.addChild(this.imgBody_1), this.imgBody_1.anchorX = this.imgBody_1.anchorY = .5, this.imgBody_1.pos(25, 0), this.initEffects()
            }
            onUpdate() {
                this.owner.timer.delta;
                if (super.onUpdate(), this.isBuildCd) return;
                if (!this.canAttack) return;
                if (this.data.palsyTime) return;
                let e = this.owner.timer.currTimer;
                e - this.data.dizzyStartTime < 1e3 * this.data.dizzyDurSec || e - this.lastAtkTime > this.getAtkCD() && (this.lastAtkTime = e, this.tryAttack())
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            getHunters() {
                return t.playerMgr.hunters
            }
            getTargetDstSqu() {
                let e = 1 / 0,
                    t = this.getHunters(),
                    i = this.getAtkDstSqu();
                for (const s of t) {
                    if (s.isDie) continue;
                    if (s.changeSideUuid == this.data.playerUuid) continue;
                    let t = s.owner,
                        a = XV2Util01.pDistanceSquared(t, this.node);
                    a <= i && a < e && (e = a)
                }
                return e
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, XV2Util01.faceTo_1(this.node, this.imgDi, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgDi_1, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody_1, e.owner.x, e.owner.y, 90), this.fire(), this.isWork = !0) : this.isWork = !1
            }
            fire() {
                for (let i = 0; i < 2; i++) {
                    let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                    if (!s) return;
                    0 == i ? (s.rotation = this.imgBody.rotation, s.x = this.node.x - 30) : (s.rotation = this.imgBody_1.rotation, s.x = this.node.x + 30), s.y = this.node.y;
                    let a = s.getComponent(XBulletScript);
                    a && a.destroy();
                    let n = this.cfg.bulletType,
                        r = {
                            category: e.CollideGroupType.BULLET,
                            mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                        },
                        o = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - s.x, this.atkTarget.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                    o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = this.atkTarget, n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, this.cfg.atkDamage, o, null, this.data, null, void 0, r) : a.shoot(this.cfg.bullet, this.cfg.atkDamage, o, this.atkTarget, this.data, null, void 0, r)
                }(new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody), (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody_1.scale(1, 1)
                })).run(this.imgBody_1)
            }
        }
        class XTrapScript extends XBuildingScript {
            initBuild() {
                let e = t.buildingMgr.getBuildCfg(this.data.id);
                this.dizzyTime = e.effectList[0].value[0], t.user.gameInfo.getBuffData(8) && (this.dizzyTime += 1), this.cdNode = fx.Utils.createPrefab(T.Prefab_SkillCD);
                let i = this.cdNode.getChildByName("img_building");
                this.panel_bar = i.getChildByName("panel_bar"), this.panel_bar.width = .001, t.mapMgr.buildCdLayer.addChild(this.cdNode);
                let s = t.mapMgr.gridPosToMapPos(this.data.x, this.data.y);
                this.cdNode.pos(s.x, s.y), this.cdNode.visible = !1, this.skillBtn = new Laya.Image("res/game/trap.png"), this.skillBtn.anchorX = this.skillBtn.anchorY = .5;
                let a = t.mapMgr.mapPosToStagePos(this.node.x, this.node.y - 25);
                t.gameUI.gameNode.addChild(this.skillBtn), this.skillBtn.pos(a.x, a.y + 50), this.skillBtn.addComponent(Ni), this.skillBtn.on(Laya.Event.CLICK, this, this.onClickSkill), this.hunters = [];
                let n = t.mapMgr.getRoomById(this.data.roomId);
                (this.door = n.doorModel).owner.on(be.Battle_Be_Hit, this, this.onDoorBeHit)
            }
            onDoorBeHit(e, t) {
                this.hunters.includes(e) || this.hunters.push(e)
            }
            onClickSkill() {
                if (this.hunters.length) {
                    let e = !1;
                    for (const i of this.hunters)
                        if (Math.abs(this.door.owner.x - i.owner.x) <= 150 || Math.abs(this.door.owner.y - i.owner.y) <= 150) {
                            let s = new Laya.Animation;
                            s.source = "res/atlas/res/Ani/zhua.atlas", EffectUtil.I.playAnim(s, i.owner.x - C.GridHalfSize, i.owner.y - C.GridHalfSize, !1), t.gameMgr.DizzyTarget(i, this.dizzyTime), e = !0
                        } else {
                            let e = this.hunters.indexOf(i);
                            e >= 0 && this.hunters.splice(e, 1)
                        }
                    e ? (this.isCd = !0, this.curTime = 20, this.cdNode.visible = !0, this.skillBtn.visible = !1) : XToast.show("噬魂者太远了")
                } else XToast.show("噬魂者太远了")
            }
            onUpdate() {
                super.onUpdate(), this.data.palsyTime || t.gameMgr.isPause || this.updateBuildCd() && this.updateBtn()
            }
            updateBtn() {
                if (this.skillBtn && this.data.playerUuid == t.playerMgr.mineUuid) {
                    let e = t.mapMgr.mapPosToStagePos(this.node.x, this.node.y - 25);
                    this.skillBtn.pos(e.x, e.y + 50), this.isCd ? (this.curTime -= fx.Utils.getFrameDelta(.033), this.panel_bar.width = (20 - this.curTime) / 20 * 89, this.curTime <= 0 && (this.isCd = !1, this.cdNode.visible = !1, this.skillBtn.visible = !0)) : this.skillBtn.visible || (this.skillBtn.visible = !0)
                }
            }
            initEffects() {
                if (this.data.playerUuid == t.playerMgr.player.uuid && t.user.gameInfo.getBuffData(9)) this.initBuild();
                else {
                    for (let e = this.effects.length - 1; e >= 0; --e) {
                        let t = this.effects[e];
                        t.clearFlag && (t.clear(), this.effects.splice(e, 1))
                    }
                    for (const i of this.cfg.effectList) {
                        let s = Kt.createEffect(i, this.data);
                        if (s) {
                            if (s.clearFlag = !0, this.addEffect(s), i.type == e.EffectType.Enemy_SlowAtkSpd) {
                                return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.showDoorEff_1()
                            }
                            if (i.type == e.EffectType.Door_FightBackOnBeAtk) {
                                return void t.mapMgr.getRoomById(this.data.roomId).doorModel.ownerScript.showDoorEff_2()
                            }
                        }
                    }
                }
            }
            onDestroy() {
                super.onDestroy(), this.skillBtn && this.skillBtn.destroy(), this.cdNode && this.cdNode.destroy()
            }
        }
        class ls extends XTowerScript {
            addCoinByAtk() {
                let i = Math.round(.5 * this.cfg.atkDamage * .5);
                t.playerMgr.changePlayerIncomeByUuid(this.data.playerUuid, i) && t.gameUI.valueTips(e.TokenType.E_Coin, i, this.node.x, this.node.y)
            }
        }
        class hs extends XTowerScript {
            playFireEff() {
                let e = t.playerMgr.getPlayer(this.data.playerUuid),
                    i = t.mapMgr.getRoomById(e.roomId);
                i && i.doorModel && (t.gameMgr.AddHp(i.doorModel, .01 * i.doorModel.maxHp), i.doorModel.ownerScript.showHuiFuEff()), (new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody)
            }
        }
        class ds extends XTowerScript {
            initSkin() {
                this.cfg.diIcon && (this.imgDi = new Laya.Image, this.imgDi.anchorX = this.imgDi.anchorY = .5, this.skinNode.addChild(this.imgDi), this.imgDi.pos(0, 0)), this.imgBody = new Laya.Image, this.skinNode.addChild(this.imgBody), this.imgBody.anchorX = this.imgBody.anchorY = .5, this.imgBody.pos(-25, 0), this.imgBody_1 = new Laya.Image, this.skinNode.addChild(this.imgBody_1), this.imgBody_1.anchorX = this.imgBody_1.anchorY = .5, this.imgBody_1.pos(25, 0), this.imgBody_1.scale(.8, .8), this.updateIcon(), this.initEffects()
            }
            tryAttack() {
                if (this.data.isDizzy) return void(this.isWork = !1);
                let e = this.findTarget();
                e ? (this.atkTarget = e, XV2Util01.faceTo_1(this.node, this.imgDi, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody, e.owner.x, e.owner.y, 90), XV2Util01.faceTo_1(this.node, this.imgBody_1, e.owner.x, e.owner.y, 90), this.fire(), this.isWork = !0) : this.isWork = !1
            }
            findTarget() {
                let e, t = 1 / 0,
                    i = this.getAtkDstSqu(),
                    s = this.getHunters();
                for (const a of s) {
                    if (a.isDie) continue;
                    if (a.changeSideUuid == this.data.playerUuid) continue;
                    let s = a.owner;
                    if (!s || s.destroyed || this.node.destroyed) continue;
                    let n = XV2Util01.pDistanceSquared(s, this.node);
                    n <= i && n < t && (t = n, e = a)
                }
                return e
            }
            fire() {
                for (let i = 0; i < 2; i++) {
                    let s = t.bulletMgr.createBulletNode(this.cfg.bullet);
                    if (!s) return;
                    0 == i ? (s.rotation = this.imgBody.rotation, s.x = this.node.x - 30) : (s.rotation = this.imgBody_1.rotation, s.x = this.node.x + 30), s.y = this.node.y;
                    let a = s.getComponent(XBulletScript);
                    a && a.destroy();
                    let n = this.cfg.bulletType,
                        r = {
                            category: e.CollideGroupType.BULLET,
                            mask: e.CollideGroupType.HUNTER | e.CollideGroupType.Defender | e.CollideGroupType.Building | e.CollideGroupType.DefenderMine
                        },
                        o = this.atkTarget ? new fx.V2(this.atkTarget.owner.x - s.x, this.atkTarget.owner.y - s.y) : new fx.V2(Math.cos((s.rotation - 90) * Math.PI / 180), Math.sin((s.rotation - 90) * Math.PI / 180));
                    o.normalize(), (a = s.addComponent(XBulletScript)).lockTarget = this.atkTarget;
                    let l = this.cfg.atkDamage;
                    0 != i && (l *= .25), n == e.BulletType.Normal ? a.shoot(this.cfg.bullet, l, o, null, this.data, null, void 0, r) : a.shoot(this.cfg.bullet, l, o, this.atkTarget, this.data, null, void 0, r)
                }(new fx.Sequence).scaleOut(1.1, 50).scaleIn(.8, 100).scaleOut(1, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody.scale(1, 1)
                })).run(this.imgBody), (new fx.Sequence).scaleOut(.9, 50).scaleIn(.7, 100).scaleOut(.8, 50).exec(Laya.Handler.create(this, () => {
                    this.imgBody_1.scale(.8, .8)
                })).run(this.imgBody_1), this.fireEvent()
            }
            updateIcon() {
                if (this.cfg = t.buildingMgr.getBuildCfg(this.data.id, this.data.lv), this.imgBody.skin = this.cfg.icon, this.imgBody_1)
                    if (this.data.lv > 1) {
                        let e = t.buildingMgr.getBuildCfg(this.data.id, this.data.lv - 1);
                        this.imgBody_1.skin = e.icon
                    } else this.imgBody_1.skin = this.cfg.icon;
                let e = t.buildingMgr.specialTowerCfg.get(this.data.specialId);
                e.diIcon && (this.imgDi.skin = e.diIcon)
            }
        }
        class XGameScript extends Laya.Script {
            constructor() {
                super(...arguments), this.mapMoveSpeed = 1.5, this.defenders = [], this.hunters = [], 
                this.moveDir = new fx.V2, this.buildingGrids = [], this.moveTime = 0
            }
            get node() {
                return this.owner
            }
            init() {
                let e = t.user.gameInfo;
                this.inputScript = t.gameMgr.inputScript, 
                this.inputScript.downHandler = new Laya.Handler(this, this.onDown, null, !1), 
                this.inputScript.moveHandler = new Laya.Handler(this, this.onInputMove, null, !1), 
                this.inputScript.clickHandler = new Laya.Handler(this, this.onClickMap, null, !1);
                let i = this.owner.getChildByName("MapNode");
                t.mapMgr.mapNode = i, 
                this.map = t.gameMgr.mapScript = i.addComponent(XMapScript), 
                this.map.init(), EffectUtil.I.init(t.mapMgr.effectLayer), 
                Ci.init(), 
                t.bulletMgr.init(i.getChildByName("BulletLayer")), 
                t.gameUI.init(this.node, this.owner.parent.getChildByName("box_ui")), 
                this.initEvents(), 
                this.initMapBuild(), 
                this.initBuildings(), 
                this.initDefenders(), 
                this.initHunters(), 
                this.firstPlay(), 
                this.onInit();
                let s = fx.Utils.isNotchScreenDevice();
                if (s && (s.notchTop && (this.node.top = -s.notchTop), s.notchBottom && (this.node.bottom = -s.notchBottom)), e.failCnt + e.winCnt < 3) {
                    this.img_guideHand = new Laya.Image("res/game/guide/finger1.png"), this.img_guideHand.pivotX = 26, 
                    this.img_guideHand.pivotY = 12, 
                    t.mapMgr.effectLayer.addChild(this.img_guideHand), this.img_guideHand.visible = !1;
                    let e = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                    e.isRepeat = !0, e.run(this.img_guideHand)
                }
            }
            initEvents() {
                fx.EventCenter.I.on(XEventNames.E_BUILDING_BUILD, this, this.build), 
                fx.EventCenter.I.on(XEventNames.E_BUILDING_REMOVED, this, this.destroyBuilding), 
                fx.EventCenter.I.on(XEventNames.E_BUILDING_UPGRADE, this, this.onBuildingUpgrade), 
                fx.EventCenter.I.on(XEventNames.E_BUILDING_VIDEOUPGRADE, this, this.onBuildingVideoUpgrade), 
                fx.EventCenter.I.on(XEventNames.E_Look_Player, this, this.lookAtPlayer), 
                fx.EventCenter.I.on(XEventNames.E_Door_State_Changed, this, this.onDoorStateChanged), 
                fx.EventCenter.I.on(XEventNames.E_Repair_Door, this, this.repairDoor), 
                fx.EventCenter.I.on(XEventNames.E_Bed_Up, this, this.onPlayerUpBed), 
                fx.EventCenter.I.on(XEventNames.E_Bed_Down, this, this.hideBuildTips), 
                fx.EventCenter.I.on(XEventNames.E_BuildTips_Hide, this, this.onPlayerDownBed), 
                fx.EventCenter.I.on(XEventNames.E_MapBuild_take, this, this.onPlayerTakeMapBuild), 
                fx.EventCenter.I.on(XEventNames.E_Hurter_Dig, this, this.useDigHole), 
                fx.EventCenter.I.once(XEventNames.E_Game_Start, this, this.onGameStart), 
                fx.EventCenter.I.on(XEventNames.E_GuideHand_Show, this, this.guideHandShow), 
                fx.EventCenter.I.on(XEventNames.E_Task_Compelet, this, this.guideHandHide)
            }
            onGameStart() {
                for (const e of this.defenders) e.moveSpeed = t.cfg.constant.playerMoveSpeed / t.gameMgr.speedRatio
            }
            onInit() {
                this.lookAt(this.characterControl.node.x, this.characterControl.node.y), t.gameUI.startGameCd()
            }
            initBuildings() {
                let i = t.buildingMgr.buildings;
                for (const t of i) this.build(t, !0), t.type == e.BuildType.door && this.map.createDoorTips(t.x, t.y, t.rotation)
            }
            initDefenders() {
                let e = t.playerMgr.mineUuid,
                    defenderArr = t.playerMgr.defenders;
                for (let s = 0; s < defenderArr.length; ++s) {
                    let defender = defenderArr[s],
                        box = new Laya.Box;
                    box.width = box.height = 1, 
                    this.map.playerLayer.addChild(box);
                    let r = box.addComponent(XDefenderScript);
                    r.init(defender);
                    let o = t.mapMgr.getDefenderSpawnPos(defender.spwanPoint);
                    if (!o) {
                        let e;
                        for (const i of t.mapMgr.getMapTiles())
                            for (const t of i)
                                if (-1 !== t.groundBlock.indexOf("floor_2")) {
                                    e = t;
                                    break
                                }
                        if (e) o = t.mapMgr.gridPosToMapPos(e.x, e.y);
                        else {
                            let e = C.GridSize;
                            o = new fx.V2(t.mapMgr.width * e / 2, t.mapMgr.height * e / 2)
                        }
                    }
                    r.pos(o.x, o.y), this.defenders.push(r), defender.uuid == e && (this.characterControl = r)
                }
            }
            initHunters() {
                this.panel_ghostDoor = new Laya.Panel, this.panel_ghostDoor.width = this.panel_ghostDoor.height = 180, 
                this.panel_ghostDoor.anchorX = this.panel_ghostDoor.anchorY = .5, 
                this.map.hunterLayer.addChild(this.panel_ghostDoor), 
                this.img_ghostDoor = new Laya.Image("res/game/img_ghostDoor.png"), 
                this.img_ghostDoor.width = this.img_ghostDoor.height = 180, 
                this.panel_ghostDoor.addChild(this.img_ghostDoor), this.img_ghostDoor.pos(0, 180);
                let e = t.playerMgr.mineUuid,
                    i = t.playerMgr.hunters;
                for (let s = 0; s < i.length; ++s) {
                    let a = i[s],
                        n = new Laya.Box;
                    n.width = n.height = 1, this.map.hunterLayer.addChild(n);
                    let r = n.addComponent(XHunterScript);
                    r.init(a);
                    let o = t.mapMgr.getHunterSpawnPos(a.spwanPoint);
                    if (r.pos(o.x, o.y), this.hunters.push(r), a.uuid == e) {
                        this.characterControl = r;
                        break
                    }
                }
            }
            initMapBuild() {
                if (t.buildingMgr.mapBuildScripts = [], t.buildingMgr.mapBuildScriptArr = [], t.gameMgr.gameMode != e.GameMode.E_Defense) return;
                let i = t.user.gameInfo,
                    s = i.winCnt + i.failCnt;
                if (i.isExitGame) return i.isExitGame = !1, void t.user.saveToServer();
                let a = .2;
                a = t.user.gameInfo.ownBuff.size ? .2 : i.mapBuildRate;
                let n = t.user.gameInfo.getBuffData(24);
                if (n) {
                    a += t.cfg.buffCfg.get(24).values[n.lv] / 100
                }
                s > 0 && XRandomUtil.random() <= a && t.buildingMgr.addMapBuild()
            }
            firstPlay() {
                if (0 == t.user.gameInfo.winCnt + t.user.gameInfo.failCnt) {
                    let e = [
                        [17, 15],
                        [18, 15],
                        [19, 15],
                        [20, 15],
                        [20, 14],
                        [20, 13],
                        [21, 13],
                        [22, 13],
                        [23, 13],
                        [23, 12],
                        [23, 11],
                        [23, 10],
                        [23, 9],
                        [22, 9],
                        [22, 8],
                        [21, 8],
                        [21, 7],
                        [20, 7]
                    ];
                    for (let i = 0; i < e.length - 1; i++) {
                        let s = e[i],
                            a = e[i + 1],
                            n = 0;
                        n = s[0] != a[0] ? a[0] - s[0] == 1 ? 90 : -90 : a[1] - s[1] == 1 ? 180 : 0;
                        let r = new Laya.Image("res/guideTips/guideTips.png");
                        r.anchorX = r.anchorY = .5, r.rotation = n;
                        let o = t.mapMgr.gridPosToMapPos(s[1], s[0]),
                            l = t.mapMgr.mapPosToStagePos(o.x, o.y);
                        t.mapMgr.lowLayer.addChild(r), r.pos(l.x, l.y);
                        r.addComponent(Oi)
                    }
                    this.img_guideArrow = new Laya.Image("res/game/guideArrow.png"), this.img_guideArrow.anchorX = this.img_guideArrow.anchorY = .5, this.img_guideArrow.rotation = 180, this.arrowEndPos = t.mapMgr.gridPosToMapPos(7, 20), t.mapMgr.effectLayer.addChild(this.img_guideArrow), this.img_guideArrow.pos(this.arrowEndPos.x, this.arrowEndPos.y - 100);
                    let i = (new fx.Sequence).move(0, 20, 500).move(0, -20, 500);
                    i.isRepeat = !0, i.run(this.img_guideArrow), fx.EventCenter.I.on(XEventNames.E_GuideArrow_Visible, this, this.changeArrowVisible)
                }
            }
            changeArrowVisible(e) {
                this.img_guideArrow.visible = e
            }
            onUpdate() {
                this.updateMove(), this.updateOperateUI(), t.gameUI.update()
            }
            updateMove() {
                if (!this.characterControl) return;
                if (this.owner.timer.currTimer - this.characterControl.data.dizzyStartTime < 1e3 * this.characterControl.data.dizzyDurSec) return;
                if (0 == this.inputScript.input.x && 0 == this.inputScript.input.y) return this.characterControl.isAtking || this.characterControl.idle(), void(this.moveTime = 0);
                this.moveTime += fx.Utils.getFrameDelta(.033), this.moveTime >= .5 && (this.moveTime = 0);
                let e = this.owner.timer.delta / 1e3;
                e = Math.min(e, .05), this.moveDir.setValue(this.inputScript.input.x, this.inputScript.input.y), this.moveDir.normalize(), this.characterControl.img_addSpeed && XV2Util01.faceWith(this.characterControl.img_addSpeed, this.moveDir.x, this.moveDir.y);
                let t = this.characterControl.data ? this.characterControl.data.getSpeedPow() : 1,
                    i = this.characterControl.moveSpeed * t * this.characterControl.moveSpeedScale,
                    s = i * e * this.moveDir.x,
                    a = i * e * this.moveDir.y;
                this.characterControl.move(s, a, !0), this.lookAt(this.characterControl.node.x, this.characterControl.node.y)
            }
            updateGuideArrow() {
                this.img_guideArrow && !this.img_guideArrow.destroyed && (this.img_guideArrow.pos(this.characterControl.node.x, this.characterControl.node.y), XV2Util01.faceTo(this.img_guideArrow, this.arrowEndPos.x, this.arrowEndPos.y, 90))
            }
            onDown() {
                t.gameUI.hideAllMenu()
            }
            onInputMove(e, t) {
                if (!this.isPlayerBed || this.characterControl) return;
                let i = this.mapMoveSpeed * e,
                    s = this.mapMoveSpeed * t;
                this.map.lookPos.x -= i, this.map.lookPos.y -= s, this.lookAt(this.map.lookPos.x, this.map.lookPos.y)
            }
            onClickMap(e) {}
            lookAtPlayer(e) {
                e.owner && !e.owner.destroyed && this.lookAt(e.owner.x, e.owner.y)
            }
            lookAt(e, t) {
                this.map.lookAt(e, t), this.map.updateArea()
            }

            build(buildModel_, s, cdTime_ = 0) {
                // 初始化容器
                let n = new Laya.Box();
                n.width = n.height = .01;
                n.anchorX = n.anchorY = .5;
                buildModel_.owner = n;
            
                // 基础数据
                let r;
                const o = t.mapMgr.gridPosToMapPos(buildModel_.x, buildModel_.y);
                let l = !1;
                const buildCfg = t.buildingMgr.getBuildCfg(buildModel_.id);
            
                // 不同类型建造物处理
                if (buildCfg.type == e.BuildType.door) {
                    r = n.addComponent(XDoorScript);
            
                } else if (buildCfg.type == e.BuildType.bed) {
                    n.zOrder = 100;
                    r = n.addComponent(XBedScript);
            
                    // 特殊床 1001
                    if (buildModel_.id == 1001) {
                        let skins = t.cfg.skin.getList();
                        let chosen = fx.Utils.randomInArray(skins);
            
                        if (buildModel_.playerUuid) {
                            let p = t.playerMgr.getPlayer(buildModel_.playerUuid);
                            chosen = t.cfg.skin.get(p.skinId);
                        }
            
                        const bedImg = new Laya.Image(chosen.skinBedPath);
                        bedImg.scale(1, 1);
                        bedImg.anchorX = .5;
                        bedImg.anchorY = .75;
                        t.mapMgr.playerLayer.addChild(bedImg);
                        bedImg.pos(o.x, o.y - 15);
                        r.bedHead = bedImg;
                    }
            
                } else if (buildCfg.type == e.BuildType.tower) {
                    // 特殊塔（3000）
                    if (buildCfg.buildId == 3000) {
                        if (buildModel_.isSpecial) {
                            switch (buildModel_.specialId) {
                                case 1: r = n.addComponent(XQianjinTowerScript); break;
                                case 2: r = n.addComponent(ns); l = !0; break;
                                case 3: r = n.addComponent(Ii); break;
                                case 4: r = n.addComponent(Ei); break;
                                case 5: r = n.addComponent(ds); break;
                                case 6: r = n.addComponent(XTowerScript); break;
                                case 7: r = n.addComponent(XShuangtouTowerScript); break;
                                case 8: r = n.addComponent(XBingdongTowerScript); break;
                                case 9: r = n.addComponent(JuTowerScript); break;
                                case 10: r = n.addComponent(JiguangTowerScript); break;
                                case 11: r = n.addComponent(ls); break;
                                case 12: r = n.addComponent(XMiniTowerScript); break;
                                case 13: r = n.addComponent(JisuTowerScript); break;
                                case 14: r = n.addComponent(XQianliTowerScript); break;
                                case 15: r = n.addComponent(XTowerScript); break;
                                case 16: r = n.addComponent(as); break;
                                case 17: r = n.addComponent(hs); break;
                                default: r = n.addComponent(XTowerScript);
                            }
                        } else {
                            r = n.addComponent(XTowerScript);
                        }
                    } else {
                        // 其他塔
                        switch (buildCfg.buildId) {
                            case 3001: r = n.addComponent(XTowerDoubleScript); break;
                            case 3002: r = n.addComponent(XQuirkyTowerScript); break;
                            case 3004: r = n.addComponent(XSpringTowerScript); break;
                            case 3005: r = n.addComponent(XDoorGuardTowerScript); break;
                            case 3006: r = n.addComponent(XFollowSpringTowerScript); l = !0; break;
                            case 3007: r = n.addComponent(XPoisonSpringTowerScript); break;
                            case 3008:
                            case 3009: r = n.addComponent(XFlyCutterScript); break;
                            case 3010: r = n.addComponent(XMirrorScript); break;
                            default: break;
                        }
                    }
            
                } else {
                    // 其他类型
                    if (buildCfg.type == e.BuildType.eatMosquito) {
                        r = n.addComponent(XEatMosquitoScript);
                    } else if (buildCfg.type == e.BuildType.springBox) {
                        r = n.addComponent(XSpringBoxScript);
                    } else if (buildCfg.type == e.BuildType.knife) {
                        r = n.addComponent(XKnifeScript);
                    } else if (buildCfg.type == e.BuildType.random) {
                        r = n.addComponent(Wi);
                    } else if (buildCfg.type == e.BuildType.mine) {
                        if ([5002, 5103, 5104, 5105, 5106].includes(buildCfg.buildId)) {
                            r = n.addComponent(XCatBedScript);
                        } else {
                            r = n.addComponent(XBuildingScript);
                        }
                    } else if (buildCfg.type == e.BuildType.entice) {
                        r = n.addComponent(EnticeScript);
                    } else if (buildCfg.type == e.BuildType.stone) {
                        r = n.addComponent(XRabbitScript);
                    } else if (buildCfg.type == e.BuildType.boxMonster) {
                        r = n.addComponent(XBoxMonsterScript);
                    } else if (buildCfg.type == e.BuildType.doorkeeper) {
                        r = n.addComponent(XDoorkeeperScript);
                    } else if (buildCfg.type == e.BuildType.borrowMoney) {
                        r = n.addComponent(XBorrowMoneyScript);
                    } else if (buildCfg.buildId == 6006) {
                        r = n.addComponent(XTrapScript);
                    } else {
                        r = n.addComponent(XBuildingScript);
                    }
                }
            
                // 添加到地图层
                this.buildingGrids[buildModel_.x] ||= [];
                l ? this.map.buildMoveLayer.addChild(n) : this.map.buildLayer.addChild(n);
            
                // 设置位置 & 存储引用
                n.pos(o.x, o.y);
                this.buildingGrids[buildModel_.x][buildModel_.y] = r;
            
                // 初始化脚本
                r.init(buildModel_, cdTime_);
                r.map = this.map;
            
                // 播放特效
                if (!s && t.mapMgr.isInStageByGridPos(buildModel_.x, buildModel_.y)) {
                    EffectUtil.I.playUpgradeEffect(buildModel_.x, buildModel_.y);
                }
            }
            

            destroyBuilding(e) {
                let i = this.getBuidling(e.x, e.y);
                i ? (i.node.destroy(), this.buildingGrids[e.x] && this.buildingGrids[e.x][e.y] && delete this.buildingGrids[e.x][e.y], this.map.hideUpTips(e.x, e.y), t.mapMgr.isInStageByGridPos(e.x, e.y)) : e.owner && e.owner.destroy()
            }
            onBuildingUpgrade(e) {
                let i = this.getBuidling(e.x, e.y);
                i && (i.upgrade(), t.mapMgr.isInStageByGridPos(e.x, e.y) && EffectUtil.I.playUpgradeEffect(e.x, e.y))
            }
            onBuildingVideoUpgrade(e) {
                let t = this.getBuidling(e.x, e.y);
                t && t.videoUpgrade()
            }
            updateOperateUI() {
                if (t.gameUI.hideOperateBtn(), !this.characterControl || this.characterControl.data.type != e.PlayerType.E_Defender) return;
                let i = this.characterControl.node,
                    s = t.buildingMgr.getNearBuildingByMapPos(i.x, i.y, [e.BuildType.door, e.BuildType.bed]);
                if (s) s.type == e.BuildType.door ? t.gameUI.showDoorBtn(s.x, s.y, !s.isOpen) : s.type != e.BuildType.bed || 1e3 != s.id || s.isUsed || this.characterControl.type != e.PlayerType.E_Defender || t.gameUI.showBedBtn(s.x, s.y);
                else {
                    let e = t.buildingMgr.getNearMapBuildingByMapPos(i.x, i.y);
                    e && !t.playerMgr.player.takeMapBuild && t.gameUI.showMapBuildBtn(e.x, e.y)
                }
            }
            getDefender(e) {
                for (const t of this.defenders)
                    if (t.data.uuid == e) return t
            }
            getHunter(e) {
                for (const t of this.hunters)
                    if (t.data.uuid == e) return t
            }
            getBuidling(e, t) {
                return this.buildingGrids[e] ? this.buildingGrids[e][t] : null
            }
            onDoorStateChanged(t) {
                let i = this.getBuidling(t.x, t.y);
                if (!i || i.data.type != e.BuildType.door) return;
                let s = i;
                t.isOpen ? s.openDoor() : s.closeDoor()
            }
            repairDoor(e) {
                if (!e.doorModel.owner || e.doorModel.owner.destroyed) return !1;
                e.doorModel.owner.getComponent(XBuildingScript).repair(5)
            }
            onPlayerUpBed(e, i) {
                let s = this.getDefender(i);
                if (!s) return;
                s.upBed(e);
                let a = e.roomId,
                    n = t.buildingMgr.getRoom(a);
                i == t.playerMgr.mineUuid && (this.room = n, this.isPlayerBed = !0, this.characterControl = null, this.img_guideArrow && this.img_guideArrow.destroy(), this.inputScript.hide(), this.showBuildTips(e.roomId)), this.map.removeDoorTips(n.doorPos.x, n.doorPos.y)
            }
            onPlayerDownBed(e, i) {
                let s = this.getDefender(e);
                s && (s.downBed(), e == t.playerMgr.mineUuid && (this.hideBuildTips(i), this.room = null, this.isPlayerBed = !1, this.characterControl = s, this.inputScript.show()))
            }
            onPlayerTakeMapBuild(e, t) {
                let i = this.getDefender(t);
                i && i.takeMapBuild(e)
            }
            showBuildTips(e) {
                let i = t.buildingMgr.getRoom(e);
                if (i)
                    for (const e of i.grids) this.map.hideBuildTips(e.x, e.y), this.map.showBuildTips(e.x, e.y)
            }
            hideBuildTips(e) {
                let i = t.buildingMgr.getRoom(e);
                if (i)
                    for (const e of i.grids) this.map.hideBuildTips(e.x, e.y)
            }
            setBtnInCD(e, t = 0, i) {
                if (!e) return;
                e.mouseEnabled = !1, e.__cdTween = fx.Effect.cd(e, 1e3 * t, new Laya.Handler(this, () => {
                    e.mouseEnabled = !0, i && i.run()
                }));
                let s = e.getChildByName("label_cd");
                s || ((s = new Laya.Label).name = "label_cd", s.text = t.toString(), s.anchorX = s.anchorY = .5, s.centerX = s.centerY = 0, s.color = "#ffffff", s.bold = !0, s.stroke = 2, s.fontSize = 36, s.dataSource = t, e.addChild(s)), s.timerLoop(1e3, s, this.setCdLabel, [s, e])
            }
            setCdLabel(e, t) {
                e.dataSource -= 1, e.text = e.dataSource.toString(), e.dataSource <= 0 && e.destroy()
            }
            clearBtnCD(e) {
                if (!e) return;
                if (e.__cdTween) {
                    e.__cdTween.complete()
                }
                let t = e.getChildByName("label_cd");
                t && t.destroy()
            }
            useDigHole(i) {
                let s = this.hunters[0];
                s.data.invincible_skill = !0, s.data.isUsingSkill = !0, this.panel_ghostDoor.pos(s.node.x, s.node.y), t.gameMgr.gameMode == e.GameMode.E_Hunt && (this.characterControl = null), (new fx.Sequence).to({
                    y: 0
                }, 500).run(this.img_ghostDoor), (new fx.Sequence).delay(500).scaleOut(0, 2500).exec(new Laya.Handler(this, () => {
                    s.node.pos(i.x, i.y), s.data.invincible_skill = !1, this.img_ghostDoor.y = 180, this.panel_ghostDoor.pos(i.x, i.y), (new fx.Sequence).to({
                        y: 0
                    }, 500).run(this.img_ghostDoor), (new fx.Sequence).delay(500).scaleOut(1, 2500).exec(new Laya.Handler(this, () => {
                        s.data.isUsingSkill = !1, this.img_ghostDoor.y = 180
                    })).run(s.node), t.gameMgr.gameMode == e.GameMode.E_Hunt && (this.characterControl = s, this.lookAt(this.characterControl.node.x, this.characterControl.node.y))
                })).run(s.node)
            }
            guideHandShow(e) {
                if (!this.img_guideHand) return;
                let i, s = !1,
                    a = t.playerMgr.player,
                    n = a.roomId;
                switch (e) {
                    case 2:
                    case 5:
                    case 6:
                        s = !0;
                        let r = a.bedModel;
                        r && !r.isDie && (i = t.mapMgr.gridPosToMapPos(r.x, r.y), this.img_guideHand.pos(i.x, i.y));
                        break;
                    case 4:
                        s = !0;
                        let o = t.mapMgr.getRoomById(n);
                        o.doorModel && !o.doorModel.isDie && (i = t.mapMgr.gridPosToMapPos(o.doorModel.x, o.doorModel.y), this.img_guideHand.pos(i.x, i.y));
                        break;
                    case 3:
                        s = !0;
                        let l = t.mapMgr.getRandomPosByRoomId(n);
                        l && (i = t.mapMgr.gridPosToMapPos(l.x, l.y), this.img_guideHand.pos(i.x, i.y));
                        break;
                    case 7:
                        s = !0;
                        let h = a.ownerScript.getRoomModel().doorModel,
                            d = a.ownerScript.getEmptyBlock(new fx.V2(h.x, h.y));
                        d && (i = t.mapMgr.gridPosToMapPos(d.x, d.y), this.img_guideHand.pos(i.x, i.y))
                }
                this.img_guideHand.visible = s
            }
            guideHandHide() {
                this.img_guideHand && (this.img_guideHand.visible = !1)
            }
            onDestroy() {
                fx.EventCenter.I.off(XEventNames.E_BUILDING_BUILD, this, this.build), fx.EventCenter.I.off(XEventNames.E_BUILDING_REMOVED, this, this.destroyBuilding), fx.EventCenter.I.off(XEventNames.E_BUILDING_UPGRADE, this, this.onBuildingUpgrade), fx.EventCenter.I.off(XEventNames.E_BUILDING_VIDEOUPGRADE, this, this.onBuildingVideoUpgrade), fx.EventCenter.I.off(XEventNames.E_Look_Player, this, this.lookAtPlayer), fx.EventCenter.I.off(XEventNames.E_Door_State_Changed, this, this.onDoorStateChanged), fx.EventCenter.I.off(XEventNames.E_Repair_Door, this, this.repairDoor), fx.EventCenter.I.off(XEventNames.E_Bed_Up, this, this.onPlayerUpBed), fx.EventCenter.I.off(XEventNames.E_Bed_Down, this, this.hideBuildTips), fx.EventCenter.I.off(XEventNames.E_BuildTips_Hide, this, this.onPlayerDownBed), fx.EventCenter.I.off(XEventNames.E_MapBuild_take, this, this.onPlayerTakeMapBuild), fx.EventCenter.I.off(XEventNames.E_Hurter_Dig, this, this.useDigHole), fx.EventCenter.I.off(XEventNames.E_Game_Start, this, this.onGameStart)
            }
        }
        class AngelOrGhostGameScript extends XGameScript {
            onInit() {
                super.onInit();
                let e = this.owner.getChildByName("box_skill"),
                    t = this.defender_skill = e.getChildByName("defender_skill");
                this.angel_skill = e.getChildByName("angel_skill"), this.skill_repair = t.getChildByName("skill_repair"), this.skill_repair.on(Laya.Event.CLICK, this, this.onClickRepair), this.skill_addSpeed = this.angel_skill.getChildByName("skill_addSpeed"), this.skill_dizzy = this.angel_skill.getChildByName("skill_dizzy"), this.skill_addSpeed.on(Laya.Event.CLICK, this, this.onClickAddSpeed), this.skill_dizzy.on(Laya.Event.CLICK, this, this.onClickDizzy), this.angel_skill.visible = !1
            }
            initEvents() {
                super.initEvents(), fx.EventCenter.I.on(XEventNames.E_Create_Ghost, this, this.createGhost), fx.EventCenter.I.on(XEventNames.E_Create_Angel, this, this.createAngel), fx.EventCenter.I.on(XEventNames.E_Angel_Dead, this, this.clearControl)
            }
            onClickMap(e) {
                if (!t.playerMgr.player.isBed) return;
                let i = e.stageX,
                    s = e.stageY,
                    a = t.mapMgr.stagePosToMapPos(i, s),
                    n = t.mapMgr.mapPosToGridPos(a.x, a.y);
                if (!t.gameMgr.canHandleGrid(n.x, n.y)) return void t.gameUI.hideAllMenu();
                let r = t.buildingMgr.getBuilding(n.x, n.y);
                if (r) {
                    if (!r.canHandle) return;
                    console.log("open upgrade ui"), t.gameUI.showUpgradeMeun(n.x, n.y, r)
                } else console.log("open build ui"), t.gameUI.showBuildMeun(n.x, n.y)
            }
            onUpdate() {
                super.onUpdate(), this.characterControl && (this.characterControl.data.type == e.PlayerType.E_Hunter ? (t.gameUI.hideOperateBtn(), this.characterControl.tryAttack()) : this.characterControl.data.isAngel && t.gameUI.hideOperateBtn())
            }
            onClickRepair() {
                if (this.skill_repair._skillCD) return;
                let e = t.gameMgr.mineRoom;
                if (!t.playerMgr.player.isBed) return void XToast.show("入梦后才能维修");
                if (!t.buildingMgr.repairDoor(e)) return void XToast.show("无法修复");
                let i = fx.CfgMgr.instance.getConstant("repairTime");
                this.skill_repair._skillCD = !0, t.gameMgr.playSound(e.doorModel, 119), this.setBtnInCD(this.skill_repair, i, new Laya.Handler(this, () => {
                    this.skill_repair._skillCD = !1
                }))
            }
            onClickAddSpeed() {
                if (this.skill_addSpeed._skillCD) return;
                t.playerMgr.player.ownerScript.startAddSpeed();
                this.skill_addSpeed._skillCD = !0, this.setBtnInCD(this.skill_addSpeed, 15, new Laya.Handler(this, () => {
                    this.skill_addSpeed._skillCD = !1
                }))
            }
            onClickDizzy() {
                if (this.skill_dizzy._skillCD) return;
                if (t.playerMgr.player.ownerScript.useDizzy()) {
                    let e = 20;
                    this.skill_dizzy._skillCD = !0, this.setBtnInCD(this.skill_dizzy, e, new Laya.Handler(this, () => {
                        this.skill_dizzy._skillCD = !1
                    }))
                } else XToast.show("木头人距离太远")
            }
            createGhost(e) {
                let i = t.playerMgr.mineUuid,
                    s = new Laya.Box;
                s.width = s.height = 1, this.map.hunterLayer.addChild(s);
                let a = s.addComponent(XHunterScript);
                a.init(e);
                let n = t.mapMgr.getHunterSpawnPos(e.spwanPoint);
                a.pos(n.x, n.y), this.hunters.push(a), e.uuid == i && (e.name = "我", this.isPlayerBed = !1, this.inputScript.show(), this.characterControl = a, t.playerMgr.player = e, this.lookAt(this.characterControl.node.x, this.characterControl.node.y)), XToast.show(`${e.name}变为执行人`)
            }
            createAngel(e) {
                this.angel_skill.visible = !0, this.isPlayerBed = !1, this.inputScript.show();
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.playerLayer.addChild(i);
                let s = i.addComponent(XDefenderScript);
                s.init(e);
                let a = t.mapMgr.getDefenderSpawnPos(e.spwanPoint);
                s.pos(a.x, a.y), this.characterControl = s, t.playerMgr.player = e, this.lookAt(this.characterControl.node.x, this.characterControl.node.y), this.clearBtnCD(this.skill_addSpeed), this.clearBtnCD(this.skill_dizzy), XToast.show("我变成救援者")
            }
            clearControl() {
                this.isPlayerBed = !0, this.characterControl = null, this.inputScript.hide(), this.angel_skill.visible = !1, this.defender_skill.visible = !1
            }
            onDestroy() {
                super.onDestroy(), fx.EventCenter.I.off(XEventNames.E_Create_Ghost, this, this.createGhost), fx.EventCenter.I.off(XEventNames.E_Create_Angel, this, this.createAngel), fx.EventCenter.I.off(XEventNames.E_Angel_Dead, this, this.clearControl), Laya.timer.clear(t.gameUI, t.gameUI.countdownFunc)
            }
        }
        class DefenseGameScript extends XGameScript {
            onInit() {
                super.onInit();
                let e = this.owner.getChildByName("box_skill").getChildByName("defender_skill");
                this.skill_repair = e.getChildByName("skill_repair"), this.skill_repair.on(Laya.Event.CLICK, this, this.onClickRepair);
                let t = this.skill_repair.getChildByName("img_hand"),
                    i = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                i.isRepeat = !0, i.run(t)
            }
            initEvents() {
                super.initEvents(), fx.EventCenter.I.on(XEventNames.E_Create_BoxMonster, this, this.createBoxMonster), fx.EventCenter.I.on(XEventNames.E_Create_Ghost, this, this.createGhost), fx.EventCenter.I.on(XEventNames.E_Create_Fighter, this, this.createFighter)
            }
            onClickMap(i) {
                if (!t.playerMgr.player.isBed) return;
                let s = i.stageX,
                    a = i.stageY,
                    n = t.mapMgr.stagePosToMapPos(s, a),
                    r = t.mapMgr.mapPosToGridPos(n.x, n.y),
                    o = t.user.gameInfo.getBuffData(18),
                    l = t.user.gameInfo.getBuffData(6),
                    h = t.mapMgr.getRoomIdByGridPos(r.x, r.y),
                    d = t.mapMgr.getRoomById(h);
                if (!d || !d.players || !d.players.length) return;
                let u = t.gameMgr.canHandleGrid(r.x, r.y);
                if (!u && !o && !l) return void t.gameUI.hideAllMenu();
                let g = t.buildingMgr.getBuilding(r.x, r.y);
                if (g && 6028 == g.id) console.log("open borrowMoney ui"), t.gameUI.showBorrowMoneyMeun(r.x, r.y, g);
                else if (g && (u || l || o)) {
                    if (!g.canHandle) return void(6025 != g.id && 5104 != g.id || g.ownerScript.onClickOwner());
                    if ((g.type == e.BuildType.bed || g.type == e.BuildType.door) && !u && l && !o) return;
                    console.log("open upgrade ui"), t.gameUI.showUpgradeMeun(r.x, r.y, g)
                } else(u || o) && (console.log("open build ui"), t.gameUI.showBuildMeun(r.x, r.y))
            }
            onClickRepair() {
                if (this.skill_repair._skillCD) return;
                let e = t.gameMgr.mineRoom;
                if (!t.playerMgr.player.isBed) return void XToast.show("入梦后才能维修");
                if (!t.buildingMgr.repairDoor(e)) return void XToast.show("无法修复");
                let i = fx.CfgMgr.instance.getConstant("repairTime");
                this.skill_repair._skillCD = !0, t.gameMgr.playSound(e.doorModel, 119), this.setBtnInCD(this.skill_repair, i, Laya.Handler.create(this, () => {
                    this.skill_repair._skillCD = !1
                })), t.gameMgr.isClickRepair = !0, this.skill_repair.getChildByName("img_hand").visible = !1, !t.taskMgr.compeletAllTask() && t.taskMgr.startTask()
            }
            guideHandShow(e) {
                if (8 == e) {
                    this.skill_repair.getChildByName("img_hand").visible = !0
                } else super.guideHandShow(e)
            }
            createGhost(e) {
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.hunterLayer.addChild(i);
                let s = i.addComponent(XHunterScript);
                s.init(e);
                let a = t.mapMgr.getHunterSpawnPos(e.spwanPoint);
                s.pos(a.x, a.y), this.hunters.push(s)
            }
            createBoxMonster(e, t) {
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.hunterLayer.addChild(i);
                let s = i.addComponent(XHunterScript);
                s.init(e), s.pos(t.x, t.y), this.hunters.push(s)
            }
            createFighter(e) {
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.hunterLayer.addChild(i);
                let s = i.addComponent(XFighterScript);
                s.init(e);
                let a = t.mapMgr.getHunterSpawnPos(e.spwanPoint);
                s.pos(a.x, a.y)
            }
            onDestroy() {
                super.onDestroy(), fx.EventCenter.I.off(XEventNames.E_Create_Ghost, this, this.createGhost), fx.EventCenter.I.off(XEventNames.E_Create_BoxMonster, this, this.createBoxMonster), fx.EventCenter.I.off(XEventNames.E_Create_Fighter, this, this.createFighter), t.buildingMgr.clearAllMapEquip()
            }
            }
        ////猜测是噬魂者模式
        class HuntGameScript extends XGameScript {
            constructor() {
                super(...arguments), this.equipArr = []
            }
            onInit() {
                super.onInit(), t.gameUI.hideOperateBtn(), this.box_equip = this.owner.getChildByName("box_equip"), this.box_equip.visible = !0, this.list_equip = this.box_equip.getChildByName("list_equip");
                let e = this.owner.getChildByName("box_skill");
                e.getChildByName("defender_skill").visible = !1;
                let i = e.getChildByName("hunter_skill");
                i.visible = !0, this.skill_yanluo = i.getChildByName("skill_yanluo"), this.skill_equip = i.getChildByName("skill_equip"), this.skill_yanluo.on(Laya.Event.CLICK, this, this.onClickYanluo), this.skill_equip.on(Laya.Event.CLICK, this, this.onClickShowEquip), this.img_kuangbao = i.getChildByName("img_kuangbao"), this.img_zhenhan = i.getChildByName("img_zhenhan"), this.img_random = i.getChildByName("img_random"), this.lb_random = this.img_random.getChildByName("lb_random"), this.img_kuangbao.visible = !1, this.img_zhenhan.visible = !1, this.img_random.visible = !1, this.img_kuangbao.on(Laya.Event.CLICK, this, this.onClickKuangbao), this.img_zhenhan.on(Laya.Event.CLICK, this, this.onClickZhenhan), this.img_random.on(Laya.Event.CLICK, this, this.onClickRandom), this.isPlayerBed = !0, this.characterControl = null, this.inputScript.hide(), this.list_equip.array = [0, 1, 2, 3, 4, 5], this.list_equip.renderHandler = new Laya.Handler(this, this.updateEquipItem)
            }
            initEvents() {
                super.initEvents(), fx.EventCenter.I.on(XEventNames.E_Rage_Refresh, this, this.rageRefresh), fx.EventCenter.I.on(XEventNames.E_Dizzy_Refresh, this, this.dizzyRefresh), fx.EventCenter.I.on(XEventNames.E_Yanluo_Show, this, this.yanluoShow), fx.EventCenter.I.on(XEventNames.E_MapEquip_take, this, this.takeMapEquip), fx.EventCenter.I.on(XEventNames.E_Hunter_Upgrade, this, this.onHunterUpgrade), fx.EventCenter.I.on(XEventNames.E_Create_Ghost, this, this.createGhost)
            }
            updateEquipItem(e) {
                let t = e.dataSource,
                    i = e.getChildByName("img_itemBg"),
                    s = i.getChildByName("img_equip"),
                    a = i.getChildByName("lb_name"),
                    n = e.getChildByName("img_delete");
                e.off(Laya.Event.CLICK, this, this.onClickEquip), n.off(Laya.Event.CLICK, this, this.onClickEquipDelete);
                let r = this.equipArr[t];
                if (!r) return s.visible = !1, a.visible = !1, void(n.visible = !1);
                s.visible = !0, a.visible = !0, isNaN(Number(this.curEquipIdx)) ? n.visible = !1 : n.visible = this.curEquipIdx == t, a.text = r.name, s.skin = r.url, e.on(Laya.Event.CLICK, this, this.onClickEquip, [t]), n.on(Laya.Event.CLICK, this, this.onClickEquipDelete, [t])
            }
            onClickEquip(e) {
                this.curEquipIdx != e ? this.curEquipIdx = e : this.curEquipIdx = null, this.list_equip.refresh()
            }
            onClickEquipDelete(e, i) {
                i.stopPropagation(), this.curEquipIdx = null;
                let s = this.equipArr.splice(e, 1);
                this.list_equip.refresh(), t.playerMgr.hunters[0].ownerScript.deleteEquip(s[0])
            }
            takeMapEquip(e) {
                6 != this.equipArr.length ? (XChoreUtil.playSound(131), this.equipArr.push(e), t.playerMgr.hunters[0].ownerScript.takeEquip(e), this.list_equip.refresh()) : XToast.show("装备已满不可拾取")
            }
            onHunterUpgrade(e) {
                let i = [2, 4, 7];
                t.user.gameInfo.hunterBox <= 0 ? this.img_random.visible = !1 : (this.img_random.visible = i.includes(e), this.lb_random.text = `${Math.min(3,t.user.gameInfo.hunterBox)}/3`)
            }
            rageRefresh() {
                this.img_kuangbao.visible = !0
            }
            dizzyRefresh() {
                this.img_zhenhan.visible = !0
            }
            yanluoShow() {
                this.skill_yanluo.visible = !0
            }
            onGameStart() {
                this.characterControl = this.hunters[0], this.isPlayerBed = !1, this.inputScript.show(), this.skill_equip.visible = !0
            }
            onClickMap(e) {}
            onUpdate() {
                super.onUpdate();
                let i = t.playerMgr.player;
                if (i && i.owner) {
                    let e = t.mapMgr.mapPosToStagePos(i.owner.x, i.owner.y);
                    this.img_kuangbao && this.img_kuangbao.pos(e.x - 65, e.y - 80), this.img_zhenhan && this.img_zhenhan.pos(e.x + 65, e.y - 80)
                }
                if (this.characterControl) {
                    if (this.owner.timer.currTimer - this.characterControl.data.dizzyStartTime < 1e3 * this.characterControl.data.dizzyDurSec) return;
                    this.characterControl.data.type == e.PlayerType.E_Hunter && this.characterControl.tryAttack();
                    let i = this.characterControl.node,
                        s = t.buildingMgr.getNearMapEquipByMapPos(i.x, i.y);
                    s && t.buildingMgr.takeMapEquip(s.x, s.y)
                }
            }
            onClickYanluo() {
                j.I.playVideo("猎梦者模式---阎罗降世", this, e => {
                    if (e) {
                        XAnalyticsUtil.useLevelItem("阎罗降世"), this.skill_yanluo.visible = !1;
                        let e = t.playerMgr.hunters[0];
                        e && (XChoreUtil.playSound(132), e.ownerScript.useYanluo())
                    }
                })
            }
            onClickShowEquip() {
                j.I.playVideo("猎梦者模式---召唤装备", this, e => {
                    if (e) {
                        XAnalyticsUtil.useLevelItem("召唤装备"), this.skill_equip.visible = !1;
                        let e = XRandomUtil.getIntRandom(1, 3);
                        e = Math.min(15, e + t.playerMgr.player.lv), t.buildingMgr.addMapEquip(e, !0)
                    }
                })
            }
            onClickKuangbao() {
                if (this.img_kuangbao.visible && this.characterControl) {
                    if (this.characterControl.data.isRage) return void XToast.show("正处于暴躁中，稍后再使用技能");
                    this.img_kuangbao.visible = !1, this.characterControl.performSkill("rage")
                }
            }
            onClickZhenhan() {
                this.img_zhenhan.visible && this.characterControl && (this.img_zhenhan.visible = !1, this.characterControl.performSkill("dizzy"))
            }
            onClickRandom() {
                XAnalyticsUtil.useLevelItem("猎梦者摇签盒"), this.img_random.visible = !1, t.user.gameInfo.hunterBox -= 1, t.user.saveToServer(), t.playerMgr.hunters[0].ownerScript.getSkill()
            }
            createGhost(e) {
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.hunterLayer.addChild(i);
                let s = i.addComponent(XHunterScript);
                s.init(e);
                let a = t.mapMgr.getHunterSpawnPos(e.spwanPoint);
                s.pos(a.x, a.y), this.hunters.push(s)
            }
            onDestroy() {
                super.onDestroy(), fx.EventCenter.I.off(XEventNames.E_Rage_Refresh, this, this.rageRefresh), fx.EventCenter.I.off(XEventNames.E_Dizzy_Refresh, this, this.dizzyRefresh), fx.EventCenter.I.off(XEventNames.E_Yanluo_Show, this, this.yanluoShow), fx.EventCenter.I.off(XEventNames.E_MapEquip_take, this, this.takeMapEquip), fx.EventCenter.I.off(XEventNames.E_Hunter_Upgrade, this, this.onHunterUpgrade), fx.EventCenter.I.off(XEventNames.E_Create_Ghost, this, this.createGhost), t.buildingMgr.clearAllMapEquip()
            }
        }
        class ServenGhostGameScript extends XGameScript {
            onInit() {
                super.onInit();
                let e = this.owner.getChildByName("box_skill").getChildByName("defender_skill");
                this.skill_repair = e.getChildByName("skill_repair"), this.skill_repair.on(Laya.Event.CLICK, this, this.onClickRepair)
            }
            initEvents() {
                super.initEvents(), fx.EventCenter.I.on(XEventNames.E_Create_Ghost, this, this.createGhost)
            }
            onClickMap(i) {
                if (!t.playerMgr.player.isBed) return;
                let s = i.stageX,
                    a = i.stageY,
                    n = t.mapMgr.stagePosToMapPos(s, a),
                    r = t.mapMgr.mapPosToGridPos(n.x, n.y);
                if (!t.gameMgr.canHandleGrid(r.x, r.y)) return void t.gameUI.hideAllMenu();
                let o = t.buildingMgr.getBuilding(r.x, r.y);
                if (o) {
                    if (!o.canHandle) return;
                    console.log("open upgrade ui"), t.gameUI.showUpgradeMeun(r.x, r.y, o), o.type == e.BuildType.bed || o.type == e.BuildType.door || (o.type, e.BuildType.tower)
                } else console.log("open build ui"), t.gameUI.showBuildMeun(r.x, r.y)
            }
            onClickRepair() {
                if (this.skill_repair._skillCD) return;
                let e = t.gameMgr.mineRoom;
                if (!t.playerMgr.player.isBed) return void XToast.show("入梦后才能维修");
                if (!t.buildingMgr.repairDoor(e)) return void XToast.show("无法修复");
                let i = fx.CfgMgr.instance.getConstant("repairTime");
                this.skill_repair._skillCD = !0, t.gameMgr.playSound(e.doorModel, 119), this.setBtnInCD(this.skill_repair, i, Laya.Handler.create(this, () => {
                    this.skill_repair._skillCD = !1
                }))
            }
            createGhost(e) {
                let i = new Laya.Box;
                i.width = i.height = 1, this.map.hunterLayer.addChild(i);
                let s = i.addComponent(XHunterScript);
                s.init(e);
                let a = t.mapMgr.getHunterSpawnPos(e.spwanPoint);
                s.pos(a.x, a.y), this.hunters.push(s)
            }
            onDestroy() {
                super.onDestroy(), fx.EventCenter.I.off(XEventNames.E_Create_Ghost, this, this.createGhost), t.buildingMgr.clearAllMapEquip()
            }
        }
        class InputScript extends Laya.Script {
            constructor() {
                super(...arguments), this.visible = !0, this.moveFlag = !1, this.whetherControl = !0, this.canHandle = !0
            }
            onAwake() {
                if (this.ownerUI = this.owner, !t.taskMgr.compeletAllTask()) {
                    this.box_guide = fx.Utils.createPrefab(T.Prefab_Guide), this.ownerUI.addChild(this.box_guide), this.box_guide.centerX = 0, this.box_guide.centerY = 300, fx.Utils.getDefaultUIFrameAnimation(this.box_guide).play(0, !0)
                }
                this.joystickNode = this.owner.getChildByName("joystickNode"), this.joystickNode.visible = !1, this.handle = this.joystickNode.getChildByName("handle"), this.input = new fx.V2, this.lastPos = new fx.V2, this.downPos = new fx.V2, this.ownerUI.on(Laya.Event.MOUSE_DOWN, this, this.onDown), Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMove), Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onUp), Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onUp)
            }
            onClick(e) {
                this.moveFlag || this.clickHandler.runWith(e)
            }
            onDown(e) {
                this.mouseDown = !0, this.moveFlag = !1;
                let t = e.stageX,
                    i = e.stageY;
                this.joystickNode.pos(t, i), this.visible && (this.joystickNode.visible = !0), this.drag(t, i), this.lastPos.setValue(t, i), this.downPos.setValue(t, i), this.downHandler && this.downHandler.runWith(e)
            }
            onMove(e) {
                if (!this.mouseDown || !this.whetherControl || !this.canHandle) return;
                this.box_guide && !this.box_guide.destroyed && (this.box_guide.destroy(), XToast.show("完成任务，逃出梦魇！"));
                let t = e.stageX,
                    i = e.stageY;
                this.drag(t, i);
                let s = t - this.lastPos.x,
                    a = i - this.lastPos.y;
                (Math.abs(s) > 1 || Math.abs(a) > 1) && (this.moveFlag, this.moveFlag = !0), this.moveHandler && this.moveHandler.runWith([t - this.lastPos.x, i - this.lastPos.y]), this.lastPos.setValue(t, i)
            }
            onUp(e) {
                this.mouseDown && (this.mouseDown = !1, this.input.setValue(0, 0), this.updateHandle(), this.joystickNode.visible = !1)
            }
            drag(e, t) {
                this.input.x = e - this.joystickNode.x, this.input.y = t - this.joystickNode.y;
                let i = (this.joystickNode.width - this.handle.width) / 2;
                fx.V2.scale(this.input, 1 / i, this.input), fx.V2.scalarLength(this.input) > 1 && fx.V2.normalize(this.input, this.input), this.updateHandle()
            }
            updateHandle() {
                let e = (this.joystickNode.width - this.handle.width) / 2;
                this.handle.centerX = this.input.x * e, this.handle.centerY = this.input.y * e
            }
            show() {
                this.visible = !0, this.joystickNode.visible = !0
            }
            hide() {
                this.visible = !1, this.joystickNode.visible = !1
            }
            stop() {
                this.mouseDown = !1, this.input.setValue(0, 0), this.updateHandle(), this.joystickNode.visible = !1
            }
            getlastpos() {
                return new fx.V2(this.lastPos.x - this.downPos.x, this.lastPos.y - this.downPos.y)
            }
        }
        class XGameScene extends e.ui.scenes.GameSceneUI {
            static getRes(...e) {
                return [T.Prefab_GuideFinger, T.Prefab_HealZoneEff, T.Prefab_IconTips, T.Prefab_OperateBtn, T.Prefab_BuildMenu, T.Prefab_UpgradeMenu, T.Prefab_BorrowMoney, T.Prefab_HealthBar, T.Prefab_BuildingCD, T.Prefab_SkillCD, T.Prefab_LabelTips, T.Prefab_Guide]
            }
            constructor(e, i) {
                super(), t.gameMgr.start(i.matchData)
            }
            onAdd() {
                let i;
                t.reporter.enterGame(), 
                t.gameMgr.inputScript = this.InputLayer.getComponent(InputScript), 
                t.gameMgr.gameMode == e.GameMode.E_Defense ? i = this.game.addComponent(DefenseGameScript) : 
                t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? i = this.game.addComponent(AngelOrGhostGameScript) : 
                t.gameMgr.gameMode == e.GameMode.E_Hunt ? (i = this.game.addComponent(HuntGameScript), this.box_resNum.visible = !1) : 
                t.gameMgr.gameMode == e.GameMode.E_SevenGhost && (i = this.game.addComponent(ServenGhostGameScript)), i.init(), 
                XChoreUtil.playMusic(103), XChoreUtil.playSound(115)
            }
        }
        class Cs extends e.ui.scenes.MainSceneUI {
            constructor(e, t) {
                super(), this.curAni = "idle", t && (this.from = t.from)
            }
            static getRes(...e) {
                return []
            }
            onAdd() {
                let e = "loading" == this.from;
                XAnalyticsUtil.enterMainScene(e), this.checkOpenCommond(e), this.checkGetWxGameGift(e), XChoreUtil.playMusic(104);
                if (t.user.gameInfo.failCnt + t.user.gameInfo.winCnt > 0 ? this.box_other.visible = !0 : this.box_other.visible = !1, "loading" == this.from) t.ui.open(l.TipsView);
                else if ("win" == this.from || "fail" == this.from) {
                    let e = t.user.gameInfo;
                    !e.isOpenEvaluate && e.winCnt + e.failCnt >= 2 && e.isLastWin ? t.ui.openPanel(l.EvaluateDialog) : t.gameMgr.isOpenSevenGhost ? t.ui.open(l.SevenGhostView) : (t.gameMgr.isShowTurntable = !0, t.ui.open(l.ShopDialog))
                } else t.ui.open(l.ShopDialog);
                this.initUI(), this.updateSkinShow(), this.initSeq(), this.updateRed()
            }
            initSeq() {
                Laya.Tween.clearAll(this.box_clo), Laya.Tween.clearAll(this.img_startGuang), Laya.Tween.clearAll(this.img_start1Guang), Laya.Tween.clearAll(this.img_start2Guang), Laya.Tween.clearAll(this.img_start3Guang), Laya.Tween.clearAll(this.img_mutouGuang), Laya.Tween.clearAll(this.img_huntGuang), Laya.Tween.clearAll(this.img_tzGuang), Laya.Tween.clearAll(this.img_rotGuang), this.box_clo.right = 0;
                let e = (new fx.Sequence).to({
                    right: -5540
                }, 6e4).exec(new Laya.Handler(this, () => {
                    this.box_clo.right = 0
                }));
                e.isRepeat = !0, e.run(this.box_clo), this.img_startGuang.alpha = 0;
                let t = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                t.isRepeat = !0, t.run(this.img_startGuang);
                let i = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                i.isRepeat = !0, i.run(this.img_start1Guang);
                let s = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                s.isRepeat = !0, s.run(this.img_start2Guang);
                let a = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                a.isRepeat = !0, a.run(this.img_start3Guang);
                let n = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                n.isRepeat = !0, n.run(this.img_mutouGuang);
                let r = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                r.isRepeat = !0, r.run(this.img_huntGuang);
                let o = (new fx.Sequence).fadeIn(1e3).fadeOut(1e3);
                o.isRepeat = !0, o.run(this.img_tzGuang);
                let l = (new fx.Sequence).rotate(360, 9e3).exec(new Laya.Handler(this, () => {
                    this.img_rotGuang.rotation = 0
                }));
                l.isRepeat = !0, l.run(this.img_rotGuang)
            }
            initUI() {
                t.user.gameInfo.isStartLv ? this.img_cjMask.visible = !1 : this.img_cjMask.visible = !0, this.btn_setting.on(Laya.Event.CLICK, this, this.onClickSetting), this.btn_hunter.on(Laya.Event.CLICK, this, this.onClickHunter), this.btn_angelOrGhost.on(Laya.Event.CLICK, this, this.onClickAngelOrGhost), this.btn_sevenGhost.on(Laya.Event.CLICK, this, this.onClickSevenGhost), this.btn_start.on(Laya.Event.CLICK, this, this.onClickStart), this.btn_skin.on(Laya.Event.CLICK, this, this.onClickSkin), this.btn_shop.on(Laya.Event.CLICK, this, this.onClickShop), this.btn_rank.on(Laya.Event.CLICK, this, this.onClickRank), this.btn_notice.on(Laya.Event.CLICK, this, this.onClickNotice), this.btn_skinChoujiang.on(Laya.Event.CLICK, this, this.onClickSkinChoujiang), this.btn_propChoujiang.on(Laya.Event.CLICK, this, this.onClickPropChoujiang), this.btn_share.on(Laya.Event.CLICK, this, this.onClickShare), this.box_tian.on(Laya.Event.CLICK, this, this.onClickTian), this.updateInvite(), this.btn_invite.on(Laya.Event.CLICK, this, this.onClickInvite), this.btn_invite.anchorX = this.btn_invite.anchorY = .5;
                let e = (new fx.Sequence).delay(2e3).rotate(-13, 60).rotate(13, 120).rotate(-13, 120).rotate(13, 120).rotate(-13, 120).rotate(0, 60);
                e.isRepeat = !0, e.run(this.btn_invite), fx.EventCenter.I.on(we.Invite_Btn_Update, this, this.updateInvite)
            }
            updateInvite() {
                this.btn_invite.visible = t.user.gameInfo.inviteClaimed < t.cfg.inviteCfg.length
            }
            onClickInvite() {
                t.ui.open(l.InviteDialog)
            }
            onClickTian() {
                t.ui.open(l.BuyTianDialog)
            }
            onClickNotice() {
                t.ui.open(l.NoticeDialog)
            }
            onClickSetting() {
                t.ui.open(l.SettingDialog)
            }
            onClickAngelOrGhost() {
                XAnalyticsUtil.clickStart("木头人模式"), t.user.gameInfo.isUnlockAngelOrGhost ? t.ui.open(l.MatchingView, {
                    mode: e.GameMode.E_AngelOrGhost
                }) : t.ui.open(l.AogUnlockDialog)
            }
            onClickSevenGhost() {
                XAnalyticsUtil.clickStart("挑战模式"), t.user.gameInfo.isUnlockSevenGhost ? t.ui.open(l.SevenGhostView) : t.ui.open(l.SevenGhostUnlockDialog)
            }
            onClickStart() {
                let i = t.user.gameInfo;
                if (XAnalyticsUtil.clickStart("普通模式"), i.todayMaxLv > 0) {
                    1 == t.controller.checkABTest("expt_subscribe", [0, 1]) && j.I.subscribeMessage(), i.isLastWin && i.curLv == i.lastLv && i.curLv < t.cfg.difficultCfg.length ? t.ui.open(l.DifficultChooseDialog, {
                        canChoose: !0
                    }) : t.ui.open(l.DifficultChooseDialog)
                } else t.ui.open(l.MatchingView, {
                    mode: e.GameMode.E_Defense
                })
            }
            onClickHunter() {
                XAnalyticsUtil.clickStart("噬魂者模式");
                let i = t.user.gameInfo;
                if (i.failCnt + i.winCnt == 0) XToast.show("完成一局游戏后开启");
                else if (i.isUnlockHunter) {
                    let i = t.user.gameInfo;
                    i.todayHunterMaxLv > 0 ? i.isLastHunterWin && i.curHunterLv == i.lastHunterLv && i.curHunterLv < t.cfg.hunterDifficultCfg.length ? t.ui.open(l.HunterDifficultChooseDialog, {
                        canChoose: !0
                    }) : t.ui.open(l.HunterDifficultChooseDialog) : t.ui.open(l.HunterMatchingView, {
                        mode: e.GameMode.E_Hunt
                    })
                } else t.ui.open(l.HunterUnlockDialog)
            }
            onClickSkin() {
                t.user.gameInfo.showSkinRed = !1, this.updateRedSkin(), t.ui.open(l.SkinView, {
                    handler: new Laya.Handler(this, this.updateSkinShow.bind(this))
                })
            }
            onClickShop() {
                t.ui.open(l.ShopDialog)
            }
            async onClickRank() {
                if (await t.user.userInfo.checkUserProfile(), this.destroyed) return;
                let e = t.user.gameInfo.todayMaxLv;
                e && await t.rankMgr.setCustomRankValue("score_day", e, t.user.gameInfo.curSkinId);
                let i = t.user.gameInfo.todayHunterMaxLv;
                if (i && await t.rankMgr.setCustomRankValue("score_hunter_day", i, t.user.gameInfo.curHunterSkinId), this.destroyed) return;
                let s = await t.rankMgr.getCustomRankList("score_day"),
                    a = await t.rankMgr.getCustomRankList("score_hunter_day");
                this.destroyed || t.ui.open(l.RankView, {
                    info: s,
                    hunterInfo: a
                })
            }
            onClickSkinChoujiang() {
                t.ui.open(l.SkinFragmentDialog)
            }
            onClickPropChoujiang() {
                t.user.gameInfo.isStartLv ? t.ui.open(l.TurntableView, {
                    handler: new Laya.Handler(this, this.updateRedCj.bind(this))
                }) : XToast.show("功能未开放，请明日再来~")
            }
            updateSkinShow() {
                let e = t.cfg.skin.get(t.user.gameInfo.curSkinId);
                this.skinSpine && (this.skinSpine.destroy(), this.skinSpine = null), e.skinPath.includes(".bin") ? (this.img_skin.skin = "", t.assetLoader.createSpine(e.skinPath, e => {
                    this.skinSpine = e, e.speed = 1, this.box_skin.addChild(e), this.skinSpine.play(this.curAni, !0)
                })) : this.img_skin.skin = e.skinShowPath
            }
            onClickShare() {
                t.user.gameInfo.dailyShare, XAnalyticsUtil.share("主界面分享"), j.I.share(!1, null, "主界面分享")
            }
            updateRed() {
                this.updateRedSkin(), this.updateRedCj(), this.updateRedShare()
            }
            updateRedSkin() {
                this.img_redSkin.visible = t.user.gameInfo.showSkinRed
            }
            updateRedCj() {
                let e = !1;
                t.user.gameInfo.isStartLv && t.user.gameInfo.canPlayTurnTable && t.user.gameInfo.dailyShareCnt < 3 && (e = !0), this.img_redCj.visible = e
            }
            updateRedShare() {
                let e = !1;
                t.user.gameInfo.dailyShare, this.img_redShare.visible = e
            }
            checkGetWxGameGift(e) {
                let i = window.wx;
                i && (i.onShow(() => {
                    t.rewardMgr.getWxGameGift()
                }), e && t.rewardMgr.getWxGameGift())
            }
            checkOpenCommond(e) {
                let i = t.user.gameInfo;
                e || i.isOpenCommond || (i.isOpenCommond = !0, i.isCommond || (t.user.saveToServer(), j.I.showRecommend()))
            }
            onDestroy() {
                fx.EventCenter.I.off(we.Invite_Btn_Update, this, this.updateInvite)
            }
        }
        class _s extends e.ui.scenes.view.ExitViewUI {
            constructor(e, t) {
                super()
            }
            onAwake() {
                this.btn_continue.on(Laya.Event.CLICK, this, this.onClickContinue), this.btn_back.on(Laya.Event.CLICK, this, this.onClickBack);
                let e = t.user.gameInfo;
                e.winCnt + e.failCnt > 0 && (this.img_des.visible = !0), t.gameMgr.pauseGame(), fx.EventCenter.I.on(fx.BaseEvent.E_APP_ON_RESUME, this, this.onAppResume)
            }
            onAppResume() {
                t.gameMgr.pauseGame()
            }
            onClickContinue() {
                t.ui.close(this), t.gameMgr.resumeGame()
            }
            onClickBack() {
                t.ui.close(this), t.gameMgr.resumeGame(), t.user.gameInfo.isExitGame = !0, t.user.saveToServer(), t.reporter.exitGame(), t.ui.changeScene(l.MainScene);
                let i = "",
                    s = "默认",
                    a = t.user.gameInfo.curSkinId;
                if (s = t.cfg.skin.get(a).name, t.gameMgr.gameMode == e.GameMode.E_Defense) i = "普通模式";
                else if (t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost) i = "木头人模式", t.playerMgr.player.isAngel ? s = "救援者" : t.playerMgr.player.isGhost && (s = "执行人");
                else if (t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                    i = "噬魂者模式", s = t.cfg.skin.get(t.user.gameInfo.curHunterSkinId).name
                } else t.gameMgr.gameMode == e.GameMode.E_SevenGhost && (i = "挑战模式", t.user.gameInfo.curSevenGhostLv = 1, t.user.saveToServer());
                XAnalyticsUtil.exitLevel(i, s)
            }
            onDestroy() {
                fx.EventCenter.I.off(fx.BaseEvent.E_APP_ON_RESUME, this, this.onAppResume)
            }
        }
        class bs extends e.ui.scenes.view.RankViewUI {
            constructor(e, t) {
                super(), this.pageArr = ["defense", "hunter"], this.curPage = "defense", t && (this.info = t.info, this.hunterInfo = t.hunterInfo, t.isHunter && (this.curPage = "hunter"))
            }
            onAwake() {
                this.abTestNum = 1, this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_share.on(Laya.Event.CLICK, this, this.onClickShare), this.btn_share_1.on(Laya.Event.CLICK, this, this.onClickShare), this.btn_defense.on(Laya.Event.CLICK, this, this.onClickPage, ["defense"]), this.btn_hunter.on(Laya.Event.CLICK, this, this.onClickPage, ["hunter"]), this.updateShow(), this.initDefenseSelf(), this.initHunterSelf(), this.initList()
            }
            onClickPage(e) {
                this.curPage != e && (this.curPage = e, this.updateShow())
            }
            updateShow() {
                this.curPage == this.pageArr[1] ? (this.img_bg.skin = "res/ui/rank/bg1.jpg", this.box_defense.visible = !1, this.box_hunter.visible = !0, this.btn_defense.skin = "res/ui/rank/img_defense_1.png", this.btn_hunter.skin = "res/ui/rank/img_hunter.png") : this.curPage == this.pageArr[0] && (this.img_bg.skin = "res/ui/rank/bg.jpg", this.box_defense.visible = !0, this.box_hunter.visible = !1, this.btn_defense.skin = "res/ui/rank/img_defense.png", this.btn_hunter.skin = "res/ui/rank/img_hunter_1.png")
            }
            initList() {
                this.initDefense(), this.initHunter()
            }
            initHunter() {
                if (this.hunterInfo) {
                    let e = this.hunterInfo.list.splice(0, 3);
                    this.initHunterTop(this.box_first_1, e[0]), this.initHunterTop(this.box_second_1, e[1]), this.initHunterTop(this.box_third_1, e[2]), this.list_rank_1.array = this.hunterInfo.list, this.list_rank_1.renderHandler = new Laya.Handler(this, this.updateHunterItem), this.list_rank_1.vScrollBarSkin = ""
                }
            }
            initHunterTop(e, i) {
                if (i) {
                    let s = e.getChildByName("img_head"),
                        a = e.getChildByName("img_nameBg").getChildByName("lb_name"),
                        n = e.getChildByName("lb_score");
                    if (i.value)
                        if (i.value > t.cfg.hunterDifficultCfg.length) {
                            let e = t.cfg.hunterDifficultCfg.get(t.cfg.hunterDifficultCfg.length);
                            0 != this.abTestNum ? n.text = `${e.name} ${i.value-t.cfg.hunterDifficultCfg.length}` : n.text = `${e.name}`
                        } else {
                            let e = t.cfg.hunterDifficultCfg.get(i.value);
                            n.text = `${e.name}`
                        } else n.text = "未通关";
                    let r = 10001;
                    i.extraData && i.extraData.skinId && (r = Number(i.extraData.skinId), isNaN(r) && (r = 10001));
                    let o = t.cfg.skin.get(r);
                    o || (o = t.cfg.skin.get(10001)), s.skin = o.skinShowPath;
                    let l = i.name;
                    l ? l.length : l = `玩家${i.pid}`, a.text = l
                }
            }
            initHunterSelf() {
                if (this.hunterInfo && this.hunterInfo.rank && this.hunterInfo.rank <= 100 ? this.lb_rank_1.text = `${this.hunterInfo.rank}` : this.lb_rank_1.text = "未上榜", this.hunterInfo && this.hunterInfo.value)
                    if (this.hunterInfo.value > t.cfg.hunterDifficultCfg.length) {
                        let e = t.cfg.hunterDifficultCfg.get(t.cfg.hunterDifficultCfg.length);
                        0 != this.abTestNum ? this.lb_score_1.text = `${e.name} ${this.hunterInfo.value-t.cfg.hunterDifficultCfg.length}` : this.lb_score_1.text = `${e.name} ${this.hunterInfo.value}`
                    } else {
                        let e = t.cfg.hunterDifficultCfg.get(this.hunterInfo.value);
                        this.lb_score_1.text = `${e.name}`
                    } else this.lb_score_1.text = "未通关";
                let e = t.cfg.skin.get(t.user.gameInfo.curHunterSkinId);
                this.img_head_1.skin = e.headIcon;
                let i = t.user.userInfo.name;
                i ? i.length : i = `玩家${t.user.userInfo.playerID}`, this.lb_name_1.text = i
            }
            updateHunterItem(e) {
                let i = e.dataSource;
                if (!i) return;
                let s = e.getChildByName("lb_rank"),
                    a = e.getChildByName("img_head"),
                    n = e.getChildByName("lb_name"),
                    r = e.getChildByName("lb_score");
                if (s.text = `${i.rank}`, i.value)
                    if (i.value > t.cfg.hunterDifficultCfg.length) {
                        let e = t.cfg.hunterDifficultCfg.get(t.cfg.hunterDifficultCfg.length);
                        0 != this.abTestNum ? r.text = `${e.name} ${i.value-t.cfg.hunterDifficultCfg.length}` : r.text = `${e.name}`
                    } else {
                        let e = t.cfg.hunterDifficultCfg.get(i.value);
                        r.text = `${e.name}`
                    } else r.text = "轻松";
                let o = 10001;
                i.extraData && (o = Number(i.extraData.skinId), isNaN(o) && (o = 10001));
                let l = t.cfg.skin.get(o);
                l || (l = t.cfg.skin.get(10001)), a.skin = l.headIcon;
                let h = i.name;
                h ? h.length : h = `玩家${i.pid}`, n.text = h
            }
            initDefense() {
                if (this.info) {
                    let e = this.info.list.splice(0, 3);
                    this.initDefenseTop(this.box_first, e[0]), this.initDefenseTop(this.box_second, e[1]), this.initDefenseTop(this.box_third, e[2]), this.list_rank.array = this.info.list, this.list_rank.renderHandler = new Laya.Handler(this, this.updateDefenseItem), this.list_rank.vScrollBarSkin = ""
                }
            }
            initDefenseTop(e, i) {
                if (i) {
                    let s = e.getChildByName("img_head"),
                        a = e.getChildByName("img_nameBg").getChildByName("lb_name"),
                        n = e.getChildByName("lb_score");
                    if (i.value)
                        if (i.value > t.cfg.difficultCfg.length) {
                            let e = t.cfg.difficultCfg.get(t.cfg.difficultCfg.length);
                            0 != this.abTestNum ? n.text = `${e.name} ${i.value-t.cfg.difficultCfg.length}` : n.text = `${e.name}`
                        } else {
                            let e = t.cfg.difficultCfg.get(i.value);
                            n.text = `${e.name}`
                        } else n.text = "未通关";
                    let r = 1001;
                    i.extraData && i.extraData.skinId && (r = Number(i.extraData.skinId), isNaN(r) && (r = 1001));
                    let o = t.cfg.skin.get(r);
                    o || (o = t.cfg.skin.get(1001)), s.skin = o.skinBedPath;
                    let l = i.name;
                    l ? l.length : l = `玩家${i.pid}`, a.text = l
                }
            }
            initDefenseSelf() {
                if (this.info && this.info.rank && this.info.rank <= 100 ? this.lb_rank.text = `${this.info.rank}` : this.lb_rank.text = "未上榜", this.info && this.info.value)
                    if (this.info.value > t.cfg.difficultCfg.length) {
                        let e = t.cfg.difficultCfg.get(t.cfg.difficultCfg.length);
                        0 != this.abTestNum ? this.lb_score.text = `${e.name} ${this.info.value-t.cfg.difficultCfg.length}` : this.lb_score.text = `${e.name}}`
                    } else {
                        let e = t.cfg.difficultCfg.get(this.info.value);
                        this.lb_score.text = `${e.name}`
                    } else this.lb_score.text = "未通关";
                let e = t.cfg.skin.get(t.user.gameInfo.curSkinId);
                this.img_head.skin = e.headIcon;
                let i = t.user.userInfo.name;
                i ? i.length : i = `玩家${t.user.userInfo.playerID}`, this.lb_name.text = i
            }
            updateDefenseItem(e) {
                let i = e.dataSource;
                if (!i) return;
                let s = e.getChildByName("lb_rank"),
                    a = e.getChildByName("img_head"),
                    n = e.getChildByName("lb_name"),
                    r = e.getChildByName("lb_score");
                if (s.text = `${i.rank}`, i.value)
                    if (i.value > t.cfg.difficultCfg.length) {
                        let e = t.cfg.difficultCfg.get(t.cfg.difficultCfg.length);
                        0 != this.abTestNum ? r.text = `${e.name} ${i.value-t.cfg.difficultCfg.length}` : r.text = `${e.name}`
                    } else {
                        let e = t.cfg.difficultCfg.get(i.value);
                        r.text = `${e.name}`
                    } else r.text = "轻松";
                let o = 1001;
                i.extraData && (o = Number(i.extraData.skinId), isNaN(o) && (o = 1001));
                let l = t.cfg.skin.get(o);
                l || (l = t.cfg.skin.get(1001)), a.skin = l.headIcon;
                let h = i.name;
                h ? h.length : h = `玩家${i.pid}`, n.text = h
            }
            onClickClose() {
                t.ui.close(this)
            }
            onClickShare() {
                XAnalyticsUtil.share("排行榜分享"), j.I.share(!1, null, "排行榜分享")
            }
        }
        class ws extends e.ui.scenes.view.SkinViewUI {
            constructor(e, t) {
                super(), t && (this.handler = t.handler)
            }
            onAwake() {
                let e = t.cfg.skin.get(t.user.gameInfo.curSkinId);
                this.updateSkin(e), this.initSkinList(e), this.updateTypeSkinList(e), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                t.ui.close(this)
            }
            updateSkin(e) {
                this.lb_curSkinName.text = e.name, this.skinSpine && (this.skinSpine.destroy(), this.skinSpine = null), e.skinPath.includes(".bin") ? (this.img_skinShow.skin = "", t.assetLoader.createSpine(e.skinPath, e => {
                    this.skinSpine = e, this.box_skin.addChild(e), this.skinSpine.play("idle", !0)
                })) : this.img_skinShow.skin = e.skinShowPath
            }
            initSkinList(e) {
                this.list_skin.array = t.cfg.getPlayerSkinTypeArr(), this.list_skin.renderHandler = new Laya.Handler(this, this.updateSkinItem), this.list_skin.hScrollBarSkin = "", this.timer.callLater(this, () => {
                    this.list_skin.scrollTo(e.skinType - 1)
                })
            }
            updateSkinItem(e) {
                let i = e.dataSource,
                    s = t.user.gameInfo.getSkinTypeShow(i),
                    a = t.cfg.skin.get(s),
                    n = e.getChildByName("img_itemBg"),
                    r = n.getChildByName("img_skin"),
                    o = n.getChildByName("img_using"),
                    l = n.getChildByName("img_mask"),
                    h = l.getChildByName("img_video");
                r.skin = a.skinShowPath, o.visible = t.user.gameInfo.curSkinId == s;
                let d = t.user.gameInfo.isUnlockSkin(s);
                l.visible = !d, h.visible = 1 == a.unlock.way, n.skin = d ? "res/ui/skin/img_cur.png" : "res/ui/skin/img_normal.png", n.off(Laya.Event.CLICK, this, this.onClickSkin), n.on(Laya.Event.CLICK, this, this.onClickSkin, [a, d])
            }
            onClickSkin(e, i) {
                if (i) this.updateTypeSkinList(e);
                else switch (e.unlock.way) {
                    case 1:
                        j.I.playVideo("解锁皮肤", this, i => {
                            i && (t.user.gameInfo.unlockSkin(e.id), t.user.saveToServer(), this.updateTypeSkinList(e))
                        });
                        break;
                    case 2:
                        break;
                    case 3:
                        t.ui.open(l.InviteDialog, {
                            cb: new Laya.Handler(this, () => {
                                this.updateTypeSkinList(e)
                            })
                        }), XToast.show("邀请新玩家解锁")
                }
            }
            updateTypeSkinList(e) {
                if (!t.user.gameInfo.isUnlockSkin(e.id)) return;
                let i = t.cfg.getSkinArrBySkinType(e.skinType);
                this.list_typeSkin.array = i, this.list_typeSkin.renderHandler = new Laya.Handler(this, this.updateTypeSkinItem), this.list_typeSkin.width = 101 * i.length + 10 * (i.length - 1), t.user.gameInfo.curSkinId != e.id && (t.user.gameInfo.curSkinId = e.id, this.updateSkin(e), this.list_skin.refresh())
            }
            updateTypeSkinItem(e) {
                let i = e.dataSource,
                    s = t.cfg.skin.get(i),
                    a = e.getChildByName("img_itemBg"),
                    n = a.getChildByName("img_skin"),
                    r = a.getChildByName("lb_fragment"),
                    o = r.getChildByName("img_fragment"),
                    l = a.getChildByName("img_mask");
                if (a.skin = "res/ui/skin/img_normal_1.png", t.user.gameInfo.isUnlockSkin(i)) r.visible = !1, l.visible = !1, t.user.gameInfo.curSkinId == i && (a.skin = "res/ui/skin/img_cur_1.png");
                else if (2 == s.unlock.way) {
                    let e = t.user.gameInfo.getOwnSkinFragmentCnt(s.skinType, s.fragmentType);
                    s.fragmentType ? o.skin = `res/ui/skin/skinFragment/${s.skinType}_${s.fragmentType}.png` : o.skin = `res/ui/skin/skinFragment/${s.skinType}.png`, r.text = `${e}/${s.unlock.num}`, e < s.unlock.num ? r.color = "#f03737" : r.color = "#69d675", o.visible = !0, r.visible = !0, l.visible = !0
                } else o.visible = !1, r.visible = !1, l.visible = !0;
                n.skin = s.skinShowPath, a.off(Laya.Event.CLICK, this, this.onClickTypeSkin), a.on(Laya.Event.CLICK, this, this.onClickTypeSkin, [s])
            }
            onClickTypeSkin(e) {
                let i = t.user.gameInfo;
                if (i.isUnlockSkin(e.id)) this.setSkinTypeShow(e);
                else if (2 == e.unlock.way) {
                    let s = i.getOwnSkinFragmentCnt(e.skinType, e.fragmentType);
                    if (s >= e.unlock.num) i.useSkinFragmentData(e.skinType, s, e.fragmentType), i.unlockSkin(e.id), t.user.saveToServer(), this.setSkinTypeShow(e), this.list_typeSkin.refresh();
                    else {
                        XToast.show("碎片不足");
                        let i = new Laya.Handler(this, () => {
                            this.list_skin.refresh(), this.list_typeSkin.refresh()
                        });
                        t.ui.openPanel(l.SkinFragmentDialog, {
                            handler: i,
                            curFragmentType: e.fragmentType,
                            from: "SkinView"
                        })
                    }
                } else 3 == e.unlock.way ? (t.ui.open(l.InviteDialog, {
                    cb: new Laya.Handler(this, () => {
                        i.isUnlockSkin(e.id) && this.setSkinTypeShow(e), this.list_typeSkin.refresh()
                    })
                }), XToast.show("邀请新玩家解锁")) : 11 == e.unlock.way && XToast.show("通关挑战模式解锁")
            }
            setSkinTypeShow(e) {
                let i = t.user.gameInfo;
                i.setSkinTypeShow(e.id, e.skinType), i.curSkinId = e.id, this.updateSkin(e), this.list_skin.refresh(), this.list_typeSkin.refresh()
            }
            onDestroy() {
                this.handler && this.handler.run()
            }
        }
        class Ss extends e.ui.scenes.view.TipsViewUI {
            constructor(e, t) {
                super()
            }
            onAwake() {
                XAnalyticsUtil.tipsShow(), this.btn_agree.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                if (XAnalyticsUtil.tipsClick(), t.user.userInfo.isNewPlayer) {
                    let [i, s] = t.gameMgr.getPlayer(), a = t.cfg.map.get(1);
                    Laya.loader.load(a.path, new Laya.Handler(this, n => {
                        let r = t.gameMgr.match(e.GameMode.E_Defense, i, s, a, n, !0);
                        XAnalyticsUtil.enterLevel(t.user.gameInfo.curLv), t.ui.changeScene(l.GameScene, {
                            matchData: r
                        })
                    }))
                } else t.ui.close(this), t.user.gameInfo.isOpenNewSkin || (t.user.gameInfo.isOpenNewSkin = !0, t.user.saveToServer(), t.ui.openPanel(l.SkinFragmentDialog))
            }
        }
        class Is extends e.ui.scenes.view.TurntableViewUI {
            constructor(e, t) {
                super(), this.prizeArr = ["1001_1", "5002_1", "6018_1", "3005_1", "3007_1", "3002_1", "6021_1", "6017_1", "5005_1", "3008_1", "3009_1", "7777_1", "3006_1", "6023_1", "5000_1", "5000_2", "5000_3", "4000_1", "4000_2", "4000_3", "4000_5"], this.coinNumWeight = [40, 20, 10, 8, 6, 5], this.magicNumWeight = [30, 15, 10, 8, 5, 5, 4, 4, 4, 4], this.buildNumWeight = [25, 15, 8, 8, 5, 5, 4, 4, 4, 4], this.coinNum = [25, 99, 199, 399, 999, 9999], this.magicNum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], this.buildNum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], this.coinVideoWeight = [30, 60, 50, 2, 1, .1], this.magicVideoWeight = [20, 20, 60, 20, 10, 5, 1, 1, 1, 1], this.buildVideoWeight = [20, 20, 60, 20, 10, 5, 1, 1, 1, 1], this.coinShareWeight = [150, 50, 10, 2, 1, .1], this.magicShareWeight = [150, 100, 60, 20, 10, 5, 1, 1, 1, 1], this.buildShareWeight = [150, 100, 60, 20, 10, 5, 1, 1, 1, 1], this.shareRewardWeight = [], this.videoRewardWeight = [], this.rewardArr = [], t && (this.handler = t.handler)
            }
            onAdd() {
                this.getPrizeCnt = 0, this.initReward(), this.updateUI(), this.img_close.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_share.on(Laya.Event.CLICK, this, this.onClickShare), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo)
            }
            initReward() {
                let e = t.user.gameInfo;
                !e.isGetPrize && e.prizeArr && 0 != e.prizeArr.length || (e.isGetPrize = !1, e.prizeArr = this.randomReward(), t.user.saveToServer()), this.initUI(e.prizeArr)
            }
            randomReward() {
                let e = [];
                e = (e = (e = e.concat(this.coinNumWeight)).concat(this.magicNumWeight)).concat(this.buildNumWeight);
                let t = [];
                for (let i = 0; i < e.length; i++) t.push({
                    o: i,
                    weight: e[i]
                });
                let i = [];
                for (let e = 0; e < 8; e++) {
                    let e, s = fx.Utils.takeOneByWeight(t)[0];
                    e = s <= this.coinNumWeight.length - 1 ? [0, s] : s <= this.coinNumWeight.length + this.magicNumWeight.length - 1 ? [1, s - this.coinNumWeight.length] : s <= this.coinNumWeight.length + this.magicNumWeight.length + this.buildNumWeight.length - 1 ? [2, s - this.coinNumWeight.length - this.magicNumWeight.length] : [0, 0], i.push(e)
                }
                return i
            }
            initUI(e) {
                this.shareRewardWeight = [], this.videoRewardWeight = [];
                let t = this.box_turntable.getChildren();
                for (let i = 0; i < t.length; i++) {
                    let s = t[i],
                        a = s.getChildByName("img_select"),
                        n = s.getChildByName("img_icon"),
                        r = s.getChildByName("lb_num");
                    a.alpha = 0;
                    let o = 0,
                        l = 0;
                    if (0 == e[i][0]) {
                        let t = this.coinNum[e[i][1]];
                        r.text = `${t}`, o = this.coinShareWeight[e[i][1]], l = this.coinVideoWeight[e[i][1]], n.skin = t > this.coinNum[3] ? "res/ui/turnTable/icon/coin_3.png" : t > this.coinNum[1] ? "res/ui/turnTable/icon/coin_2.png" : "res/ui/turnTable/icon/coin_1.png", this.rewardArr.push([0, t])
                    } else if (1 == e[i][0]) {
                        let t = this.magicNum[e[i][1]];
                        r.text = `${t}`, o = this.magicShareWeight[e[i][1]], l = this.magicVideoWeight[e[i][1]], n.skin = t > this.magicNum[6] ? "res/ui/turnTable/icon/box_3.png" : t > this.magicNum[3] ? "res/ui/turnTable/icon/box_2.png" : "res/ui/turnTable/icon/box_1.png", this.rewardArr.push([1, t])
                    } else if (2 == e[i][0]) {
                        let t = this.buildNum[e[i][1]];
                        r.text = `${t}`, o = this.buildShareWeight[e[i][1]], l = this.buildVideoWeight[e[i][1]], n.skin = t > this.buildNum[6] ? "res/ui/turnTable/icon/prop_3.png" : t > this.buildNum[3] ? "res/ui/turnTable/icon/prop_2.png" : "res/ui/turnTable/icon/prop_1.png", this.rewardArr.push([2, t])
                    }
                    this.shareRewardWeight.push(o), this.videoRewardWeight.push(l), s.name = `${i}`
                }
            }
            updateUI() {
                1 == this.getPrizeCnt ? (this.btn_video.visible = !0, this.btn_share.visible = !1, this.btn_video.gray = !1, this.btn_video.mouseEnabled = !0) : 0 == this.getPrizeCnt && (this.btn_share.visible = !0, this.btn_video.visible = !1, this.btn_share.gray = !1, this.btn_share.mouseEnabled = !0)
            }
            rotate(e) {
                this.img_bulb_2.visible = !0;
                let t = (new fx.Sequence).delay(500).exec(new Laya.Handler(this, () => {
                    this.img_bulb_2.visible = !1
                })).delay(500).exec(new Laya.Handler(this, () => {
                    this.img_bulb_2.visible = !0
                }));
                t.isRepeat = !0, t.run(this.img_bulb_2), this.getPrizeCnt += 1, this.lastPrizeIdx = e, this.btn_video.gray = !0, this.btn_video.mouseEnabled = !1, this.btn_share.gray = !0, this.btn_share.mouseEnabled = !1, this.img_close.mouseEnabled = !1, this.box_turntable.rotation %= 360;
                let i = 45 * e + 2520 + 22,
                    s = 1,
                    a = 0,
                    n = () => {
                        if (a == i) {
                            t.pause(), t.recover(), this.box_turntable.clearTimer(this, n);
                            let i = this.box_turntable.getChildByName(`${e}`).getChildByName("img_select");
                            return void(new fx.Sequence).to({
                                alpha: 1
                            }, 200).to({
                                alpha: 0
                            }, 200).to({
                                alpha: 1
                            }, 200).exec(Laya.Handler.create(this, () => {
                                this.addReward(e), this.img_close.mouseEnabled = !0, this.updateUI()
                            })).run(i)
                        }
                        a = a + s > i ? i : a + s, this.box_turntable.rotation = a;
                        let r = i - a < 500 ? -.1 : 1;
                        s = Math.clamp(s + r, 1, 10)
                    };
                this.box_turntable.timer.frameLoop(1, this, n)
            }
            onClickShare() {
                t.user.gameInfo.dailyShareCnt >= 3 ? XToast.show("今日分享次数已达上限，请明日再来") : t.user.gameInfo.canPlayTurnTable ? (XAnalyticsUtil.share("抽奖分享"), j.I.share(!1, e => {
                    if (e) {
                        t.user.gameInfo.canPlayTurnTable = !1, t.user.gameInfo.dailyShareCnt += 1, t.user.saveToServer();
                        let e = this.getReward();
                        this.rotate(e), t.reporter.lotteryCnt(1), XAnalyticsUtil.lotteryCnt(1), this.handler && this.handler.run()
                    }
                }, "抽奖分享")) : XToast.show("完成一局后再来抽吧~")
            }
            onClickVideo() {
                j.I.playVideo("抽奖", this, e => {
                    if (e) {
                        let e = this.getReward();
                        this.rotate(e), t.reporter.lotteryCnt(2), XAnalyticsUtil.lotteryCnt(2)
                    }
                })
            }
            getReward() {
                let e = this.shareRewardWeight;
                this.getPrizeCnt && (e = this.videoRewardWeight);
                let t = 0;
                for (const i of e) t += i;
                let i = fx.Utils.getNumberRandom(0, t),
                    s = 0;
                for (let t = 0; t < e.length; t++)
                    if (i <= (s += e[t])) return this.lastPrizeIdx == t ? (console.log("重复上次奖品，重抽"), this.getReward()) : t;
                return e.length - 1
            }
            addReward(e) {
                XChoreUtil.playSound(127), t.user.gameInfo.isGetPrize = !0;
                let i = this.rewardArr[e],
                    s = i[1];
                if (0 == i[0]) t.user.gameInfo.addCoin(s), XToast.show(`恭喜抽得${s}铜币`), t.reporter.getCoinCnt("抽奖界面");
                else if (1 == i[0]) t.user.gameInfo.addOwnBuildData(6666, s, 20), XToast.show(`恭喜抽得${s}个摇签盒`);
                else if (2 == i[0]) {
                    let e = [];
                    XToast.show(`恭喜抽得${s}个道具`);
                    for (let i = 0; i < s; i++) {
                        let i = fx.Utils.randomInArray(this.prizeArr);
                        e.push(i), t.user.gameInfo.addOwnPrizeData(i)
                    }
                    t.ui.open(l.TurntableRewardDialog, {
                        rewardArr: e
                    })
                }
                t.user.saveToServer()
            }
            onClickClose() {
                t.ui.close(this), t.gameMgr.canChooseBuff && t.gameMgr.isChooseBuff() && (t.gameMgr.canChooseBuff = !1, t.ui.open(l.BuffChooseDialog))
            }
        }
        class XHunterMatchingViewUI extends e.ui.scenes.view.HunterMatchingViewUI {
            constructor(e, t) {
                super(), this.idxArr = [0, 1, 2, 3, 4, 5], this.matchingtime = 0, t && (this.gameMode = t.mode)
            }
            onAwake() {
                let i = t.user.gameInfo,
                    s = t.cfg.hunterDifficultCfg.get(i.curHunterLv);
                t.gameMgr.dCfg = s, this.isStart = !1;
                let a = new XPlayerModel;
                a.type = e.PlayerType.E_Hunter, a.uuid = fx.Utils.createUUID(), a.name = "自己";
                let n = t.cfg.hunterCfg;
                a.maxHp = a.curHp = n.hunterHpList[0], a.attackPower = n.hunterAttackList[0], 
                this.defenderArr = [null, null, null, null, null, null], 
                this.hunterArr = [a], 
                this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_start.on(Laya.Event.CLICK, this, this.onClickStart), 
                this.btn_skin.on(Laya.Event.CLICK, this, this.onClickSkin), 
                Laya.__quickMatch ? Laya.timer.loop(1, this, this.timeLoop) : Laya.timer.loop(500, this, this.timeLoop), 
                this.lb_hunterName.text = "自己", this.img_people.visible = !1, this.updateHunter(), this.initList()
            }
            initList() {
                this.list_list.array = this.defenderArr, this.list_list.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e, i) {
                let s = e.dataSource,
                    a = e.getChildByName("img_itemBg"),
                    n = a.getChildByName("lb_name"),
                    r = a.getChildByName("img_skin"),
                    o = a.getChildByName("img_cur"),
                    l = a.getChildByName("img_people");
                if (o.visible = !1, s) {
                    let e = t.cfg.skin.get(s.skinId);
                    n.text = s.name, r.skin = e.skinShowPath, l.visible = !1
                } else r.skin = "", l.visible = !0, n.text = ""
            }
            timeLoop() {
                this.matchingtime += .5;
                let i = XRandomUtil.random();
                if (this.matchingtime >= 3 && (i = 0), i < .7) {
                    let i = XRandomUtil.getIntRandom(0, this.idxArr.length - 1);
                    i = this.idxArr.splice(i, 1)[0];
                    let s = new XPlayerModel;
                    s.type = e.PlayerType.E_Defender, 
                    s.uuid = fx.Utils.createUUID(), 
                    s.name = this.randomName(), 
                    s.skinId = fx.Utils.randomInArray(t.cfg.getPlayerIdArr()), 
                    this.defenderArr[i] = s, this.initList()
                }
                this.updateLabel(), this.idxArr.length || (this.isMax = !0, this.isStart && this.startGame(), Laya.timer.clear(this, this.timeLoop))
            }
            updateHunter() {
                let e = this.hunterArr[0];
                e.skinId = t.user.gameInfo.curHunterSkinId;
                let i = t.cfg.skin.get(e.skinId);
                this.img_hunter.skin = i.skinShowPath
            }
            updateLabel() {
                this.lb_time.text = `匹配中..${Math.floor(this.matchingtime)}s`
            }
            startGame() {
                let e = this.getMap();
                Laya.loader.load(e.path, new Laya.Handler(this, i => {
                    let s = t.gameMgr.match(this.gameMode, this.defenderArr, this.hunterArr, e, i, !0);
                    XAnalyticsUtil.enterLevel(t.user.gameInfo.curHunterLv, "噬魂者模式"), t.ui.changeScene(l.GameScene, {
                        matchData: s
                    })
                }))
            }
            getMap() {
                if (Laya.__setMap) {
                    let e = t.cfg.map.get(Laya.__setMap);
                    if (e) return e
                }
                let e = t.cfg.map.get(2);
                if (!t.user.gameInfo.playHunter) return e;
                switch (t.gameTime.nowDate.getDay()) {
                    case 0:
                        e = t.cfg.map.get(7);
                        break;
                    case 1:
                        e = t.cfg.map.get(1);
                        break;
                    case 2:
                        e = t.cfg.map.get(2);
                        break;
                    case 3:
                        e = t.cfg.map.get(3);
                        break;
                    case 4:
                        e = t.cfg.map.get(4);
                        break;
                    case 5:
                        e = t.cfg.map.get(5);
                        break;
                    case 6:
                        e = t.cfg.map.get(6)
                }
                return e
            }
            onClickSkin() {
                t.ui.open(l.HunterChooseView, {
                    cb: new Laya.Handler(this, this.updateHunter.bind(this))
                })
            }
            onClickStart() {
                this.btn_start.visible = !1, this.isStart = !0, this.isMax && this.startGame()
            }
            onClickClose() {
                XAnalyticsUtil.clickBack("噬魂者模式"), Laya.timer.clear(this, this.timeLoop), t.ui.close(this)
            }
            randomName(e = 0) {
                if (!this.playerNames) {
                    this.playerNames = [], this.includeName = [];
                    let e = fx.CfgMgr.instance.get("namesCfg");
                    for (const t in e) this.playerNames.push(e[t].name)
                }
                e++;
                let t = fx.Utils.randomInArray(this.playerNames);
                return e > 10 ? t : this.includeName.includes(t) ? this.randomName(e) : t
            }
        }
        class Ms extends e.ui.scenes.panel.hunter.HunterChooseViewUI {
            constructor(e, t) {
                super(), t && (this.cb = t.cb)
            }
            onAwake() {
                this.curId = t.user.gameInfo.curHunterSkinId, this.firstId = this.curId;
                let i = t.cfg.skin.get(this.curId);
                this.updateSkin(i), this.btn_back.on(Laya.Event.CLICK, this, this.onClickBack), this.curDiff = 0, t.user.gameInfo.todayMaxLv || (this.curDiff = 1), this.curDiff += 2 * Math.floor(t.user.gameInfo.hunterUnlockLvl / 2);
                let s = t.cfg.getSkinArrByType(e.SkinType.Hunter);
                this.list_hunter.array = s, this.list_hunter.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            onClickBack() {
                this.firstId != this.curId && (t.user.gameInfo.curHunterSkinId = this.curId, t.user.saveToServer(), this.cb && this.cb.run()), t.ui.close(this)
            }
            updateSkin(e) {
                this.skinSpine && (this.skinSpine.destroy(), this.skinSpine = null), e.skinPath.includes(".bin") ? (this.img_skinShow.skin = "", t.assetLoader.createSpine(e.skinPath, t => {
                    this.skinSpine = t, this.box_skin.addChild(t), this.skinSpine.play("idle", !0), 10004 == e.id && this.skinSpine.showSkinByName("guaigun")
                })) : this.img_skinShow.skin = e.skinShowPath
            }
            updateItem(e, i) {
                let s = e.dataSource,
                    a = t.cfg.skin.get(s),
                    n = e.getChildByName("img_itemBg"),
                    r = e.getChildByName("img_skin"),
                    o = e.getChildByName("img_lock"),
                    l = o.getChildByName("lb_difficult");
                r.skin = a.skinShowPath;
                let h = !1,
                    d = t.user.gameInfo;
                if (i > 0)
                    if (d.isUnlockHunterSkin(a.id)) h = !0;
                    else {
                        this.curDiff += 2;
                        let e = t.cfg.difficultCfg.get(this.curDiff);
                        l.text = e.name
                    } else h = !0;
                o.visible = !h, this.curId == s ? n.skin = "res/ui/hunter/choose/img_select.png" : n.skin = "res/ui/hunter/choose/img_unselect.png", e.on(Laya.Event.CLICK, this, this.onClickSkin, [a.id, h])
            }
            onClickSkin(e, i) {
                e != this.curId && (i ? (this.curId = e, this.updateList()) : j.I.playVideo("视频解锁噬魂者", this, i => {
                    i && (t.user.gameInfo.unlockHunterSkin(e), t.user.saveToServer(), this.curId = e, this.updateList())
                }))
            }
            updateList() {
                this.curDiff = 0, t.user.gameInfo.todayMaxLv || (this.curDiff = 1), this.curDiff += 2 * Math.floor(t.user.gameInfo.hunterUnlockLvl / 2), this.list_hunter.refresh();
                let e = t.cfg.skin.get(this.curId);
                this.updateSkin(e)
            }
        }
        class xs extends e.ui.scenes.panel.hunter.HunterFailDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, t.user.gameInfo.playHunter = !0, this.initSkin(t.user.gameInfo.curHunterSkinId), this.checkOpenBox(), XChoreUtil.playSound(117);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 10, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("猎梦者失败结算奖励", this, e => {
                    e && this.getReward(3)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "fail"
                }), t.reporter.getCoinCnt("失败界面")
            }
        }
        class Bs extends e.ui.scenes.panel.hunter.HunterWinDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, t.user.gameInfo.playHunter = !0, this.initSkin(t.user.gameInfo.curHunterSkinId), this.checkOpenBox(), XChoreUtil.playSound(118);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 20, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), t.gameMgr.killCnt ? this.coinNum += 10 : this.coinNum += 5, this.propNum = XRandomUtil.getIntRandom(1, 2), this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`, this.lb_prop.text = `x${this.propNum}`
            }
            onClickVideo() {
                j.I.playVideo("猎梦者胜利结算奖励", this, e => {
                    e && this.getReward(3)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.gameInfo.hunterBox += e * this.propNum, t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "win"
                }), t.reporter.getCoinCnt("胜利界面")
            }
        }
        class Ts extends e.ui.scenes.panel.hunter.HunterUnlockDialogUI {
            constructor(e, t) {
                super()
            }
            onAwake() {
                let e = t.user.gameInfo;
                e.winCnt + e.failCnt >= 1 ? (this.btn_show.visible = !1, this.btn_unlock.on(Laya.Event.CLICK, this, this.onClickUnlock)) : (this.btn_unlock.visible = !1, this.lb_show.text = `玩${1-(e.winCnt+e.failCnt)}局后开启`), this.img_close.on(Laya.Event.CLICK, this, this.closePanel)
            }
            onClickUnlock() {
                let i = t.user.gameInfo;
                i.tianEnough(12) ? (i.useTian(12), t.user.gameInfo.isUnlockHunter = !0, t.user.saveToServer(), t.ui.close(this), XToast.show("噬魂者模式已解锁"), t.ui.open(l.HunterMatchingView, {
                    mode: e.GameMode.E_Hunt
                })) : (t.ui.close(this), XToast.show("天师令不足"), t.ui.open(l.BuyTianDialog))
            }
            closePanel() {
                t.ui.close(this)
            }
        }
        class Es extends e.ui.scenes.panel.hunter.HunterDifficultChooseDialogUI {
            constructor(e, t) {
                super(), t && (this.canChoose = t.canChoose)
            }
            onAwake() {
                this.initRank();
                let e = t.user.gameInfo.curHunterLv;
                this.canChoose ? (this.chooseArr = [e, e + 1], this.curChoose = e + 1) : (this.chooseArr = [e], this.curChoose = e), this.list_item.width = 321 * this.chooseArr.length - 50, this.list_item.array = this.chooseArr, this.list_item.renderHandler = new Laya.Handler(this, this.updateItem), this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_choose.on(Laya.Event.CLICK, this, this.onClickStart), this.img_rank.on(Laya.Event.CLICK, this, this.onClickRank);
                let i = t.user.gameInfo;
                i.todayHunterExtraScore && (this.box_extra.visible = !0, this.lb_num.value = `${i.todayHunterExtraScore}`)
            }
            async initRank() {
                this.img_rankBg.visible = !1;
                let e = t.user.gameInfo.todayHunterMaxLv;
                if (e && await t.rankMgr.setCustomRankValue("score_hunter_day", e, t.user.gameInfo.curHunterSkinId), this.destroyed) return;
                let i = await t.rankMgr.getCustomRankList("score_hunter_day");
                if (!this.destroyed) {
                    if (this.img_rankBg.visible = !0, this.img_rank.visible = !0, i && i.rank && i.rank <= 100 ? this.lb_rank.text = `${i.rank}` : this.lb_rank.text = "未上榜", i && i.value)
                        if (i.value > t.cfg.hunterDifficultCfg.length) {
                            let e = t.cfg.hunterDifficultCfg.get(t.cfg.hunterDifficultCfg.length);
                            this.lb_score.text = `${e.name} ${i.value-t.cfg.hunterDifficultCfg.length}`
                        } else {
                            let e = t.cfg.hunterDifficultCfg.get(i.value);
                            this.lb_score.text = `${e.name}`
                        } else this.lb_score.text = "轻松";
                    if (t.user.gameInfo.maxHunterLevel) {
                        let e = t.cfg.hunterDifficultCfg.get(t.user.gameInfo.maxHunterLevel);
                        this.lb_name.text = e.title, this.lb_name.color = e.titleColor
                    } else {
                        let e = t.cfg.hunterDifficultCfg.get(1);
                        this.lb_name.text = e.title
                    }
                }
            }
            updateItem(e) {
                let t = e.dataSource,
                    i = e.getChildByName("img_itemBg"),
                    s = i.getChildByName("img_icon"),
                    a = i.getChildByName("img_cur");
                s.skin = `res/ui/difficultChoose/c_${t}.png`, a.visible = t == this.curChoose, i.off(Laya.Event.CLICK, this, this.onClickChoose), i.on(Laya.Event.CLICK, this, this.onClickChoose, [t])
            }
            onClickChoose(e) {
                e != this.curChoose && (this.curChoose = e, this.list_item.refresh())
            }
            onClickClose() {
                t.ui.close(this)
            }
            onClickStart() {
                XAnalyticsUtil.onHunterLevelChange(this.curChoose), t.user.gameInfo.setCurHunterLv(this.curChoose), t.ui.close(this), t.ui.open(l.HunterMatchingView, {
                    mode: e.GameMode.E_Hunt
                })
            }
            async onClickRank() {
                if (await t.user.userInfo.checkUserProfile(), this.destroyed) return;
                let e = t.user.gameInfo.todayMaxLv;
                e && await t.rankMgr.setCustomRankValue("score_day", e, t.user.gameInfo.curSkinId);
                let i = t.user.gameInfo.todayHunterMaxLv;
                if (i && await t.rankMgr.setCustomRankValue("score_hunter_day", i, t.user.gameInfo.curHunterSkinId), this.destroyed) return;
                let s = await t.rankMgr.getCustomRankList("score_day"),
                    a = await t.rankMgr.getCustomRankList("score_hunter_day");
                this.destroyed || t.ui.open(l.RankView, {
                    info: s,
                    hunterInfo: a,
                    isHunter: !0
                })
            }
        }
        class Ls extends Laya.Script {
            constructor() {
                super(...arguments), this._progress = 0
            }
            get node() {
                return this.owner
            }
            get oWidth() {
                return null == this._width && (this._width = this.node.width), this._width
            }
            get progress() {
                return this._progress
            }
            set progress(e) {
                this._progress = Math.clamp(e, 0, 1), this.node.width = this._progress * this.oWidth
            }
        }
        class Ds extends e.ui.scenes.panel.ClubRewardDialogUI {
            onAdd() {
                this.init(), this.img_gotoClub.on(Laya.Event.CLICK, this, this.onClickGotoClub), this.img_close.on(Laya.Event.CLICK, this, this.onClickClose), t.user.gameInfo.on(Ce.GameClubDataChange, this, this.onGameClubDataChange)
            }
            async init() {
                this.list_items.visible = !1, await j.I.wxAuthorize("scope.gameClubData"), t.user.gameInfo.updateGameClubData(), this.checkReward(), this.initList()
            }
            checkReward() {
                let e = [],
                    i = t.cfg.clubReward.getList().slice();
                for (const s of i) {
                    let i = t.user.gameInfo.isClubRewardClaimed(s.id),
                        a = t.user.gameInfo.getClubValue(s.clubDataType),
                        n = s.clubDataValue;
                    !i && a >= n && e.push(s.id)
                }
                e.length > 0 && (t.user.gameInfo.claimClubReward(e), XToast.show("恭喜获得游戏圈奖励!"))
            }
            onGameClubDataChange() {
                this.checkReward(), this.list_items.refresh()
            }
            initList() {
                let e = t.cfg.clubReward.getList().slice();
                this.list_items.visible = !0, this.list_items.vScrollBarSkin = "", this.list_items.dataSource = e, this.list_items.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e) {
                if (!e.dataSource) return;
                let i = e.dataSource,
                    s = t.user.gameInfo.isClubRewardClaimed(i.id),
                    a = t.user.gameInfo.getClubValue(i.clubDataType),
                    n = i.clubDataValue,
                    r = e.getChildByName("img_icon_bg");
                e.getChildByName("img_title").skin = `res/ui/clubReward/img_${i.clubDataType}.png`;
                let o = a / n;
                e.getChildByName("bar").getComponentInChildren(Ls).progress = o;
                let l = Math.min(a, n);
                e.getChildByName("bar").getChildByName("label_progress").text = `${l} / ${n}`;
                let h = i.reward;
                r.getChildByName("img_reward").skin = t.rewardMgr.getRewardIcon(h.type, h.id);
                let d = r.getChildByName("label_num");
                if ("Coin" == i.reward.type) d.text = `铜币x${h.cnt}`;
                else if ("Build" == i.reward.type) {
                    let e = t.cfg.shopCfg.get(h.id);
                    d.text = `${e.name}x${h.cnt}`
                }
                let u = e.getChildByName("img_claimed");
                u.visible = !!s
            }
            onClickGotoClub() {
                let e = window.wx;
                if (e && e.openPage) {
                    let t = e.createPageManager && e.createPageManager();
                    t ? t.load({
                        openlink: "-SSEykJvFV3pORt5kTNpSyWMhqcVbRf54ZmQ98YaMPvmR3dDXNt9f0lMoG3UObn6E4PXqL88OYR98Kfmv5sk7Z2ljU_qcjRxwVm8UGEZyb1hGUqWZhsSddVi8QL8B5U2WhZS_QfwO-5LFVJc2st_Z9F4Cv_Y93AdoozN-KFy_OyObMp68OqDDQ27QrNOXBoPNHSK91KR7_hC7tJay6RB2_cpQBLxmGnf_ywGW0I2LG6Io3mw7S04_gMUeHBHdvtzBqvIrr9J74pKvcYGBwbOir8SgypdPSrbddnVaoI-Or0JGu6WubZG5tEg9n-2k6UkNZx-JVl9zhIfnELMOkWrow"
                    }).then(e => {
                        console.log("进入游戏圈成功！"), t.show(), this.once(fx.BaseEvent.E_APP_ON_RESUME, this, this.onGameHubCallback)
                    }).catch(e => {
                        console.error(e), console.log("进入游戏圈失败！")
                    }) : XToast.show("微信版本过低")
                } else fx.Utils.isOnPC() && this.timerOnce(1e3, this, this.onGameHubCallback.bind(this))
            }
            onClickClose() {
                t.ui.close(this)
            }
            onGameHubCallback() {
                t.user.gameInfo.updateGameClubData()
            }
        }
        class As extends e.ui.scenes.panel.EvaluateDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.isOpenEvaluate = !0, t.user.saveToServer();
                let e = [{
                        type: "Coin",
                        id: 1,
                        cnt: 50
                    }, {
                        type: "Build",
                        id: 4,
                        cnt: 2
                    }],
                    i = [{
                        type: "Coin",
                        id: 1,
                        cnt: 200
                    }],
                    s = t.user.gameInfo.getOwnBuildCnt(6666);
                this.rewardArr = s < 20 ? e : i, this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.openTime = t.gameTime.now, fx.EventCenter.I.once(fx.BaseEvent.E_APP_ON_RESUME, this, () => {
                    Math.floor((t.gameTime.now - this.openTime) / 1e3) >= t.cfg.constant.evaluateTime && this.getReward()
                }), this.initList()
            }
            initList() {
                this.list_reward.array = this.rewardArr, this.list_reward.width = 120 * this.rewardArr.length, this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e) {
                let i = e.dataSource;
                e.getChildByName("img_reward").skin = t.rewardMgr.getRewardIcon(i.type, i.id);
                let s = e.getChildByName("label_num");
                if ("Coin" == i.type) s.text = `铜币x${i.cnt}`;
                else if ("Build" == i.type) {
                    let e = t.cfg.shopCfg.get(i.id);
                    s.text = `${e.name}x${i.cnt}`
                }
            }
            getReward() {
                for (const e of this.rewardArr) t.rewardMgr.addReward(e);
                XAnalyticsUtil.evaluateReward(), t.user.gameInfo.isEvaluate = !0, t.user.saveToServer(), t.ui.close(this), t.gameMgr.canChooseBuff && t.gameMgr.isChooseBuff() && (t.gameMgr.canChooseBuff = !1, t.ui.open(l.BuffChooseDialog))
            }
            onClickClose() {
                t.ui.close(this), t.gameMgr.canChooseBuff && t.gameMgr.isChooseBuff() && (t.gameMgr.canChooseBuff = !1, t.ui.open(l.BuffChooseDialog))
            }
        }
        class Ps extends e.ui.scenes.panel.sevenGhost.SevenGhostUnlockDialogUI {
            constructor(e, t) {
                super(), this.unlockNum = 1
            }
            onAwake() {
                let e = t.user.gameInfo;
                e.winCnt + e.failCnt >= this.unlockNum ? (this.btn_show.visible = !1, this.btn_unlock.on(Laya.Event.CLICK, this, this.onClickUnlock)) : (this.btn_unlock.visible = !1, this.lb_show.text = `玩${this.unlockNum-(e.winCnt+e.failCnt)}局后开启`), this.img_close.on(Laya.Event.CLICK, this, this.closePanel)
            }
            onClickUnlock() {
                let e = t.user.gameInfo;
                e.tianEnough(6) ? (e.useTian(6), t.user.gameInfo.isUnlockSevenGhost = !0, t.user.saveToServer(), t.ui.close(this), XToast.show("挑战模式已解锁"), t.ui.open(l.SevenGhostView)) : (t.ui.close(this), XToast.show("天师令不足"), t.ui.open(l.BuyTianDialog))
            }
            closePanel() {
                t.ui.close(this)
            }
        }
        class Ns extends e.ui.scenes.panel.sevenGhost.SevenGhostViewUI {
            constructor(e, t) {
                super(), t && (this.cb = t.cb)
            }
            onAwake() {
                this.btn_back.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_start.on(Laya.Event.CLICK, this, this.onClickStart), t.gameMgr.isOpenSevenGhost && (t.gameMgr.isOpenSevenGhost = !1, this.box_getMask.visible = !0, this.box_get.visible = !0, this.btn_share.on(Laya.Event.CLICK, this, this.onClickShare), this.btn_use.on(Laya.Event.CLICK, this, this.onClickUseSkin), this.box_get.on(Laya.Event.CLICK, this, this.onClickGet)), this.img_isGet.visible = t.user.gameInfo.isUnlockSkin(1003), this.initUI()
            }
            onClickUseSkin() {
                t.user.gameInfo.curSkinId = 1003, t.ui.close(this), t.ui.open(l.SkinView)
            }
            onClickShare(e) {
                e.stopPropagation(), j.I.share(!1, null, "获得挑战模式皮肤分享"), XAnalyticsUtil.share("获得挑战模式皮肤分享")
            }
            onClickGet() {
                this.box_getMask.visible = !1, this.box_get.visible = !1
            }
            initUI() {
                let e = this.box_show.getChildren();
                for (let i = 0; i < e.length; i++) {
                    let s = e[i],
                        a = i + 1,
                        n = s.getChildByName("img_arrow"),
                        r = s.getChildByName("img_boss"),
                        o = s.getChildByName("img_cha"),
                        l = t.cfg.sevenGhostCfg.get(a);
                    t.user.gameInfo.curSevenGhostLv > a ? (o.visible = !0, s.skin = "res/ui/sevenGhost/view/img_itemBg.png", r.skin = `res/ui/sevenGhost/view/img_${l.bossId}.png`, n.skin = "res/ui/sevenGhost/view/img_arrow.png") : (o.visible = !1, s.skin = "res/ui/sevenGhost/view/img_itemBg_1.png", r.skin = `res/ui/sevenGhost/view/img_${l.bossId}_1.png`, n.skin = "res/ui/sevenGhost/view/img_arrow_1.png")
                }
                e = this.img_guang.getChildren();
                for (let t = 0; t < e.length; t++) {
                    let i = e[t],
                        s = (new fx.Sequence).delay(500 * t).fadeIn(500).fadeOut(500);
                    s.isRepeat = !0, s.run(i)
                }
            }
            onClickStart() {
                t.ui.open(l.MatchingView, {
                    mode: e.GameMode.E_SevenGhost
                })
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class Us extends e.ui.scenes.panel.sevenGhost.SevenGhostFailDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, this.initSkin(t.user.gameInfo.curSkinId), this.checkOpenBox(), XChoreUtil.playSound(117);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 10, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("失败结算奖励", this, e => {
                    e && this.getReward(5)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "fail"
                }), t.reporter.getCoinCnt("失败界面")
            }
        }
        class Gs extends e.ui.scenes.panel.sevenGhost.SevenGhostWinDialogUI {
            constructor() {
                super()
            }
            onAwake() {
                t.user.gameInfo.canPlayTurnTable = !0, this.initSkin(t.user.gameInfo.curSkinId), this.img_mvp.visible = !!t.gameMgr.killCnt, this.checkOpenBox(), XChoreUtil.playSound(118);
                let e = (t.gameTime.now - t.gameMgr.startTime) / 1e3;
                this.coinNum = 20, e >= 210 && (this.coinNum += Math.floor(10 * Math.min(e / 330, 1))), t.gameMgr.killCnt ? this.coinNum += 10 : this.coinNum += 5, this.initUI(), this.btn_video.on(Laya.Event.CLICK, this, this.onClickVideo), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            initSkin(e) {
                let i = t.cfg.skin.get(e);
                i.skinPath.includes(".bin") && t.assetLoader.createSpine(i.skinPath, e => {
                    this.box_skin.addChild(e), e.play("idle", !0)
                })
            }
            checkOpenBox() {
                let e, i = t.user.gameInfo,
                    s = i.failCnt + i.winCnt;
                if (2 == s) e = t.cfg.constant.gameEndBox[2];
                else if (s >= 2 && (s - 2) % 2 == 0) {
                    let i = [3, 0, 1, 2],
                        a = Math.floor((s - 2) / 2) % i.length;
                    e = t.cfg.constant.gameEndBox[i[a]]
                }
                e && Laya.timer.callLater(this, () => {
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                })
            }
            initUI() {
                this.lb_coin.text = `x${this.coinNum}`
            }
            onClickVideo() {
                j.I.playVideo("胜利结算奖励", this, e => {
                    e && this.getReward(3)
                })
            }
            onClickClose() {
                this.getReward(1)
            }
            getReward(e) {
                XToast.show(`获得铜币x${e*this.coinNum}`), t.user.gameInfo.addCoin(e * this.coinNum), t.user.saveToServer(), t.ui.changeScene(l.MainScene, {
                    from: "win"
                }), t.reporter.getCoinCnt("胜利界面")
            }
        }
        class Rs extends e.ui.scenes.panel.RewardDialogUI {
            constructor(e, t) {
                super(), t && (this.rewardArr = t.rewardArr)
            }
            onAwake() {
                this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.initUI()
            }
            initUI() {
                this.list_reward.array = this.rewardArr, this.list_reward.width = 130 * this.rewardArr.length, this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e) {
                let i = e.dataSource,
                    s = e.getChildByName("img_icon"),
                    a = e.getChildByName("lb_cnt");
                if ("Coin" == i.type) s.skin = "res/ui/common/img_coins.png";
                else if ("Build" == i.type) {
                    let e = t.cfg.shopCfg.get(i.id);
                    s.skin = e.icon
                }
                let n = i.cnt ? i.cnt : 1;
                a.text = `x${n}`
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class InviteDialog extends e.ui.scenes.panel.InviteDialogUI {
            constructor(e, t) {
                super(), t && (this.cb = t.cb)
            }
            onAwake() {
                this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.btn_invite.on(Laya.Event.CLICK, this, this.onClickInvite), this.btn_reward.on(Laya.Event.CLICK, this, this.onClickReward), this.btn_tips.on(Laya.Event.CLICK, this, this.onClickTips), this.btn_refresh.on(Laya.Event.CLICK, this, this.onClickRefresh), this.img_bar.visible = !1, this.box_invite.visible = !1, this.img_rewardStage.visible = !1, this.list_reward.visible = !1, this.updateUI()
            }
            async updateUI() {
                if (await t.user.updateInvite(), this.destroyed) return;
                this.img_bar.visible = !0, this.box_invite.visible = !0, this.img_rewardStage.visible = !0, this.list_reward.visible = !0;
                let e = t.user.gameInfo.inviteClaimed + 1;
                this.curCfg = t.cfg.inviteCfg.get(e), this.curCfg ? (this.updateBtn(), this.updateProgress(), this.img_rewardStage.skin = `res/ui/invite/lb_reward_${e}.png`, this.list_reward.array = this.curCfg.rewardArr, this.list_reward.width = 100 * this.curCfg.rewardArr.length, this.list_reward.renderHandler = new Laya.Handler(this, this.updateItem)) : this.onClickClose()
            }
            updateItem(t) {
                let i = t.dataSource,
                    s = t.getChildByName("img_icon"),
                    a = t.getChildByName("lb_cnt"),
                    n = i.cnt ? i.cnt : 1;
                switch (a.value = `x${n}`, i.type) {
                    case e.RewardType.Coin:
                        s.skin = "res/ui/invite/img_coin.png";
                        break;
                    case e.RewardType.Build:
                        s.skin = "res/ui/invite/img_4.png";
                        break;
                    case e.RewardType.Skin:
                        s.skin = `res/ui/invite/skin_${i.id}.png`
                }
            }
            updateBtn() {
                let e = t.user.gameInfo;
                this.btn_invite.visible = this.curCfg.inviteCnt > e.inviteCnt, this.btn_reward.visible = this.curCfg.inviteCnt <= e.inviteCnt
            }
            updateProgress() {
                if (!this.curCfg) return void this.onClickClose();
                let e = Math.min(this.curCfg.inviteCnt, t.user.gameInfo.inviteCnt);
                this.lb_progress.value = `${e}/${this.curCfg.inviteCnt}`, this.panel_bar.width = Math.max(.001, e / this.curCfg.inviteCnt * 448), this.lb_inviteCnt.value = `${this.curCfg.inviteCnt-e}`
            }
            onClickInvite() {
                XAnalyticsUtil.share("邀请有礼"), j.I.share(!1, null, "邀请有礼")
            }
            onClickReward() {
                let i = "";
                for (const e of this.curCfg.rewardArr) t.rewardMgr.addReward(e), i = e.type;
                i == e.RewardType.Skin ? t.ui.open(l.SkinRewardDialog, {
                    skinId: this.curCfg.rewardArr[0].id
                }) : t.ui.open(l.RewardDialog, {
                    rewardArr: this.curCfg.rewardArr
                }), t.user.gameInfo.inviteClaimed += 1, t.user.gameInfo.inviteClaimed >= t.cfg.inviteCfg.length ? (t.ui.close(this), fx.EventCenter.I.event(we.Invite_Btn_Update)) : this.updateUI(), t.user.saveToServer()
            }
            async onClickRefresh() {
                await t.user.updateInvite(), this.destroyed || (this.updateProgress(), this.updateBtn())
            }
            onClickTips() {
                t.ui.open(l.QuestionDialog)
            }
            onClickClose() {
                t.ui.close(this)
            }
            onDestroy() {
                this.cb && this.cb.run()
            }
        }
        class Os extends e.ui.scenes.panel.QuestionDialogUI {
            onAwake() {
                this._show(), this.on(Laya.Event.CLICK, this, this._hide)
            }
            _show() {
                (new fx.Sequence).show().to({
                    scaleX: 1.1,
                    scaleY: 1.1
                }, 100).to({
                    scaleX: 1,
                    scaleY: 1
                }, 100).run(this.img_title);
                for (let e = 1; e <= 3; e++) {
                    this[`img_${e}`].visible = !1, this[`img_des${e}`].visible = !1, this[`img_gou${e}`].visible = !1, this[`img_${e}`].scale(.8, .8), this[`img_des${e}`].scale(0, 0), this[`img_gou${e}`].scale(0, 0);
                    let t = 100 * e,
                        i = 3 == e ? 2 * t : t;
                    (new fx.Sequence).delay(t).show().to({
                        scaleX: 1.1,
                        scaleY: 1.1
                    }, 100).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 100).run(this[`img_${e}`]), (new fx.Sequence).delay(t).show().to({
                        scaleX: 1.3,
                        scaleY: 1.3
                    }, 100).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 100).run(this[`img_des${e}`]), (new fx.Sequence).delay(i).show().to({
                        scaleX: 1.2,
                        scaleY: 1.2
                    }, 100).to({
                        scaleX: 1,
                        scaleY: 1
                    }, 100).run(this[`img_gou${e}`])
                }
            }
            _hide() {
                for (let e = 3; e >= 1; e--) {
                    let t = 100 * (3 - e);
                    (new fx.Sequence).delay(t).to({
                        scaleX: 1.1,
                        scaleY: 1.1
                    }, 100).to({
                        scaleX: 0,
                        scaleY: 0
                    }, 100).run(this[`img_${e}`]), (new fx.Sequence).delay(t).to({
                        scaleX: 1.1,
                        scaleY: 1.1
                    }, 100).to({
                        scaleX: 0,
                        scaleY: 0
                    }, 100).run(this[`img_des${e}`]), (new fx.Sequence).delay(t).to({
                        scaleX: 1.1,
                        scaleY: 1.1
                    }, 100).to({
                        scaleX: 0,
                        scaleY: 0
                    }, 100).exec(Laya.Handler.create(this, () => {
                        1 == e && (new fx.Sequence).to({
                            scaleX: 1.1,
                            scaleY: 1.1
                        }, 100).to({
                            scaleX: 0,
                            scaleY: 0
                        }, 100).exec(Laya.Handler.create(this, this._close)).run(this.img_title)
                    })).run(this[`img_gou${e}`])
                }
            }
            _close() {
                t.ui.close(this)
            }
        }
        class Vs extends e.ui.scenes.panel.SkinRewardDialogUI {
            constructor(e, t) {
                super(), t && (this.skinId = t.skinId)
            }
            onAwake() {
                fx.Effect.loopRotate(this.img_guang, 90), this.btn_close.on(Laya.Event.CLICK, this, this.onClickClose), this.initUI()
            }
            initUI() {
                let e = t.cfg.skin.get(this.skinId);
                this.img_icon.skin = e.skinShowPath
            }
            onClickClose() {
                t.ui.close(this)
            }
        }
        class Fs extends e.ui.scenes.panel.MessageDialogUI {
            constructor(e, t) {
                super(), this.data = t
            }
            onAwake() {
                this.label_title.text = this.data.title || "", this.label_content.text = this.data.content, this.label_content.height > 120 && (this.img_bg.height += this.label_content.height - 120), this.btn_cancel.visible = !!this.data.showCancelBtn, this.btn_cancel.on(Laya.Event.CLICK, this, this.onClickCancel), this.btn_sure.visible = !!this.data.showSureBtn, this.btn_sure.on(Laya.Event.CLICK, this, this.onClickSure), this.img_close.visible = !!this.data.showCloseBtn, this.img_close.on(Laya.Event.CLICK, this, this.onClickCancel), this.btn_cancel.visible && this.btn_sure.visible ? (this.btn_cancel.centerX = -110, this.btn_sure.centerX = 110) : (this.btn_cancel.centerX = 0, this.btn_sure.centerX = 0), this.data.cancelTitle && fx.Utils.isString(this.data.cancelTitle) ? this.label_cancel.text = this.data.cancelTitle : this.label_cancel.text = "取消"
            }
            onClickCancel() {
                let e = this.data.onCancel;
                e && e(this), t.ui.close(this)
            }
            onClickSure() {
                let e = this.data.onSure;
                e && e(this), 0 != this.data.sureClose && t.ui.close(this)
            }
        }
        class XRegClass {
            static init() {
                this.initUI(), this.initCls()
            }
            static initUI() {
                Laya.ClassUtils.regClass(l.MainScene, Cs), 
                Laya.ClassUtils.regClass(l.GameScene, XGameScene), 
                Laya.ClassUtils.regClass(l.WinDialog, ye), 
                Laya.ClassUtils.regClass(l.FailDialog, re), 
                Laya.ClassUtils.regClass(l.SkinView, ws), 
                Laya.ClassUtils.regClass(l.TipsView, Ss), 
                Laya.ClassUtils.regClass(l.SettingDialog, ge), 
                Laya.ClassUtils.regClass(l.GameEndBoxDialog, oe), 
                Laya.ClassUtils.regClass(l.MatchingView, XMatchingView), 
                Laya.ClassUtils.regClass(l.HunterMatchingView, XHunterMatchingViewUI), 
                Laya.ClassUtils.regClass(l.ShopDialog, ce), 
                Laya.ClassUtils.regClass(l.DifficultChooseDialog, ne), 
                Laya.ClassUtils.regClass(l.RankView, bs), 
                Laya.ClassUtils.regClass(l.SkinFragmentDialog, pe), 
                Laya.ClassUtils.regClass(l.SkinFragmentGetDialog, fe), 
                Laya.ClassUtils.regClass(l.ExitView, _s), 
                Laya.ClassUtils.regClass(l.NoticeDialog, ue), 
                Laya.ClassUtils.regClass(l.TurntableView, Is), 
                Laya.ClassUtils.regClass(l.TurntableRewardDialog, me), 
                Laya.ClassUtils.regClass(l.BuffChooseDialog, ee),
                Laya.ClassUtils.regClass(l.BuffOwnerDialog, te), 
                Laya.ClassUtils.regClass(l.BuffShowDialog, ie), 
                Laya.ClassUtils.regClass(l.DailyShareDialog, ae), 
                Laya.ClassUtils.regClass(l.BuyTianDialog, se), 
                Laya.ClassUtils.regClass(l.InviteDialog, InviteDialog), 
                Laya.ClassUtils.regClass(l.QuestionDialog, Os), 
                Laya.ClassUtils.regClass(l.AogUnlockDialog, Z), 
                Laya.ClassUtils.regClass(l.AogFailDialog, J), 
                Laya.ClassUtils.regClass(l.AogWinDialog, Q), 
                Laya.ClassUtils.regClass(l.AogChooseDialog, R), 
                Laya.ClassUtils.regClass(l.HunterChooseView, Ms), 
                Laya.ClassUtils.regClass(l.HunterFailDialog, xs), 
                Laya.ClassUtils.regClass(l.HunterWinDialog, Bs), 
                Laya.ClassUtils.regClass(l.HunterUnlockDialog, Ts), 
                Laya.ClassUtils.regClass(l.HunterDifficultChooseDialog, Es), 
                Laya.ClassUtils.regClass(l.SevenGhostUnlockDialog, Ps), 
                Laya.ClassUtils.regClass(l.SevenGhostView, Ns), 
                Laya.ClassUtils.regClass(l.SevenGhostFailDialog, Us), 
                Laya.ClassUtils.regClass(l.SevenGhostWinDialog, Gs), 
                Laya.ClassUtils.regClass(l.ClubRewardDialog, Ds), 
                Laya.ClassUtils.regClass(l.EvaluateDialog, As), 
                Laya.ClassUtils.regClass(l.RewardDialog, Rs), 
                Laya.ClassUtils.regClass(l.SkinRewardDialog, Vs), 
                Laya.ClassUtils.regClass(l.MessageDialog, Fs)
            }
            static initCls() {}
        }
        class qs extends Laya.Script {
            constructor() {
                super()
            }
            onAwake() {
                let e = this.owner;
                fx.Utils.resetAnchor(e, .5, .5);
                let t = e.scaleX;
                new fx.Sequence([{
                    t: "to",
                    target: e,
                    props: {
                        scaleX: t + .1,
                        scaleY: t + .1
                    },
                    duration: 400,
                    ease: Laya.Ease.backOut,
                    complete: null,
                    completeArgs: null,
                    delay: 1e3
                }, {
                    t: "to",
                    target: e,
                    props: {
                        scaleX: t,
                        scaleY: t
                    },
                    duration: 400,
                    ease: Laya.Ease.backIn
                }], !0).run()
            }
            onDisable() {
                Laya.Tween.clearAll(this.owner)
            }
        }
        class Ws extends Laya.Script {
            onUpdate() {
                if (t.gameMgr.gameStatus != e.GameStatus.E_GAME_FINISH && t.playerMgr.isPlayerBed(t.playerMgr.mineUuid)) {
                    let e = t.playerMgr.player;
                    if (!e || !e.coin) return;
                    this.label_coin.text = this.unitNumToString(e.coin), this.label_energy.text = this.unitNumToString(e.energy)
                }
            }
            unitNumToString(e) {
                let t = e.toString();
                return e > 999999999 ? t = Math.floor(e / 1e6).toString() + "M" : e > 999999 && (t = Math.floor(e / 1e3).toString() + "K"), t
            }
        }
        class Ks extends Laya.Script {
            onStart() {
                this.initPlayer(), this.initHunter(), fx.EventCenter.I.on(XEventNames.E_Player_Dead, this, this.setDieState), fx.EventCenter.I.on(XEventNames.E_Player_Hurt, this, this.setHurtState)
            }
            setDieState() {
                this.curHurt = null, this.list_player.refresh()
            }
            setHurtState(e) {
                e ? (this.curHurt = e, this.list_player.refresh()) : this.curHurt = null
            }
            initPlayer() {
                t.playerMgr.hunters.length;
                this.list_player = this.owner.getChildByName("list_player"), this.list_player && (this.list_player.array = this.getPlayerList(), this.list_player.renderHandler = new Laya.Handler(this, this.updatePlayerItem))
            }
            updatePlayerItem(e) {
                if (!e.dataSource) return;
                let i = e.dataSource.player,
                    s = e.getChildByName("head"),
                    a = e.getChildByName("red"),
                    n = e.getChildByName("die"),
                    r = e.getChildByName("label_me"),
                    o = e.getChildByName("img_artifactState");
                if (o && (o.visible = !1), s && (s.skin = t.cfg.skin.get(i.skinId).headIcon), a && (a.visible = !1), n.visible = i.isDie, r && (i.uuid == t.playerMgr.mineUuid ? (r.visible = !0, r.text = "你") : r.visible = !1), e.reg || (e.reg = !0, e.on(Laya.Event.CLICK, this, e => {
                        e.stopPropagation();
                        let i = e.target.dataSource.player;
                        t.gameMgr.canLocatePlayer() && (console.log(`切换到${i.roomId}`), fx.EventCenter.I.event(XEventNames.E_Look_Player, [i]))
                    })), this.curHurt == i.uuid) {
                    s.centerX = 0, (new fx.Sequence).to({
                        centerX: -6
                    }, 100).to({
                        centerX: 6
                    }, 200).to({
                        centerX: -6
                    }, 200).to({
                        centerX: 6
                    }, 200).to({
                        centerX: -6
                    }, 200).to({
                        centerX: 0
                    }, 100).run(s), a.visible = !0, a.alpha = 0, (new fx.Sequence).fadeIn(250).fadeOut(250).fadeIn(250).fadeOut(250).run(a)
                }
            }
            getPlayerList() {
                let i = [];
                for (let e = 0; e < t.playerMgr.defenders.length; e++) {
                    let s = t.playerMgr.defenders[e];
                    s.uuid != t.playerMgr.mineUuid && i.push({
                        player: s
                    })
                }
                return t.playerMgr.player.type == e.PlayerType.E_Defender && i.push({
                    player: t.playerMgr.player
                }), i
            }
            initHunter() {
                let i = t.playerMgr.hunters.length;
                this.list_hunter = this.owner.getChildByName("list_hunter"), t.gameMgr.gameMode != e.GameMode.E_Defense && t.gameMgr.gameMode != e.GameMode.E_SevenGhost || (this.list_hunter.visible = !0), this.list_hunter.width = 94 * i + 10 * (i - 1), this.list_hunter && (this.list_hunter.array = this.getHunterList(), this.list_hunter.renderHandler = new Laya.Handler(this, this.updateHunterItem))
            }
            getHunterList() {
                let e = [];
                for (let i = 0; i < t.playerMgr.hunters.length; i++) {
                    let s = t.playerMgr.hunters[i];
                    e.push({
                        hunter: s
                    })
                }
                return e
            }
            updateHunterItem(e) {
                if (!e.dataSource) return;
                let i = e.dataSource.hunter,
                    s = e.getChildByName("head"),
                    a = e.getChildByName("die"),
                    n = e.getChildByName("label_name");
                if (!i.skinId) return void(e.visible = !1);
                let r = t.cfg.skin.get(i.skinId);
                s && (s.skin = r.headIcon), a && (a.visible = !1), n && (i.uuid == t.playerMgr.mineUuid ? n.text = "你" : n.text = r.name), e.reg || (e.reg = !0, e.on(Laya.Event.CLICK, this, e => {
                    e.stopPropagation();
                    let i = e.target.dataSource.hunter;
                    t.gameMgr.canLocatePlayer() && (console.log(`切换到${i.roomId}`), fx.EventCenter.I.event(XEventNames.E_Look_Player, [i]))
                }))
            }
            onDestroy() {
                fx.EventCenter.I.off(XEventNames.E_Player_Dead, this, this.setDieState), fx.EventCenter.I.off(XEventNames.E_Player_Hurt, this, this.setHurtState)
            }
        }
        class $s extends Laya.Script {
            constructor() {
                super()
            }
            onAwake() {
                this.node = this.owner, this.img_first = this.owner.getChildByName("img_first"), this.img_hand = this.owner.getChildByName("img_hand"), this.label_taskDes = this.owner.getChildByName("label_taskDes"), this.label_taskBtn = this.owner.getChildByName("label_taskBtn"), this.label_taskBtn.on(Laya.Event.CLICK, this, () => {
                    if (this.img_first.visible && (this.img_first.visible = !1), t.taskMgr.index < t.user.gameInfo.taskIndex) t.taskMgr.index += 1;
                    else {
                        let e = t.taskMgr.getCurTaskCfg();
                        if (!e) return void(this.node.visible = !1);
                        t.user.gameInfo.addCoin(e.reward), t.reporter.getCoinCnt("新手任务"), XToast.show(`获得${e.reward}铜币`), t.taskMgr.index += 1, t.user.gameInfo.taskIndex += 1, t.user.saveToServer()
                    }
                    this.taskIndexChange(), t.taskMgr.startTask()
                }), t.taskMgr.compeletAllTask() ? (this.node.visible = !1, t.gameMgr.isGuide = !1) : (this.taskIndexChange(), fx.EventCenter.I.on(XEventNames.E_Task_Compelet, this, this.compeletFunc));
                let e = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                e.isRepeat = !0, e.run(this.img_hand)
            }
            taskIndexChange() {
                if (this.img_hand.visible = !1, !t.taskMgr.compeletAllTask()) {
                    let e = t.taskMgr.getCurTaskCfg();
                    if (!e) return;
                    t.gameMgr.isGuide = !0, this.node.visible = !0, this.label_taskDes.text = `${e.id}.${e.description}`, this.label_taskBtn.mouseEnabled = !1, this.label_taskBtn.text = "未完成", this.label_taskBtn.color = "#675a59", this.label_taskBtn.underlineColor = "#675a59"
                }
            }
            compeletFunc() {
                if (this.label_taskBtn.mouseEnabled = !0, this.label_taskBtn.text = "领取", this.label_taskBtn.color = "#23af00", this.label_taskBtn.underlineColor = "#23af00", this.img_hand.visible = t.taskMgr.index <= 7, 1 == t.taskMgr.index && 1 == t.user.gameInfo.taskIndex && (this.img_first.visible = !0, !this.img_first.__seq)) {
                    this.img_first.__seq = !0;
                    let e = (new fx.Sequence).fadeOut(500).fadeIn(500);
                    e.isRepeat = !0, e.run(this.img_first)
                }
                t.taskMgr.compeletAllTask() && (this.node.visible = !1, fx.EventCenter.I.off(XEventNames.E_Task_Compelet, this, this.compeletFunc))
            }
            onDisable() {
                t.taskMgr.index = 1, fx.EventCenter.I.off(XEventNames.E_Task_Compelet, this, this.compeletFunc)
            }
        }
        class Xs extends Laya.Script {
            constructor() {
                super()
            }
            onAwake() {
                this.node = this.owner, this.node.visible = !1, this.label_hunterDes = this.owner.getChildByName("label_hunterDes"), this.label_sureBtn = this.owner.getChildByName("label_sureBtn"), this.label_sureBtn.on(Laya.Event.CLICK, this, this.onClickSure), this.checkShow()
            }
            onClickSure() {
                this.node.visible = !1
            }
            checkShow() {
                let i = t.playerMgr.hunters[0];
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && t.gameMgr.skillABTest && t.user.userInfo.loginDay > 1 && t.user.gameInfo.curLv > 3) {
                    if (!t.user.gameInfo.getShowHunterSkillDes(i.skinId)) {
                        let e = t.cfg.skin.get(i.skinId);
                        this.label_hunterDes.text = e.skillDes, this.node.visible = !0, t.user.gameInfo.addShowHunterSkillDes(i.skinId)
                    }
                }
            }
        }
        ////cryptUtil
        class CryptUtil {
            constructor() {
                this._xorSecret = "";
                for (let e = 0; e < 16; ++e) this._xorSecret += Math.floor(16 * Math.random()).toString(16)
            }
            decryptXor(e) {
                let t = "";
                for (let i = 0; i < e.length; i++) t += String.fromCharCode(e.charCodeAt(i) ^ this._xorSecret.charCodeAt(i % this._xorSecret.length));
                return t
            }
            encryptXor(e) {
                let t = "";
                for (let i = 0; i < e.length; i++) t += String.fromCharCode(e.charCodeAt(i) ^ this._xorSecret.charCodeAt(i % this._xorSecret.length));
                return t
            }
        }
        class LoadingUtil {
            static show(i, s, a) {
                if (Laya.isWXPlayable) return;
                if (!i || 0 == i.trim().length) return;
                this.isShow = !0, this.hide(!0);
                let n = () => {
                    this.label_title.text = i, this.loadingNode.visible = !0, s && this.loadingNode.timerOnce(1e3 * s, this, () => {
                        if (this.hide(), fx.Utils.isString(a)) XToast.show(a, 2);
                        else if (fx.Utils.isFunction(a)) {
                            a()
                        }
                    })
                };
                this.loadingNode ? n() : t.assetLoader.getBySign(o.loading, null, i => {
                    this.loadingNode || (this.loadingNode = new Laya.Box, this.loadingNode.name = "loadingNode", this.loadingNode.width = Laya.stage.width, this.loadingNode.height = Laya.stage.height, this.loadingNode.mouseEnabled = !0, this.loadingNode.zOrder = e.ZOrder.Loading, Laya.stage.addChild(this.loadingNode), this.loadingNode.addChild(i), i.pos(Laya.stage.width / 2, Laya.stage.height / 2), this.label_title = i.getChildByName("label_title"), t.assetLoader.createSpine("spines/loading/skeleton.bin", e => {
                        i.addChild(e), e.play(0, !0)
                    }), this.isShow ? n() : this.hide())
                })
            }
            static hide(e = !1) {
                e || (this.isShow = !1), this.loadingNode && !this.loadingNode.destroyed && (this.loadingNode.timer.clearAll(this), this.loadingNode.visible = !1)
            }
        }
        ////http
        class Js {
            async send(e, t, i, s = 10, a, n) {
                let r;
                try {
                    console.log(`Http request ${e}`), n && LoadingUtil.show("数据请求中", s), r = await this.callApi(e, t, i, s, a)
                } catch (e) {}
                return n && LoadingUtil.hide(), r
            }
            callApi(e, t, i, s, a) {
                return new Promise((n, r) => {
                    let o, l = new Laya.HttpRequest;
                    l.http.timeout = 1e3 * s || 1e4, l.once(Laya.Event.COMPLETE, this, t => {
                        console.log(`Http respone: ${e}`, t), n(t)
                    }), l.http.ontimeout = function() {
                        console.log(`Http request time out: ${e}`), r()
                    }, l.once(Laya.Event.ERROR, this, e => {
                        console.log("Http request error: ", e), r()
                    }), o = "get" == (t = t.toLowerCase()) ? ["Content-Type", "application/x-www-form-urlencoded"] : ["Content-Type", "application/json"], a && (o[2] = "Authorization", o[3] = a), "string" != typeof i && (i = JSON.stringify(i)), i || (i = JSON.stringify({})), l.send(e, i, t, "json", o)
                })
            }
        }
        const Zs = window.moment;
        class Qs {
            static formatSecond(e) {
                let t = "",
                    i = Math.floor(e / 3600);
                i > 0 && (i < 10 && (t += "0"), t += i + ":");
                let s = Math.floor(e % 3600 / 60);
                s > 0 ? (s < 10 && (t += "0"), t += s + ":") : t += "00:";
                let a = e % 3600 % 60;
                return a > 0 ? (a < 10 && (t += "0"), t += a) : t += "00", t
            }
            static getSimpleTime(e) {
                let t = "",
                    i = Math.floor(e / 86400);
                i > 0 && (t += i + "天", e %= 86400);
                let s = Math.floor(e / 3600);
                s > 0 && (t += s + "时", e %= 3600);
                let a = Math.floor(e / 60);
                return a > 0 && (t += a + "分", e %= 60), e > 0 && (t += e + "秒"), t
            }
            static formatTime(e, t) {
                return Zs.utc(e).format(t)
            }
            static formatDate(e, t) {
                t || (t = new Date);
                let i = {
                    "M+": t.getMonth() + 1,
                    "d+": t.getDate(),
                    "h+": t.getHours(),
                    "m+": t.getMinutes(),
                    "s+": t.getSeconds(),
                    "q+": Math.floor((t.getMonth() + 3) / 3),
                    S: t.getMilliseconds()
                };
                for (let s in /(y+)/.test(e) && (e = e.replace(RegExp.$1, (t.getFullYear() + "").substr(4 - RegExp.$1.length))), i) new RegExp("(" + s + ")").test(e) && (e = e.replace(RegExp.$1, 1 == RegExp.$1.length ? i[s] : ("00" + i[s]).substr(("" + i[s]).length)));
                return e
            }
            static restDay(e) {
                let i = Math.max(e - t.gameTime.now, 0);
                return Math.floor(i / 864e5)
            }
            static diff(e, t) {
                let i = this.getBeginOfDay(e).getTime(),
                    s = this.getBeginOfDay(t).getTime();
                return Math.floor(Math.abs(s - i) / 864e5)
            }
            static getBeginOfDay(e) {
                let t = j.I.isOnIOS() ? "/" : "-";
                return new Date(e.getFullYear() + t + (e.getMonth() + 1) + t + e.getDate())
            }
            static isSameDay(e, t) {
                let i = new Date(e),
                    s = new Date(t);
                return i.getFullYear() == s.getFullYear() && (i.getMonth() == s.getMonth() && i.getDate() == s.getDate())
            }
            static isSameWeek(e, t) {
                let i = Math.floor(new Date(e).getTime() / 864e5),
                    s = Math.floor(new Date(t).getTime() / 864e5);
                return Math.floor((i + 4) / 7) == Math.floor((s + 4) / 7)
            }
            static formatTSToHHMMSS(e) {
                if (!e || e == 1 / 0) return "99:99:99";
                let t = Math.floor(e / 36e5).toString(),
                    i = Math.floor(e % 36e5 / 6e4).toString(),
                    s = Math.floor(e % 6e4 / 1e3).toString();
                return `${t.length<2?0+t:t}:${i.length<2?0+i:i}:${s.length<2?0+s:s}`
            }
            static formatTSToDDHHMM(e) {
                if (!e || e == 1 / 0) return "00日00时00分";
                let t = Math.floor(e / 864e5).toString(),
                    i = Math.floor(e % 864e5 / 36e5).toString(),
                    s = Math.floor(e % 36e5 / 6e4).toString();
                return `${t.length<2?0+t:t}日${i.length<2?0+i:i}时${s.length<2?0+s:s}分`
            }
            static formatResetCD(e) {
                let i = e,
                    s = Zs(t.gameTime.now),
                    a = i.diff(s, "seconds");
                if (a > _.DAY_SECONDS) {
                    return Math.floor(a / _.DAY_SECONDS) + "天"
                }
                return Zs.utc(1e3 * a).format("HH:mm:ss")
            }
            static formatTSToDDHH(e) {
                if (!e || e == 1 / 0 || e < 0) return "00日00时";
                let t = Math.floor(e / 864e5).toString(),
                    i = Math.floor(e % 864e5 / 36e5).toString();
                return `${t.length<2?0+t:t}日${i.length<2?0+i:i}时`
            }
            static formatTSToHHMM(e) {
                if (!e || e == 1 / 0 || e < 0) return "00时00分";
                let t = Math.floor(e / 36e5).toString(),
                    i = Math.floor(e % 36e5 / 6e4).toString();
                return `${t.length<2?0+t:t}时${i.length<2?0+i:i}分`
            }
            static formatTSToMMSS(e) {
                if (!e || e == 1 / 0 || e < 0) return "00分00秒";
                let t = Math.floor(e / 6e4).toString(),
                    i = Math.floor(e % 6e4 / 1e3).toString();
                return `${t.length<2?0+t:t}分${i.length<2?0+i:i}秒`
            }
            static dynamicFormat(e) {
                return e >= 864e5 ? this.formatTSToDDHH(e) : e >= 36e5 ? this.formatTSToHHMM(e) : this.formatTSToMMSS(e)
            }
            static getWeekDates(e) {
                let t = new Date(e),
                    i = t.getDay(),
                    s = t.getDate() - i + (0 === i ? -6 : 1),
                    a = new Date(t.setDate(s)),
                    n = this.formatDate("yyyy-MM-dd", a),
                    r = new Date(a);
                return r.setDate(a.getDate() + 6), [n, this.formatDate("yyyy-MM-dd", r)]
            }
        }
        const ea = [];

        function ta(e) {
            let t = e;
            return ea.includes(t) || ea.push(t), t
        }
        const ia = {
            UserInfo: ta("UserInfo"),
            GameInfo: ta("GameInfo"),
            GuideInfo: ta("GuideInfo"),
            CommonInfo: ta("CommonInfo"),
            NavigateInfo: ta("NavigateInfo")
        };
        class sa {
            static get(e) {
                return ta(e)
            }
            static getAllKey() {
                return ea
            }
        }
        sa.User = ia;
        class aa {
            static getEncrypt(e) {
                let t = this.getString(e, "");
                return t ? LZString.decompress(t) : null
            }
            static setEncrypt(e, t) {
                if (t) {
                    let i = t;
                    fx.Utils.isString(t) ? i = t : fx.Utils.isNumber(t) ? i = t + "" : fx.Utils.isBool(t) ? i = 1 == t ? "1" : "0" : "object" == typeof t && (i = JSON.stringify(t));
                    let s = LZString.compress(i);
                    Laya.LocalStorage.setItem(e, s)
                }
            }
            static get(e) {
                return Laya.LocalStorage.getItem(e)
            }
            static remove(e) {
                Laya.LocalStorage.removeItem(e)
            }
            static getJson(e) {
                return Laya.LocalStorage.getJSON(e)
            }
            static setJson(e, t) {
                Laya.LocalStorage.setJSON(e, t)
            }
            static setString(e, t) {
                Laya.LocalStorage.setItem(e, t)
            }
            static getString(e, t = "") {
                let i = this.get(e);
                return i || t
            }
            static clearAll() {
                sa.getAllKey().forEach(e => this.remove(e))
            }
            static clearAllBut(e) {
                sa.getAllKey().forEach(t => {
                    e.includes(t) || this.remove(t)
                })
            }
        }

        function na(e, t, i, s) {
            var a, n = arguments.length,
                r = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(e, t, i, s);
            else
                for (var o = e.length - 1; o >= 0; o--)(a = e[o]) && (r = (n < 3 ? a(r) : n > 3 ? a(t, i, r) : a(t, i)) || r);
            return n > 3 && r && Object.defineProperty(t, i, r), r
        }
        Object.create;
        Object.create;
        const ra = window.moment;
        var oa, la;
        e.StreamType = void 0, (oa = e.StreamType || (e.StreamType = {}))[oa.Original = 0] = "Original", oa[oa.Assembly = 1] = "Assembly", oa[oa.Object = 2] = "Object";
        class ha {
            clean() {}
        }

        function da(e, t, i, s, a = null) {
            e.hasOwnProperty("$isFirstLoad") || (e.mappingInfos ? e.mappingInfos = function e(t) {
                let i = t.constructor ? new t.constructor : {};
                for (let s in t) {
                    let a = t[s];
                    i[s] = a && "object" == typeof a ? e(a) : a
                }
                return i
            }(e.mappingInfos) : e.mappingInfos = {}), e.$isFirstLoad = !1, e.mappingInfos.hasOwnProperty(i) && console.error(e.constructor.name + ":  mapping has same abbr: " + i), e.mappingInfos[i] = [t, s, a]
        }

        function ua(t) {
            t.prototype.fromJson = function(t) {
                if (this.mappingInfos && t) {
                    fx.Utils.isString(t) && (t = JSON.parse(t));
                    let i = this.mappingInfos;
                    for (let s in i)
                        if (i.hasOwnProperty(s) && t.hasOwnProperty(s)) {
                            let a = i[s][0],
                                n = i[s][1],
                                r = i[s][2],
                                o = t[s];
                            if (null == o) continue;
                            if (n == e.StreamType.Original)
                                if (this[a] instanceof Map) {
                                    let e = new Map;
                                    for (const t of o) e.set(t.k, t.v);
                                    this[a] = e
                                } else this[a] = o;
                            else if (n == e.StreamType.Assembly)
                                if (r)
                                    if (Array.isArray(o))
                                        if (this[a] instanceof Map)
                                            for (let e = 0; e < o.length; e++) {
                                                let t = o[e],
                                                    i = new r;
                                                i.fromJson(t.v), this[a].set(t.k, i)
                                            } else {
                                                this[a] = [];
                                                for (let e = 0; e < o.length; e++) {
                                                    let t = o[e],
                                                        i = new r;
                                                    i.fromJson(t), this[a].push(i)
                                                }
                                            } else if (r == Date) this[a] = new Date(o);
                                            else if ("moment" == r) this[a] = ra(o);
                            else {
                                let e = new r;
                                e.fromJson(o), this[a] = e
                            } else this[a] instanceof ha && this[a].fromJson(o);
                            else n == e.StreamType.Object && (this[a] = JSON.parse(o))
                        }
                }
            };
            let i = function(t, i, s, a) {
                if (null != s)
                    if (a == e.StreamType.Original)
                        if (s instanceof Map) {
                            let e = [];
                            s.forEach((t, i) => {
                                e.push({
                                    k: i,
                                    v: t
                                })
                            }), t[i] = e
                        } else t[i] = s;
                else if (a == e.StreamType.Assembly)
                    if (Array.isArray(s)) {
                        let e = [];
                        for (let t = 0; t < s.length; t++) {
                            let i = s[t];
                            i && e.push(i.toJson())
                        }
                        t[i] = e
                    } else if (s instanceof Map) {
                    let e = [];
                    s.forEach((t, i) => {
                        t && e.push({
                            k: i,
                            v: t.toJson()
                        })
                    }), t[i] = e
                } else s instanceof ra ? t[i] = s.format() : s && s.toJson && (t[i] = s.toJson());
                else a == e.StreamType.Object && (t[i] = JSON.stringify(s))
            };
            t.prototype.toJson = function() {
                this.version++;
                let e = {},
                    t = this.mappingInfos;
                for (const s in t)
                    if (t.hasOwnProperty(s)) {
                        let a = t[s][0],
                            n = t[s][1],
                            r = this[a];
                        i(e, s, r, n)
                    }
                return e
            }, t.prototype.getJson = function() {
                let e = {},
                    t = this.mappingInfos;
                for (const s in this.mappingInfos)
                    if (t.hasOwnProperty(s)) {
                        let a = t[s][0],
                            n = t[s][1],
                            r = this[a];
                        i(e, s, r, n)
                    }
                return e
            }, t.prototype.getJsonByKeys = function(e) {
                let t = {},
                    s = this.mappingInfos;
                for (let a = 0; a < e.length; a++) {
                    let n = e[a];
                    if (s.hasOwnProperty(n)) {
                        let e = s[n][0],
                            a = s[n][1],
                            r = this[e];
                        i(t, n, r, a)
                    }
                }
                return t
            }, t.prototype.clean = function() {
                let e = this.mappingInfos;
                for (let t in e)
                    if (e.hasOwnProperty(t)) {
                        let i = e[t][0];
                        this[i] && (this[i] instanceof Array ? this[i].length = 0 : this[i] instanceof Map ? this[i].clear() : this[i] instanceof ha && this[i].clean())
                    }
            }
        }
        e.ObjType = void 0, (la = e.ObjType || (e.ObjType = {}))[la.Map = 1] = "Map", la[la.Number = 2] = "Number", la[la.String = 3] = "String";
        class ga extends ha {
            isMap(t) {
                if (this[t] && this[t] instanceof Map) return !0;
                return !(!this.mappingInfos || !this.mappingInfos[t] || this.mappingInfos[t][0] != e.ObjType.Map)
            }
            fromJson(e) {
                let t;
                try {
                    t = fx.Utils.isObject(e) ? e : JSON.parse(e)
                } catch (e) {
                    console.log(e)
                }
                if (t) {
                    let e = this;
                    for (const i in t) {
                        let s = t[i];
                        if ("_" != i[0] && null != s)
                            if (this.isMap(i)) {
                                let t = new Map;
                                for (const e of s) t.set(e.k, e.v);
                                e[i] = t
                            } else this[i] = s
                    }
                }
            }
            toJson() {
                let e = this,
                    t = {};
                for (const i in this)
                    if ("_" != i[0] && null != this[i])
                        if (this[i] instanceof Map) {
                            let s = [];
                            e[i].forEach((e, t) => {
                                s.push({
                                    k: t,
                                    v: e
                                })
                            }), t[i] = s
                        } else t[i] = this[i];
                return t
            }
            onNewDay() {}
            onNewGameDay() {}
        }

        function ca(e) {
            return function(t) {
                t.prototype.cheatScene = e
            }
        }

        function pa(e, i, s, a) {
            let n = e[i];
            try {
                let i = t.cryptUtil.encryptXor(`${n}`),
                    r = e["__" + s];
                if (r && i != r) {
                    let i = t.cryptUtil.decryptXor(r);
                    a || e.cheatScene
                }
            } catch (e) {
                console.log("checkCheat error:", e)
            }
        }

        function fa(e, i, s, a = !1) {
            let n = "__" + i;
            pa(e, "_" + i, i, s);
            let r = e[n];
            if (r) {
                let e = t.cryptUtil.decryptXor(r);
                return a ? e : Number(e)
            }
        }

        function ma() {
            return function(e, i) {
                let s = "_" + i,
                    a = "__" + i;
                delete e[i], Object.defineProperty(e, i, {get: function() {
                        return fa(this, i)
                    },
                    set: function(e) {
                        isNaN(e) || this[s] != e && (pa(this, s, i), this[a] = t.cryptUtil.encryptXor(`${e}`), this[s] = e)
                    }
                })
            }
        }

        function ya(e, i, s, a, n, r) {
            return function(o, l) {
                da(o, l, e, i, s);
                let h = "_" + l,
                    d = "__" + l;
                delete o[l], Object.defineProperty(o, l, {get: function() {
                        return r ? fa(this, l, r) : this[h]
                    },
                    set: function(i) {
                        let o = this,
                            u = void 0 !== this[h];
                        if (this[h] != i) {
                            r && (pa(this, h, l, r), this[d] = t.cryptUtil.encryptXor(`${i}`));
                            let g = this[h];
                            if (this[h] = i, t.user && t.user.changeAccount) return;
                            (u || "moment" == s) && (n && n(i, g), a && "x" != a && o.event(a, [i, g]), this.onPropertyChange && this.onPropertyChange(e))
                        }
                    }
                })
            }
        }
        e.StoreStream = class extends Laya.EventDispatcher {
            constructor() {
                super(), this.changeKeys = [], this.needSaveLocal = !0
            }
            init(e, t) {}
            onLateInit() {}
            onNewDay() {}
            clear() {}
            isNeedSaveLocal() {
                return this.needSaveLocal
            }
            setNeedSaveLocal(e) {
                return this.needSaveLocal = e
            }
            onPropertyChange(e) {
                this.changeKeys.indexOf(e) < 0 && this.changeKeys.push(e), this.needSaveLocal || (this.needSaveLocal = !0, Laya.timer.callLater(this, this.save))
            }
            isDataChanged() {
                return this.changeKeys.length > 0
            }
            save() {
                this.needSaveLocal && this.saveToLocal()
            }
            clearChangeKeys() {
                let e = this.changeKeys;
                return this.changeKeys = [], e
            }
            mergeChangeKeys(e) {
                e.length > 0 && e.forEach(e => {
                    this.changeKeys.includes(e) || this.changeKeys.push(e)
                })
            }
            parseFromLocal() {
                let e;
                try {
                    if (e = this.IsEncrypt ? aa.getEncrypt(this.StoreKey) : aa.getString(this.StoreKey)) {
                        let t = JSON.parse(e);
                        t && this.fromJson(t)
                    }
                } catch (t) {
                    try {
                        if (e = aa.getEncrypt(this.StoreKey)) {
                            let t = JSON.parse(e);
                            t && this.fromJson(t)
                        }
                    } catch (t) {
                        console.error(this.StoreKey + " parseFromLocal...  value : " + e + "  err: " + t)
                    }
                }
                this.changeKeys.length = 0, this.needSaveLocal = !1, console.debug(this.StoreKey + " parseFromLocal...  value : " + e)
            }
            saveToLocal() {
                if (t.user.changeAccount) return;
                if (this.needSaveLocal = !1, !this.StoreKey) return;
                t.user.addLocalVersion();
                let e = JSON.stringify(this.toJson());
                this.IsEncrypt ? aa.setEncrypt(this.StoreKey, e) : aa.setString(this.StoreKey, e)
            }
            parseFromServer(e) {
                this.fromJson(e), this.changeKeys.length = 0, console.log(this.StoreKey + " parseFromServer...  ")
            }
            fromJson(e, t = 1) {}
            toJson(e = 1) {
                return null
            }
            getJson() {
                return null
            }
            getJsonByKeys(e, t = 1) {
                return null
            }
            getChangeJson() {
                return this.changeKeys.length > 0 ? this.getJsonByKeys(this.changeKeys) : null
            }
        }, e.StoreStream = na([ua], e.StoreStream);
        let Ca = [];

        function _a(e, t, i = !1) {
            return function(s) {
                Ca.includes(e) && console.error("重复的存储key " + e), Ca.push(e), s.prototype.Key = e, s.prototype.StoreKey = e, s.prototype.IsEncrypt = t, s.prototype.isLocal = i
            }
        }
        class ka extends ga {}
        class ba extends ga {}
        class wa extends ga {}
        class Sa extends ga {}
        class Ia extends ga {}
        class va extends ga {}
        e.GameInfo = class extends e.StoreStream {
            constructor() {
                super(), this.coin = 0, this.tian = 0, this.vibrateEnable = !0, this.showSkinRed = !0, this.dailyShare = !1, this.dailyBuyZr = !1, this.isUnlockAngelOrGhost = !1, this.isUnlockHunter = !1, this.isUnlockSevenGhost = !1, this.isGetTian = !1, this.inviteCnt = 0, this.inviteClaimed = 0, this._clubDataList = [], this.clear()
            }
            clear() {
                this.coin = 0, this.tian = 0, this.tempCoin = 0, this.curSkinId = 1001, this.curHunterSkinId = 10001, this.maxLevel = 1, t.reporter.setUserMaxLevel(this.maxLevel), this.winCnt = 0, this.failCnt = 0, this.isStartLv = !1, this.weekMaxLv = 1, this.curLv = 1, t.reporter.setUserLevel(this.curLv), this.lastLv = 1, this.lowestLv = 1, this.todayMaxLv = 0, this.todayExtraScore = 0, this.isLastWin = !1, this.isMapByWeek = !1, this.maxWinCnt = 0, this.isUseSkinFragmentVideo = !1, this.getFragmentCnt = 0, this.mapBuildRate = 0, this.taskIndex = 1, this.isExitGame = !1, this.magicGetCnt = 0, this.isFirstBuild = !0, this.dailyShareCnt = 0, this.canPlayTurnTable = !0, this.showTurntableCnt = 0, this.dailyShare = !1, this.dailyBuyZr = !1, this.playHunter = !1, this.curHunterLv = 1, this.lastHunterLv = 1, this.lowestHunterLv = 1, this.todayHunterMaxLv = 0, this.todayHunterExtraScore = 0, this.isLastHunterWin = !1, this.maxHunterLevel = 1, this.hunterBox = 3, this.hunterUnlockLvl = 0, this.curSevenGhostLv = 1, this.isUnlockSevenGhost = !1, this.isUnlockAngelOrGhost = !1, this.isUnlockHunter = !1, this.isGetTian = !1, this.clubClaimedList = [], this.isEvaluate = !1, this.isOpenEvaluate = !1, this.inviteCnt = 0, this.inviteClaimed = 0, this.isOpenNewSkin = !1, this.isCommond = !1, this.isOpenCommond = !1, this.clearOwnBuild(), this.clearOwnSkin(), this.clearOwnSkinFragment(), this.clearSkinTypeShow(), this.clearOwnPrize(), this.clearOwnBuff(), this.clearOwnHunterSkin(), this.clearShowHunterSkillDes()
            }
            init(e) {
                this.tempCoin > 0 && (this.coin += this.tempCoin)
            }
            onNewDay() {
                this.isStartLv = !0, this.curLv = 1, t.reporter.setUserLevel(this.curLv), this.lastLv = 1, this.lowestLv = 1, this.todayMaxLv = 0, this.isLastWin = !1, this.isMapByWeek = !1, this.maxWinCnt = 0, this.dailyShareCnt = 0, this.canPlayTurnTable = !0, this.dailyShare = !1, this.dailyBuyZr = !1, this.playHunter = !1, this.curHunterLv = 1, this.lastHunterLv = 1, this.lowestHunterLv = 1, this.todayHunterMaxLv = 0, this.isLastHunterWin = !1, this.hunterUnlockLvl = 0, this.isGetTian = !1, this.clearOwnBuff(), this.todayExtraScore = 0, this.todayHunterExtraScore = 0, this.isUseSkinFragmentVideo = !1, this.isExitGame = !1, this.magicGetCnt = 0, this.showSkinRed = !0, this.isOpenCommond = !1;
                let e = [];
                this.isClubRewardClaimed(1) && e.push(1), this.clubClaimedList = e, t.user.saveToServer()
            }
            coinEnough(e) {
                return this.coin >= e
            }
            useCoin(e, i) {
                if (!fx.Utils.isNumber(e)) return;
                if (!i && !this.coinEnough(e)) return !1;
                let s = Math.max(this.coin - e, 0);
                return this.coin = s, t.user.saveToServer(), !0
            }
            addCoin(e) {
                fx.Utils.isNumber(e) && (this.coin += e)
            }
            addTempCoin(e, i = !0) {
                fx.Utils.isNumber(e) && (this.tempCoin += e, i && t.user.saveToServer())
            }
            subTempCoin(e) {
                let t = this.tempCoin - e;
                t = Math.max(t, 0), this.tempCoin = t, this.addCoin(e)
            }
            tianEnough(e) {
                return this.tian >= e
            }
            useTian(e, i) {
                if (!fx.Utils.isNumber(e)) return;
                if (!i && !this.coinEnough(e)) return !1;
                let s = Math.max(this.tian - e, 0);
                return this.tian = s, t.user.saveToServer(), !0
            }
            addTian(e) {
                fx.Utils.isNumber(e) && (this.tian += e)
            }
            setCurLv(e) {
                this.curLv = e, t.reporter.setUserLevel(this.curLv), e - this.lowestLv > 1 && (this.lowestLv = e - 1), t.user.saveToServer()
            }
            setCurHunterLv(e) {
                this.curHunterLv = e, e - this.lowestHunterLv > 1 && (this.lowestHunterLv = e - 1), t.user.saveToServer()
            }
            clearOwnBuild() {
                this.ownBuild = new Map, t.cfg.shopCfg.foreach(e => {
                    let t = new ba;
                    t.cnt = e.initialHave, this.ownBuild.set(e.buildId, t)
                }), this.onPropertyChange("ownBuild")
            }
            getOwnBuildCnt(e) {
                if (this.ownBuild.has(e)) {
                    let t = this.ownBuild.get(e);
                    return t.cnt < 0 ? (t.cnt = 0, this.ownBuild.set(e, t), this.onPropertyChange("ownBuild"), 0) : t.cnt
                }
                return 0
            }
            addOwnBuildData(e, t, i) {
                6666 == e && (i = 20);
                let s = this.ownBuild.get(e);
                this.ownBuild.has(e) || (s = new ba), s.cnt += t, i && (s.cnt = Math.min(s.cnt, i)), this.ownBuild.set(e, s), this.onPropertyChange("ownBuild")
            }
            useBuildData(e, i = 1) {
                let s = this.ownBuild.get(e);
                this.ownBuild.has(e) ? (s.cnt -= i, this.ownBuild.set(e, s), this.onPropertyChange("ownBuild"), t.user.saveToServer()) : s = new ba
            }
            clearOwnSkin() {
                this.ownSkin = new Map, t.cfg.skin.foreach(t => {
                    let i = new wa;
                    i.cnt = 0, i.isUnlock = !1, t.unlock && 999 == t.unlock.way && t.type == e.SkinType.Human && (i.isUnlock = !0), this.ownSkin.set(t.id, i)
                }), this.onPropertyChange("ownSkin")
            }
            isUnlockSkin(e) {
                if (this.ownSkin.has(e)) {
                    return this.ownSkin.get(e).isUnlock
                }
                return null
            }
            getSkinData(e) {
                if (this.ownSkin.has(e)) {
                    return this.ownSkin.get(e)
                }
                return null
            }
            unlockSkin(e) {
                let i;
                this.ownSkin.has(e) ? i = this.ownSkin.get(e) : (i = new wa).cnt = 0, i.isUnlock = !0;
                let s = t.cfg.skin.get(e);
                s && XAnalyticsUtil.getSkin(s.name), this.onPropertyChange("ownSkin")
            }
            getSkinCnt() {
                let e = 0;
                for (const [t, i] of this.ownSkin) i.isUnlock && e++;
                return e
            }
            clearOwnSkinFragment() {
                this.ownSkinFragment = new Map, t.cfg.skin.foreach(e => {
                    if (!this.ownSkinFragment.has(e.skinType)) {
                        let t = new Sa;
                        t.cnt = 0, t.cnt_1 = 0, this.ownSkinFragment.set(e.skinType, t)
                    }
                }), this.onPropertyChange("ownSkinFragment")
            }
            getOwnSkinFragmentCnt(e, t = 0) {
                if (!this.ownSkinFragment.has(e)) return 0; {
                    let i = this.ownSkinFragment.get(e);
                    switch (t) {
                        case 0:
                            return i.cnt;
                        case 1:
                            return i.cnt_1 || (i.cnt_1 = 0), i.cnt_1;
                        default:
                            return i.cnt
                    }
                }
            }
            addOwnSkinFragmentData(e, t, i = 0) {
                let s = this.ownSkinFragment.get(e);
                switch (this.ownSkinFragment.has(e) || (s = new Sa), i) {
                    case 0:
                        s.cnt += t;
                        break;
                    case 1:
                        s.cnt_1 || (s.cnt_1 = 0), s.cnt_1 += t;
                        break;
                    default:
                        s.cnt += t
                }
                this.ownSkinFragment.set(e, s), this.onPropertyChange("ownSkinFragment")
            }
            useSkinFragmentData(e, t, i = 0) {
                let s = this.ownSkinFragment.get(e);
                switch (this.ownSkinFragment.has(e) || (s = new Sa), i) {
                    case 0:
                        s.cnt -= t;
                        break;
                    case 1:
                        s.cnt_1 || (s.cnt_1 = 0), s.cnt_1 -= t;
                        break;
                    default:
                        s.cnt -= t
                }
                this.ownSkinFragment.set(e, s), this.onPropertyChange("ownSkinFragment")
            }
            clearSkinTypeShow() {
                this.skinTypeShow = new Map, t.cfg.skin.foreach(e => {
                    if (!this.skinTypeShow.has(e.skinType)) {
                        let t = new Ia;
                        t.id = e.id, this.skinTypeShow.set(e.skinType, t)
                    }
                }), this.onPropertyChange("ownSkinTypeShow")
            }
            getSkinTypeShow(e) {
                if (this.skinTypeShow.has(e)) {
                    return this.skinTypeShow.get(e).id
                }
                return 0
            }
            setSkinTypeShow(e, i) {
                if (this.skinTypeShow.has(i)) {
                    this.skinTypeShow.get(i).id = e
                } else {
                    let t = new Ia;
                    t.id = e, this.skinTypeShow.set(i, t)
                }
                this.onPropertyChange("ownSkinTypeShow"), t.user.saveToServer()
            }
            clearOwnPrize() {
                this.ownPrize = new Map, this.onPropertyChange("ownPrize")
            }
            addOwnPrizeData(e, t = 1) {
                let i = this.ownPrize.get(e);
                this.ownPrize.has(e) || ((i = new ba).cnt = 0), i.cnt += t, this.ownPrize.set(e, i), this.onPropertyChange("ownPrize")
            }
            usePrizeData(e, i = 1) {
                let s = this.ownPrize.get(e);
                this.ownPrize.has(e) || (s = new ba), s.cnt -= i, 0 == s.cnt ? this.ownPrize.delete(e) : this.ownPrize.set(e, s), this.onPropertyChange("ownPrize"), t.user.saveToServer()
            }
            clearOwnBuff() {
                this.ownBuff = new Map, this.buffLvArr = [], this.onPropertyChange("ownBuff")
            }
            addBuff(e) {
                let i = this.ownBuff.get(e);
                i ? i.lv += 1 : (i = new va).lv = 0;
                let s = t.cfg.buffCfg.get(e);
                XAnalyticsUtil.buffGet(s.name, i.lv), this.ownBuff.set(e, i), this.onPropertyChange("ownBuff")
            }
            getBuffData(e) {
                return this.ownBuff.get(e)
            }
            clearOwnHunterSkin() {
                this.ownHunterSkin = new Map, t.cfg.skin.foreach(t => {
                    let i = new wa;
                    i.cnt = 0, i.isUnlock = !1, t.unlock && 999 == t.unlock.way && t.type == e.SkinType.Hunter && (i.isUnlock = !0), this.ownHunterSkin.set(t.id, i)
                }), this.onPropertyChange("ownHunterSkin")
            }
            isUnlockHunterSkin(e) {
                if (this.ownHunterSkin.has(e)) {
                    return this.ownHunterSkin.get(e).isUnlock
                }
                return null
            }
            unlockHunterSkin(e) {
                let t;
                this.ownHunterSkin.has(e) ? t = this.ownHunterSkin.get(e) : (t = new wa).cnt = 0, t.isUnlock = !0, this.onPropertyChange("ownHunterSkin")
            }
            updateGameClubData() {
                let e = [];
                t.cfg.clubReward.getList().forEach(t => {
                    e.includes(t.clubDataType) || e.push(t.clubDataType)
                }), j.I.getGameClubData(e, e => {
                    this._clubDataList = e || [], this.event(Ce.GameClubDataChange)
                })
            }
            getClubValue(t) {
                for (const i of this._clubDataList)
                    if (i.dataType == t) return t == e.GameClubDataType.JoinClubTime ? i.value > 0 ? 1 : 0 : i.value;
                return 0
            }
            isClubRewardClaimed(e) {
                return this.clubClaimedList.includes(e)
            }
            claimClubReward(e) {
                let i = this.clubClaimedList.slice();
                for (const s of e)
                    if (!i.includes(s)) {
                        i.push(s);
                        let e = t.cfg.clubReward.get(s);
                        t.rewardMgr.addReward(e.reward), XAnalyticsUtil.clubReward(e.clubDataType)
                    }
                this.clubClaimedList = i, t.user.saveToServer(), this.event(Ce.GameClubRewardClaimed)
            }
            clearShowHunterSkillDes() {
                this.showHunterSkillDes = new Map, this.onPropertyChange("showHunterDes")
            }
            addShowHunterSkillDes(e) {
                let t = new ka;
                t.b = !0, this.showHunterSkillDes.set(e, t), this.onPropertyChange("showHunterDes")
            }
            getShowHunterSkillDes(e) {
                return this.showHunterSkillDes.get(e)
            }
        }, na([ya("coin", e.StreamType.Original, null, Ce.CoinChange)], e.GameInfo.prototype, "coin", void 0), na([ya("tian", e.StreamType.Original, null, Ce.TianChange)], e.GameInfo.prototype, "tian", void 0), na([ya("tempCoin", e.StreamType.Original)], e.GameInfo.prototype, "tempCoin", void 0), na([ya("vibrateEnable", e.StreamType.Original)], e.GameInfo.prototype, "vibrateEnable", void 0), na([ya("curSkinId", e.StreamType.Original)], e.GameInfo.prototype, "curSkinId", void 0), na([ya("curHunterSkinId", e.StreamType.Original)], e.GameInfo.prototype, "curHunterSkinId", void 0), na([ya("ownBuild", e.StreamType.Assembly, ba)], e.GameInfo.prototype, "ownBuild", void 0), na([ya("ownSkin", e.StreamType.Assembly, wa)], e.GameInfo.prototype, "ownSkin", void 0), na([ya("ownSkinFragment", e.StreamType.Assembly, Sa)], e.GameInfo.prototype, "ownSkinFragment", void 0), na([ya("skinTypeShow", e.StreamType.Assembly, Ia)], e.GameInfo.prototype, "skinTypeShow", void 0), na([ya("maxLevel", e.StreamType.Original)], e.GameInfo.prototype, "maxLevel", void 0), na([ya("winCnt", e.StreamType.Original)], e.GameInfo.prototype, "winCnt", void 0), na([ya("failCnt", e.StreamType.Original)], e.GameInfo.prototype, "failCnt", void 0), na([ya("isStartLv", e.StreamType.Original)], e.GameInfo.prototype, "isStartLv", void 0), na([ya("weekMaxLv", e.StreamType.Original)], e.GameInfo.prototype, "weekMaxLv", void 0), na([ya("curLv", e.StreamType.Original)], e.GameInfo.prototype, "curLv", void 0), na([ya("lastLv", e.StreamType.Original)], e.GameInfo.prototype, "lastLv", void 0), na([ya("lowestLv", e.StreamType.Original)], e.GameInfo.prototype, "lowestLv", void 0), na([ya("todayMaxLv", e.StreamType.Original)], e.GameInfo.prototype, "todayMaxLv", void 0), na([ya("todayExtraScore", e.StreamType.Original)], e.GameInfo.prototype, "todayExtraScore", void 0), na([ya("isLastWin", e.StreamType.Original)], e.GameInfo.prototype, "isLastWin", void 0), na([ya("isMapByWeek", e.StreamType.Original)], e.GameInfo.prototype, "isMapByWeek", void 0), na([ya("maxWinCnt", e.StreamType.Original)], e.GameInfo.prototype, "maxWinCnt", void 0), na([ya("isUseSkinFragmentVideo", e.StreamType.Original)], e.GameInfo.prototype, "isUseSkinFragmentVideo", void 0), na([ya("getFragmentCnt", e.StreamType.Original)], e.GameInfo.prototype, "getFragmentCnt", void 0), na([ya("mapBuildRate", e.StreamType.Original)], e.GameInfo.prototype, "mapBuildRate", void 0), na([ya("taskIndex", e.StreamType.Original)], e.GameInfo.prototype, "taskIndex", void 0), na([ya("isExitGame", e.StreamType.Original)], e.GameInfo.prototype, "isExitGame", void 0), na([ya("magicGetCnt", e.StreamType.Original)], e.GameInfo.prototype, "magicGetCnt", void 0), na([ya("isFirstBuild", e.StreamType.Original)], e.GameInfo.prototype, "isFirstBuild", void 0), na([ya("isGetPrize", e.StreamType.Original)], e.GameInfo.prototype, "isGetPrize", void 0), na([ya("prizeArr", e.StreamType.Original)], e.GameInfo.prototype, "prizeArr", void 0), na([ya("ownPrize", e.StreamType.Assembly, ba)], e.GameInfo.prototype, "ownPrize", void 0), na([ya("dailyShareCnt", e.StreamType.Original)], e.GameInfo.prototype, "dailyShareCnt", void 0), na([ya("canPlayTurnTable", e.StreamType.Original)], e.GameInfo.prototype, "canPlayTurnTable", void 0), na([ya("showTurntableCnt", e.StreamType.Original)], e.GameInfo.prototype, "showTurntableCnt", void 0), na([ya("showSkinRed", e.StreamType.Original)], e.GameInfo.prototype, "showSkinRed", void 0), na([ya("isUnlockBuff", e.StreamType.Original)], e.GameInfo.prototype, "isUnlockBuff", void 0), na([ya("ownBuff", e.StreamType.Assembly, va)], e.GameInfo.prototype, "ownBuff", void 0), na([ya("buffLvArr", e.StreamType.Original)], e.GameInfo.prototype, "buffLvArr", void 0), na([ya("dailyShare", e.StreamType.Original)], e.GameInfo.prototype, "dailyShare", void 0), na([ya("dailyBuyZr", e.StreamType.Original)], e.GameInfo.prototype, "dailyBuyZr", void 0), na([ya("playHunter", e.StreamType.Original)], e.GameInfo.prototype, "playHunter", void 0), na([ya("curHunterLv", e.StreamType.Original)], e.GameInfo.prototype, "curHunterLv", void 0), na([ya("lastHunterLv", e.StreamType.Original)], e.GameInfo.prototype, "lastHunterLv", void 0), na([ya("lowestHunterLv", e.StreamType.Original)], e.GameInfo.prototype, "lowestHunterLv", void 0), na([ya("todayHunterMaxLv", e.StreamType.Original)], e.GameInfo.prototype, "todayHunterMaxLv", void 0), na([ya("todayHunterExtraScore", e.StreamType.Original)], e.GameInfo.prototype, "todayHunterExtraScore", void 0), na([ya("isLastHunterWin", e.StreamType.Original)], e.GameInfo.prototype, "isLastHunterWin", void 0), na([ya("maxHunterLevel", e.StreamType.Original)], e.GameInfo.prototype, "maxHunterLevel", void 0), na([ya("hunterBox", e.StreamType.Original)], e.GameInfo.prototype, "hunterBox", void 0), na([ya("hunterUnlockLvl", e.StreamType.Original)], e.GameInfo.prototype, "hunterUnlockLvl", void 0), na([ya("ownHunterSkin", e.StreamType.Assembly, wa)], e.GameInfo.prototype, "ownHunterSkin", void 0), na([ya("curSevenGhostLv", e.StreamType.Original)], e.GameInfo.prototype, "curSevenGhostLv", void 0), na([ya("isUnlockAngelOrGhost", e.StreamType.Original)], e.GameInfo.prototype, "isUnlockAngelOrGhost", void 0), na([ya("isUnlockHunter", e.StreamType.Original)], e.GameInfo.prototype, "isUnlockHunter", void 0), na([ya("isUnlockSevenGhost", e.StreamType.Original)], e.GameInfo.prototype, "isUnlockSevenGhost", void 0), na([ya("isGetTian", e.StreamType.Original)], e.GameInfo.prototype, "isGetTian", void 0), na([ya("clubClaimedList", e.StreamType.Original)], e.GameInfo.prototype, "clubClaimedList", void 0), na([ya("isEvaluate", e.StreamType.Original)], e.GameInfo.prototype, "isEvaluate", void 0), na([ya("isOpenEvaluate", e.StreamType.Original)], e.GameInfo.prototype, "isOpenEvaluate", void 0), na([ya("inviteCnt", e.StreamType.Original, null, Ce.InviteCntChange)], e.GameInfo.prototype, "inviteCnt", void 0), na([ya("inviteClaimed", e.StreamType.Original)], e.GameInfo.prototype, "inviteClaimed", void 0), na([ya("isOpenNewSkin", e.StreamType.Original)], e.GameInfo.prototype, "isOpenNewSkin", void 0), na([ya("showHunterSkillDes", e.StreamType.Assembly, ka)], e.GameInfo.prototype, "showHunterSkillDes", void 0), na([ya("isCommond", e.StreamType.Original)], e.GameInfo.prototype, "isCommond", void 0), na([ya("isOpenCommond", e.StreamType.Original)], e.GameInfo.prototype, "isOpenCommond", void 0), e.GameInfo = na([_a(sa.User.GameInfo, !1)], e.GameInfo);
        const Ma = window.moment;
        e.UserInfo = class extends e.StoreStream {
            constructor() {
                super(...arguments), this.useLocalTime = !1, this.loginTime = 0, this.loginDay = 1, this.todayLoginCnt = 0, this.cityId = 0, this.createTime = 0, this.profileRejected = !1
            }
            get day() {
                if (0 == this.createTime) return -1;
                let e = Math.max(t.gameTime.now - this.createTime, 0);
                return Math.floor(e / 864e5) + 1
            }
            clear() {
                this.cityId = 0
            }
            init(e, t) {
                this.todayLoginCnt++
            }
            onNewDay() {
                this.loginDay++, this.todayLoginCnt = 1
            }
            checkDailyReset() {
                let e = t.gameTime.now;
                return this.dailyResetTime ? !!Ma(e).isAfter(this.dailyResetTime) && (this.dailyResetTime = Ma(e).subtract(8, "hours").startOf("days").add(8, "hour").add(1, "day"), !0) : (this.dailyResetTime = Ma(e).subtract(8, "hours").startOf("days").add(8, "hour").add(1, "day"), !1)
            }
            checkWeeklyReset() {
                let e = t.gameTime.now;
                return this.weeklyResetTime ? !!Ma(e).isAfter(this.weeklyResetTime) && (this.weeklyResetTime = Ma(e).weekday(1).startOf("days").add(8, "hour").add(7, "day"), !0) : (this.weeklyResetTime = Ma(e).weekday(1).startOf("days").add(8, "hour").add(7, "day"), !1)
            }
            getDailyResetTime() {
                return Ma(this.dailyResetTime)
            }
            getWeeklyResetTime() {
                return Ma(this.weeklyResetTime)
            }
            getUserProfile() {
                return new Promise((e, t) => {
                    let i = Laya.LocalStorage.getItem("nickName"),
                        s = Laya.LocalStorage.getItem("avatarUrl");
                    if (i) console.log("---------------get nickname from store"), e({
                        nickName: i,
                        avatarUrl: s || ""
                    });
                    else {
                        if (this.profileRejected) return void e({
                            nickName: "",
                            avatarUrl: ""
                        });
                        fx.EventCenter.I.once(sdk.SdkEvent.E_USER_INFO, this, t => {
                            let i = "",
                                s = "";
                            0 == t.code ? (t.nickName.includes("游客") || (i = t.nickName), t.info && (s = t.info.avatarUrl || "")) : this.profileRejected = !0, i && Laya.LocalStorage.setItem("nickName", i), s && Laya.LocalStorage.setItem("avatarUrl", s), console.log("---------------on sdk return profile"), e({
                                nickName: i,
                                avatarUrl: s
                            })
                        }), console.log("---------------get nickname from sdk"), sdk.Sdk.instance.getNickName(), fx.Utils.isOnPC() && e({
                            nickName: "",
                            avatarUrl: ""
                        })
                    }
                })
            }
            async checkUserProfile() {
                let e = !1,
                    t = await this.getUserProfile();
                this.name != t.nickName && t.nickName && (e = !0, this.name = t.nickName), this.avatarUrl != t.avatarUrl && t.avatarUrl && (e = !0, this.avatarUrl = t.avatarUrl)
            }
            setCityId(e) {
                this.cityId = e, t.user.saveToServer()
            }
            isSelectCity() {
                return !!this.cityId
            }
            async getCityByIp() {
                let e = "https://ip.useragentinfo.com/json",
                    i = await t.http.send(e, "Get", {}, 10);
                return i && i.city ? i.city : (e = "https://cdwaterbear.cn/ip/queryex", (i = await t.http.send(e, "Get", {}, 10)) && i.data && i.data.city ? i.data.city : void 0)
            }
        }, na([ya("lot", e.StreamType.Original, null, "x")], e.UserInfo.prototype, "useLocalTime", void 0), na([ya("lt", e.StreamType.Original, null, "x")], e.UserInfo.prototype, "loginTime", void 0), na([ya("ld", e.StreamType.Original, null, "x")], e.UserInfo.prototype, "loginDay", void 0), na([ya("tlc", e.StreamType.Original, null, "x")], e.UserInfo.prototype, "todayLoginCnt", void 0), na([ya("crt", e.StreamType.Assembly, "moment", "x")], e.UserInfo.prototype, "dailyResetTime", void 0), na([ya("wrt", e.StreamType.Assembly, "moment", "x")], e.UserInfo.prototype, "weeklyResetTime", void 0), na([ya("cityId", e.StreamType.Original)], e.UserInfo.prototype, "cityId", void 0), e.UserInfo = na([_a(sa.User.UserInfo, !1)], e.UserInfo), 
        e.CommonInfo = class extends e.StoreStream {
            constructor() {
                super(), this.clear()
            }
            onNewDay() {
                this.shareCntOnVideo = 0
            }
            clear() {
                this.saveProgramClaimed = !1, this.addToDeskClaimed = !1, this.shareCnt = 0, this.shareCntOnVideo = 0, this.isSubscribe = !1
            }
            claimSaveProgramReward() {
                this.saveProgramClaimed = !0, t.rewardMgr.addReward(t.cfg.constant.saveProgramReward), t.user.saveToServer()
            }
            claimAddToDeskReward() {
                this.addToDeskClaimed = !0, t.rewardMgr.addReward(t.cfg.constant.addToDeskReward), t.user.saveToServer()
            }
            setSubscribe() {
                this.isSubscribe = !0, t.user.saveToServer()
            }
        }, na([ya("saveProgramClaimed", e.StreamType.Original)], e.CommonInfo.prototype, "saveProgramClaimed", void 0), na([ya("addToDeskClaimed", e.StreamType.Original)], e.CommonInfo.prototype, "addToDeskClaimed", void 0), na([ya("shareCnt", e.StreamType.Original)], e.CommonInfo.prototype, "shareCnt", void 0), na([ya("shareCntOnVideo", e.StreamType.Original)], e.CommonInfo.prototype, "shareCntOnVideo", void 0), na([ya("isSubscribe", e.StreamType.Original)], e.CommonInfo.prototype, "isSubscribe", void 0), e.CommonInfo = na([_a(sa.User.CommonInfo, !1)], e.CommonInfo), e.NavigateInfo = class extends e.StoreStream {
            constructor() {
                super(), this.isChecked = !1, this.isChecking = !1, this._iconList = [], this._dialogList = [], this._whiteIp = "", this.clear()
            }
            clear() {
                this.isBlackIp = !1, this.loginCnt = 0
            }
            init(e, t) {
                this.loginCnt++
            }
            async checkIp() {
                if (this.isChecked || this.isChecking) return;
                this.isChecking = !0;
                let e = await t.user.userInfo.getCityByIp();
                if (e) {
                    if (await this.getCfg(), !this.isBlackIp && this.cfg && this.cfg.blackCityList)
                        for (const i of this.cfg.blackCityList)
                            if (e.includes(i)) {
                                this.isBlackIp = !0, t.user.saveToServer();
                                break
                            }
                    if (this.cfg && this.cfg.gameList) {
                        let e = [],
                            t = [];
                        !this.isBlackIp && this.loginCnt >= this.cfg.blackLoginCnt && this.cfg.blackGames ? (e = this.cfg.blackGames.icon || [], t = this.cfg.blackGames.dialog || []) : this.cfg.normalGames && (e = this.cfg.normalGames.icon || [], t = this.cfg.normalGames.dialog || []);
                        let i = {};
                        for (const e of this.cfg.gameList) i[e.appId] = e;
                        let s = "";
                        i[V.appId] && (s = i[V.appId].group), this._iconList = [], this._dialogList = [];
                        for (const t of e) i[t] && t != V.appId && s != i[t].group && this._iconList.push(i[t]);
                        for (const e of t) i[e] && e != V.appId && s != i[e].group && this._dialogList.push(i[e]);
                        this._iconList = this.filterGroup(this._iconList), this._dialogList = this.filterGroup(this._dialogList)
                    }
                }
                this.event("OnCheckComplete"), this.isChecked = !0, this.isChecking = !1
            }
            filterGroup(e) {
                let t = {};
                fx.Utils.randomArray(e);
                for (let i = e.length - 1; i >= 0; --i) {
                    let s = e[i];
                    s.group && (t[s.group] ? e.splice(i, 1) : t[s.group] = !0)
                }
                return e
            }
            async getCfg() {
                if (this.cfg) return;
                let e = await t.http.send("https://cdn.105775.cn/navigate/common2.json", "Get", {}, 10);
                if (e && e.navigate) {
                    if (this.cfg = e.navigate, this._whiteIp = e.whiteIp, t.controller.versionData && t.controller.versionData.navigate)
                        for (const e in t.controller.versionData.navigate) this.cfg[e] = t.controller.versionData.navigate[e]
                } else;
            }
            getIconGameList() {
                return this._iconList.slice()
            }
            getDialogGameList() {
                return this._dialogList.slice()
            }
            hideBanner() {
                return this._iconList.length <= 1
            }
        }, na([ya("isBlackIp", e.StreamType.Original)], e.NavigateInfo.prototype, "isBlackIp", void 0), na([ya("loginCnt", e.StreamType.Original)], e.NavigateInfo.prototype, "loginCnt", void 0), e.NavigateInfo = na([_a(sa.User.NavigateInfo, !1)], e.NavigateInfo);
        class XUser {
            constructor() {
                this.localVersion = 0, this.changeAccount = !1, this._isUploading = !1, this._uploadDirty = !1;
                let t = Laya.LocalStorage.getItem("localVersion");
                if (t) {
                    let e = Number(t);
                    isNaN(e) || (this.localVersion = e)
                }
                this.infoMap = new Map, this.userInfo = this.reg(e.UserInfo), this.gameInfo = this.reg(e.GameInfo), this.commonInfo = this.reg(e.CommonInfo), this.navigateInfo = this.reg(e.NavigateInfo)
            }
            reg(e) {
                let t = new e;
                return this.infoMap.has(t.Key) && console.error("重复的key"), this.infoMap.set(t.Key, t), t
            }
            getStoreInfos() {
                let e = [];
                return this.infoMap.forEach(t => {
                    e.push(t)
                }), e
            }
            init() {
                let e = this.userInfo.checkDailyReset(),
                    t = this.userInfo.checkWeeklyReset(),
                    i = this.getStoreInfos();
                for (const s of i) s.init(e, t);
                for (const e of i) e.onLateInit();
                Laya.timer.loop(1e3, this, this.fixUpdate)
            }
            clear() {
                let e = this.getStoreInfos();
                for (const t of e) t.clear()
            }
            parseFromLocal() {
                let e = this.getStoreInfos();
                for (const t of e) t.parseFromLocal()
            }
            saveToLocal() {
                if (this.changeAccount) return;
                let e = this.getStoreInfos();
                for (const t of e) t.saveToLocal()
            }
            addLocalVersion() {
                this.localVersion++, this.saveLocalVersion()
            }
            getLocalVersion() {
                return this.localVersion
            }
            saveLocalVersion() {
                Laya.isWXPlayable || Laya.LocalStorage.setItem("localVersion", `${this.localVersion}`)
            }
            saveToServer() {
                this.changeAccount || Laya.timer.callLater(this, this.saveToServerForce)
            }
            saveToServerForce() {
                if (Laya.isWXPlayable) return;
                if (this._isUploading) return void(this._uploadDirty = !0);
                console.log("-----------saveToServer-----------"), this.addLocalVersion();
                let e = !1,
                    t = {
                        localVersion: this.localVersion
                    },
                    i = this.getStoreInfos().slice();
                for (let e = i.length - 1; e >= 0; e--) i[e].isLocal && i.splice(e, 1);
                let s = new Map,
                    a = {};
                for (let n = 0; n < i.length; ++n) {
                    let r = i[n],
                        o = r.getChangeJson();
                    if (o) {
                        t[r.Key] = o;
                        let i = r.clearChangeKeys();
                        s.set(r, i), a[r.Key] = i, i.length > 0 && (e = !0)
                    }
                }
                if (e) {
                    this._uploadDirty = !1, this._isUploading = !0;
                    let e = JSON.stringify(t);
                    XEventDispatcher.I.upload(e, e => {
                        e ? s.clear() : s.forEach((e, t) => {
                            t.mergeChangeKeys(e)
                        }), this._isUploading = !1, this._uploadDirty && (this._uploadDirty = !1, this.saveToServer())
                    })
                }
            }
            parseFromServer(e) {
                try {
                    let t = JSON.parse(e);
                    if (t && t.localVersion)
                        if (t.localVersion > this.localVersion) {
                            for (const e in t)
                                if (t.hasOwnProperty(e)) {
                                    let i = t[e],
                                        s = this.infoMap.get(e);
                                    s && !s.isLocal && s.parseFromServer(i)
                                }
                            this.localVersion = t.localVersion
                        } else
                            for (const e in t)
                                if (t.hasOwnProperty(e)) {
                                    let i = t[e],
                                        s = this.infoMap.get(e);
                                    if (i && s && !s.isLocal) {
                                        aa.getString(s.StoreKey) || s.parseFromServer(i)
                                    }
                                }
                } catch (e) {}
            }
            checkNewDay() {
                let e = !1;
                0 == this.userInfo.loginTime && (e = !0);
                let i = !1;
                if (!this.userInfo.isNewPlayer && t.gameTime.now > this.userInfo.loginTime && !Qs.isSameDay(t.gameTime.now, this.userInfo.loginTime) && (i = !0, e = !0), this.userInfo.loginTime = t.gameTime.now, i) {
                    let e = this.getStoreInfos();
                    for (const t of e) t.onNewDay && t.onNewDay()
                }
            }
            fixUpdate() {
                if (t.gameTime.now > this.userInfo.loginTime && !Qs.isSameDay(t.gameTime.now, this.userInfo.loginTime)) {
                    this.userInfo.loginTime = t.gameTime.now;
                    let e = this.getStoreInfos();
                    for (const t of e) t.onNewDay && t.onNewDay()
                }
            }
            async updateInvite() {
                let e = await XEventDispatcher.I.getInviteList();
                if (e && e.inviteCnt && e.inviteCnt > t.user.gameInfo.inviteCnt) {
                    let i = Math.clamp(t.user.gameInfo.inviteCnt, e.inviteCnt, 20);
                    t.user.gameInfo.inviteCnt = i, t.user.saveToServer()
                }
            }
            restartGame() {
                this.changeAccount = !0, XEventDispatcher.I.deleteStorage(e => {
                    this.changeAccount = !1, e && (Laya.LocalStorage.clear(), t.user.clear(), this.userInfo.loginTime = t.gameTime.now, t.user.init(), t.ui.changeScene(l.GameScene))
                })
            }
        }
        class XSpineScript extends Laya.Script {
            constructor() {
                super(...arguments), this.loop = !0
            }
            get node() {
                return this.owner
            }
            onAwake() {
                this.defaultAnim && (this.spine ? this.play(this.defaultAnim, this.loop) : this.loadSpine(this.url))
            }
            loadSpine(e, i) {
                t.assetLoader.createSpine(e, e => {
                    e && (this._sp = e, this.owner.addChild(this._sp), this.defaultAnim && this.play(this.defaultAnim, this.loop)), i && i(this._sp)
                })
            }
            onSpineLoad() {
                this.defaultSkin && this.spine.showSkinByName(this.defaultSkin)
            }
            onEnable() {
                this.spine && this.spine.resume()
            }
            onDisable() {
                this.spine && this.spine.paused()
            }
            get spine() {
                if (!this._sp) {
                    if (this.owner instanceof Laya.SpineSkeleton) return this.owner;
                    this._sp = this.owner.getChildByName("spine")
                }
                return this._sp
            }
            play(e, t, i, s, a, n, r) {
                let o = Array.prototype.slice.call(arguments);
                this.spine.play.apply(this.spine, o)
            }
            playCb(e, t, i) {
                this.setCompleteListener(i), this.spine.play(e, t, !0, 0)
            }
            getDuration(e) {
                let t = this.spine.findAnimation(e);
                return t ? t.duration : 0
            }
            set speed(e) {
                this.spine.speed = e
            }
            setCompleteListener(e) {
                this.spine.offAll(Laya.Event.STOPPED), e && this.spine.on(Laya.Event.STOPPED, this, e)
            }
            pause() {
                this.spine.paused()
            }
            resume() {
                this.spine.resume()
            }
            findSlot(e) {
                return this.spine.getSlotByName(e)
            }
            getAttachment(e, t) {
                return this.spine.skeleton.getAttachmentByName(e, t)
            }
            static create(e) {
                let i = new Laya.Box;
                i.width = i.height = 1;
                let s = i.addComponent(XSpineScript),
                    a = t.assetLoader.getSpineTemplet(e).buildArmature();
                return t.assetLoader.addSpineSkeletonReference(a), a.name = "spine", i.addChild(a), s
            }
        }
        class AssetLoader {
            constructor() {
                this._spineTemplets = {}, this._bmfonts = {}, this._assetMap = o;
                let e = 0;
                for (const t in this._assetMap) this._assetMap.hasOwnProperty(t) && (this._assetMap[t][3] = e, e++)
            }
            get assetMap() {
                return this._assetMap
            }
            cleanAll() {
                this._spineTemplets = {}
            }
            destroyUnusedResources() {
                Laya.Resource.destroyUnusedResources();
                for (const e in this._spineTemplets) {
                    let t = this._spineTemplets[e];
                    t && t.templet && !t.templet.lock && 0 == t.templet._referenceCount && delete this._spineTemplets[e]
                }
            }
            getAssetCfg(e) {
                return this._assetMap[e]
            }
            getAssetUrl(e, t) {
                if (!e) return;
                fx.Utils.isString(e) && ((e = this.getAssetCfg(e)) || console.error("can not find asseturl: " + name));
                let i = "";
                return i = fx.Utils.isFunction(e[2]) ? e[2](t) : e[2]
            }
            getZOrder(e) {
                let t = this.getAssetCfg(e);
                return t && t[3] || 0
            }
            createImage(e, t) {
                Laya.loader.load(e, Laya.Handler.create(this, () => {
                    let i = new Laya.Image;
                    i.skin = e, t(i)
                }))
            }
            addSpineSkeletonReference(e) {
                e.on(Laya.Event.ADDED, this, () => {
                    e.templet._addReference();
                    let t = e.templet._textureDic;
                    if (t)
                        for (const e in t) t[e] instanceof Laya.SpineGLTexture && t[e]._addReference()
                }), e.on(Laya.Event.REMOVED, this, () => {
                    e.templet._removeReference();
                    let t = e.templet._textureDic;
                    if (t)
                        for (const e in t) t[e] instanceof Laya.SpineGLTexture && t[e]._removeReference()
                })
            }
            createSpine(e, t) {
                this.loadSpineTemplet(e, () => {
                    let i = this.getSpineTemplet(e);
                    if (!i) return void(t && t(null));
                    let s = i.buildArmature();
                    this.addSpineSkeletonReference(s), t && t(s)
                })
            }
            getSpineTemplet(e) {
                let t = this._spineTemplets[e];
                if (t && t.templet && t.isLoaded && !t.templet.isDestroyed) return t.templet
            }
            loadSpineTemplet(e, t) {
                let i = this._spineTemplets[e];
                i && i.templet && i.templet.isDestroyed && (i = null, delete this._spineTemplets[e]), i && i.templet && i.isLoaded && !i.templet.isDestroyed ? t && t(i.templet) : (i || (i = {
                    templet: null,
                    isLoaded: !1,
                    callbackList: []
                }, this._spineTemplets[e] = i), i.callbackList.push(t), i.templet || (i.templet = new Laya.SpineTemplet_3_x, i.templet.lock = !0, i.templet.on(Laya.Event.COMPLETE, this, t => {
                    if (!t) return i.templet.lock = !1, void console.error(`找不到spine资源 ${e}`);
                    i.templet.lock = !1, i.isLoaded = !0;
                    let s = i.callbackList.slice();
                    i.callbackList = [];
                    for (const e of s) e(i.templet)
                }), i.templet.on(Laya.Event.ERROR, this, e => {
                    i.templet.lock = !1
                }), i.templet.loadAni(e)))
            }
            createBMFont(e, t) {
                this.loadBMFont(e, () => {
                    let i = new Laya.Label;
                    i.font = e, t(i)
                })
            }
            loadBMFont(e, t, i) {
                i = i || e;
                let s = Laya.Text._bitmapFonts;
                if (s && s[i]) return void(t && t(s[i]));
                let a = this._bmfonts[e];
                if (a) a.callbackList.push(t);
                else {
                    a = {
                        isLoaded: !1,
                        callbackList: [t]
                    }, this._bmfonts[e] = a;
                    let s = new Laya.BitmapFont;
                    s.letterSpacing = n[e] || 0, s.autoScaleSize = !0, s.loadFont(e, new Laya.Handler(this, () => {
                        a.isLoaded = !0, Laya.Text.registerBitmapFont(i, s);
                        let e = a.callbackList;
                        a.callbackList = [];
                        for (const t of e) t(s)
                    }))
                }
            }
            get(t, i, s) {
                switch (t) {
                    case e.AssetType.Bmfont:
                        return this.createBMFont(i, s);
                    case e.AssetType.Prefab:
                        return this.createPrefab(i, s);
                    case e.AssetType.Spine:
                        return this.createSpine(i, s);
                    case e.AssetType.Sprite:
                        return this.createImage(i, s)
                }
            }
            getBySign(e, t, i) {
                let s, a = (s = fx.Utils.isString(e) ? this.getAssetCfg(e) : e)[1],
                    n = this.getAssetUrl(s[0], t);
                this.get(a, n, i)
            }
            setSprite(e, t, i) {
                e.skin = this.getAssetUrl(t, i)
            }
            setBmfont(e, t, i, s) {
                this.loadBMFont(t, a => {
                    e.destroyed || (e.font = t, null != i && (e.text == i && (e.text = ""), e.text = i), s && fx.Effect.setColor(e, e.color), e.event("onSetFont"))
                })
            }
            createPrefab(e, t) {
                this.loadPrefab(e, e => {
                    if (!e) return;
                    let i = e.create(),
                        s = e.__spineUrl;
                    if (s) {
                        let e = i.getComponent(XSpineScript);
                        e || (e = i.getComponentInChildren(XSpineScript));
                        let t = this.getSpineTemplet(s).buildArmature();
                        this.addSpineSkeletonReference(t), t.name = "spine", e.node.addChild(t), e.onSpineLoad(), t.pos(e.node.width / 2, e.node.height)
                    }
                    t(i)
                })
            }
            loadPrefab(e, i, s) {
                e.includes(".json") || (e += ".json");
                let a = e => {
                        if ("Script" == e.type && e.props && e.props.runtime && e.props.runtime.includes("SpineScript")) return e.props.url;
                        if (e.child)
                            for (const t of e.child) {
                                let e = a(t);
                                if (e) return e
                            }
                        return null
                    },
                    n = "",
                    r = () => {
                        let a = new Laya.Prefab;
                        a.json = Laya.loader.getRes(e), n && (a.__spineUrl = n), s && t.assetPool.addPrefab(a, e), i(a)
                    },
                    o = e => {
                        e.loadList && e.loadList.length > 0 ? Laya.loader.load(e.loadList, new Laya.Handler(this, () => {
                            r()
                        })) : r()
                    };
                Laya.loader.load(e, Laya.Handler.create(this, t => {
                    t ? (n = a(t)) ? this.loadSpineTemplet(n, e => {
                        e ? o(t) : i(null, "加载spine : " + n + " 失败")
                    }) : o(t) : i(null, "加载prefab : " + e + " 失败")
                }))
            }
            async loadSkeleton(e, t) {
                return new Promise(i => {
                    let s = "";
                    (s = e && t ? e + "/" + t : e) ? this.loadSpineTemplet(s, e => {
                        i(e || null)
                    }): i(null)
                })
            }
        }
        var Ea, La;
        ! function(e) {
            e[e.Target = 1] = "Target", e[e.WorldPos = 2] = "WorldPos"
        }(Ea || (Ea = {})),
        function(e) {
            e[e.LeftBottom = 1] = "LeftBottom", e[e.LeftUp = 2] = "LeftUp", e[e.RightBottom = 3] = "RightBottom", e[e.RightUp = 4] = "RightUp"
        }(La || (La = {}));
        class Da extends Laya.Script {
            constructor() {
                super(...arguments), this.targetPosition = new fx.V2
            }
            onAwake() {
                if (this.node = this.owner, this.node.mouseEnabled = !0, this.parentNode = this.owner.parent, this.parentNode) {
                    this.parentHeight = this.parentNode.height;
                    let e = fx.Utils.isNotchScreenDevice();
                    e && (this.topY = e.notchTop || 0)
                }
            }
            getPosition() {
                if (this.targetPosition) switch (this.adaptionType) {
                    case Ea.WorldPos:
                        return this.targetPosition;
                    case Ea.Target:
                        let e = this.targetPosition,
                            t = this.node.scaleX,
                            i = this.node.width * t,
                            s = this.node.height * t,
                            a = isNaN(this.node.anchorX) ? 0 : this.node.anchorX,
                            n = isNaN(this.node.anchorY) ? 0 : this.node.anchorY;
                        switch (this.positionType) {
                            case La.LeftBottom:
                                return new fx.V2(e.x + a * i, e.y - (1 - n) * s);
                            case La.LeftUp:
                                return new fx.V2(e.x + a * i, e.y + n * s);
                            case La.RightBottom:
                                return new fx.V2(e.x - (1 - a) * i, e.y - (1 - n) * s);
                            case La.RightUp:
                                return new fx.V2(e.x - (1 - a) * i, e.y + n * s)
                        }
                }
                return new fx.V2
            }
            updatePosition() {
                if (this.parentNode && this.targetPosition && this.adaptionType) {
                    let e = this.getPosition(),
                        t = this.node.scaleX,
                        i = this.node.width * t,
                        s = this.node.height * t,
                        a = isNaN(this.node.anchorX) ? 0 : this.node.anchorX,
                        n = isNaN(this.node.anchorY) ? 0 : this.node.anchorY,
                        r = e.x + (1 - a) * i > this.parentNode.width ? this.parentNode.width - (1 - a) * i : e.x,
                        o = e.y + (1 - n) * s > this.parentHeight ? this.parentHeight - (1 - n) * s : e.y;
                    r = r - a * i < 0 ? a * i : r, o = o - n * s < this.topY ? n * s + this.topY : o, this.node.pos(r, o)
                }
            }
            setTarget(e, t) {
                if (this.parentNode.destroyed) return;
                let i = e.width * e.scaleX,
                    s = e.height * e.scaleY,
                    a = (isNaN(e.anchorX) || e.anchorX, isNaN(e.anchorY) || e.anchorY, isNaN(this.node.anchorX) ? 0 : this.node.anchorX),
                    n = isNaN(this.node.anchorY) ? 0 : this.node.anchorY,
                    r = new Laya.Point;
                e.localToGlobal(r);
                let o = r.x + .5 * i - this.node.width * (.5 - a),
                    l = o + this.node.width * (1 - a),
                    h = l - this.node.width;
                l > Laya.stage.width ? o -= l - Laya.stage.width : h < 0 && (o -= h);
                let d = 0,
                    u = d = t ? r.y - this.node.height * (1 - n) : r.y + s + this.node.height * n;
                u + this.node.height > Laya.stage.height ? d = r.y - this.node.height * (1 - n) : u < 0 && (d = r.y + s + this.node.height * n), this.node.pos(o, d)
            }
            setPosition(e, t = 0, i = 0) {
                this.adaptionType = Ea.WorldPos, this.targetPosition = e.clone(), this.targetPosition.x = e.x + t, this.targetPosition.y = e.y + i, this.updatePosition()
            }
            close() {
                this.node.parent.destroy()
            }
        }
        Laya.ClassUtils.regClass("Popup", Da);
        class Aa {
            constructor() {
                this.popupNodes = [], this.messageDialogs = [], this.uiNodes = new Map, this.uiCntMap = new Map, this.openWxFriendUI = !1, fx.EventCenter.I.on(fx.BaseEvent.E_UI_RES_LOAD_START, this, () => {
                    Laya.timer.once(100, this, this.delayShowLoading)
                }), fx.EventCenter.I.on(fx.BaseEvent.E_UI_RES_LOAD_COMPLETE, this, () => {
                    Laya.timer.clear(this, this.delayShowLoading), LoadingUtil.hide()
                }), Laya.stage.on(Laya.Event.STAGE_MOUSEDOWN, this, () => {
                    this.closeAllPopupNode()
                })
            }
            delayShowLoading() {
                LoadingUtil.show("资源加载中", 5)
            }
            showConfirmDialog(e, t) {
                e.showCancelBtn = !0, t && this.closeMessageDialog(), this.openPanel(l.MessageDialog, e, {
                    openCallback: e => {
                        e && (this.messageDialogs.includes(e) || this.messageDialogs.push(e), e.on(Laya.Event.DESTORYED, this, () => {
                            if (this.messageDialogs.includes(e)) {
                                let t = this.messageDialogs.indexOf(e);
                                this.messageDialogs.splice(t, 1)
                            }
                        }))
                    }
                })
            }
            showMessageDialog(e, t) {
                e.showCancelBtn = !1, t && this.closeMessageDialog(), this.openPanel(l.MessageDialog, e, {
                    openCallback: e => {
                        e && (this.messageDialogs.includes(e) || this.messageDialogs.push(e), e.on(Laya.Event.DESTORYED, this, () => {
                            if (this.messageDialogs.includes(e)) {
                                let t = this.messageDialogs.indexOf(e);
                                this.messageDialogs.splice(t, 1)
                            }
                        }))
                    }
                })
            }
            closeAllPopupNode() {
                for (const e of this.popupNodes) e && !e.destroyed && e.destroy();
                this.popupNodes = []
            }
            closeMessageDialog() {
                for (let e = this.messageDialogs.length - 1; e >= 0; --e) {
                    let t = this.messageDialogs[e];
                    this.close(t)
                }
                this.messageDialogs = []
            }
            changeScene(e, i, s) {
                let a = Laya.ClassUtils.getRegClass(e);
                a && XChoreUtil.isClassInherited(a, Laya.Scene) ? (this.closeAllPopupNode(), fx.SceneManager.changeScene(a, {
                    from: "",
                    userArgs: [i]
                }, new Laya.Handler(this, i => {
                    t.reporter.openUI(e), i.on(Laya.Event.DESTORYED, this, () => {
                        t.assetLoader.destroyUnusedResources()
                    }), s && s.runWith(i)
                }))) : console.warn("Can not find scene: " + e)
            }
            openView(e, i, s) {
                let a = Laya.ClassUtils.getRegClass(e);
                if (!a || !XChoreUtil.isClassInherited(a, Laya.View)) return void console.warn("Can not find view: " + e);
                let n = s ? s.openCallback : null,
                    r = s ? s.closeCallback : null;
                i || (i = {
                    from: ""
                }), fx.SceneManager.pushView(a, {
                    from: "",
                    userArgs: [i]
                }, new Laya.Handler(this, i => {
                    this.addUICnt(e), this.addNode(e, i), i.on(Laya.Event.REMOVED, this, () => {
                        this.removeUICnt(e)
                    }), i.on(Laya.Event.DESTORYED, this, () => {
                        this.removeNode(e, i), t.assetLoader.destroyUnusedResources(), r && r()
                    }), n && n(i)
                }))
            }
            openPanel(e, i, s) {
                let a = Laya.ClassUtils.getRegClass(e);
                if (!a || !XChoreUtil.isClassInherited(a, Laya.Dialog)) return void console.warn("Can not find panel: " + e);
                let n = s ? s.parentNode : null,
                    r = s ? s.openCallback : null,
                    o = s ? s.closeCallback : null,
                    l = s ? s.closeOnSide : null;
                i || (i = {
                    from: ""
                });
                let h = {
                    from: "",
                    userArgs: [i],
                    closeOther: !1,
                    addToScene: n || !0
                };
                fx.SceneManager.openPanel(a, h, new Laya.Handler(this, i => {
                    this.addUICnt(e), this.addNode(e, i), i.on(Laya.Event.REMOVED, this, () => {
                        this.removeUICnt(e)
                    }), i.on(Laya.Event.DESTORYED, this, () => {
                        this.removeNode(e, i), t.assetLoader.destroyUnusedResources(), o && o()
                    }), l && this.enableCloseOnSide(i), r && r(i)
                }))
            }
            enableCloseOnSide(e) {
                let t = new Laya.Box;
                if (e.addChildAt(t, 0), t.left = t.right = t.top = t.bottom = -200, t.on(Laya.Event.CLICK, this, () => {
                        this.close(e)
                    }), e._dialogManager && e._dialogManager.maskLayer) {
                    let t = e._dialogManager.maskLayer;
                    t.on(Laya.Event.CLICK, this, () => {
                        t.offAllCaller(this), this.close(e)
                    })
                }
            }
            openPrefabUI(e, i) {
                let s = i ? i.parentNode : null,
                    a = i ? i.openCallback : null,
                    n = i ? i.closeCallback : null,
                    r = i ? i.mask : null;
                t.assetLoader.createPrefab(e, i => {
                    if (s = s || Laya.stage, r) {
                        let e = new Laya.Box;
                        e.size(Laya.stage.width, Laya.stage.height), s.addChild(e);
                        let t = new Laya.Box;
                        t.size(Laya.stage.width, Laya.stage.height), t.bgColor = "#000000", t.alpha = .8, e.addChild(t), e.addChild(i), i.__prefabBgMask = e
                    } else s.addChild(i);
                    this.addUICnt(e), this.addNode(e, i), i.on(Laya.Event.DESTORYED, this, () => {
                        this.removeNode(e, i), t.assetLoader.destroyUnusedResources(), n && n()
                    }), a && a(i)
                })
            }
            addUICnt(e) {
                this.uiCntMap.has(e) || this.uiCntMap.set(e, 0);
                let t = this.uiCntMap.has(e) ? this.uiCntMap.get(e) + 1 : 1;
                this.uiCntMap.set(e, t)
            }
            removeUICnt(e) {
                if (!this.uiCntMap.has(e)) return;
                let t = this.uiCntMap.get(e) - 1;
                0 == t ? this.uiCntMap.delete(e) : this.uiCntMap.set(e, t)
            }
            isUIOpened(e) {
                if (!e) {
                    let e = 0;
                    return this.uiCntMap.forEach(t => {
                        e += t
                    }), e > 0
                }
                return !!this.uiCntMap.has(e) && this.uiCntMap.get(e) > 0
            }
            showPopup(e, i, s = !0, a) {
                t.assetLoader.getBySign(e, null, t => {
                    let n = new Laya.Box;
                    fx.SceneManager.getCurScene().addChild(n), n.width = Laya.stage.width, n.height = Laya.stage.height, n.mouseEnabled = !1, n.on(Laya.Event.CLICK, this, () => {
                        let e = this.popupNodes.indexOf(n);
                        this.popupNodes.splice(e, 1), n.destroy()
                    }), this.popupNodes.push(n), n.addChild(t), this.addNode(e, n), n.on(Laya.Event.REMOVED, this, () => {
                        this.removeNode(e, n)
                    }), a && a(t);
                    let r = t.getComponent(Da);
                    i instanceof Laya.Sprite ? r.setTarget(i, s) : r.setPosition(i, 0, 0)
                })
            }
            open(e, i, s) {
                if (e.includes(".json")) t.ui.openPrefabUI(e);
                else {
                    let a = Laya.ClassUtils.getRegClass(e);
                    if (!a) return void console.warn("Can not find ui: " + e);
                    a.__proto__.__proto__ == fx.BaseScene ? this.changeScene(e) : a.__proto__.__proto__ == fx.BaseView ? t.ui.openView(e, i, s) : a.__proto__.__proto__ == fx.BaseDialog && t.ui.openPanel(e, i, s)
                }
            }
            close(e, i = !0) {
                e && !e.destroyed && (e instanceof fx.BaseDialog ? fx.SceneManager.closePanel(e) : e instanceof fx.BaseView ? i ? fx.SceneManager.closeView(e) : Laya.Tween.to(e, {
                    x: Laya.stage.width
                }, 100, null, new Laya.Handler(this, () => {
                    fx.SceneManager.closeView(e)
                })) : e.__pool__ ? t.assetPool.put(e) : e.__prefabBgMask ? e.__prefabBgMask.destroy() : e.destroy())
            }
            addNode(e, i) {
                this.uiNodes.has(e) || this.uiNodes.set(e, []);
                let s = this.uiNodes.get(e);
                s.includes(i) || (s.push(i), t.reporter.openUI(e))
            }
            removeNode(e, i) {
                if (!this.uiNodes.has(e)) return;
                let s = this.uiNodes.get(e),
                    a = s.indexOf(i); - 1 != a && (s.splice(a, 1), t.reporter.closeUI(e))
            }
            closeByName(e) {
                if (!this.uiNodes.has(e)) return;
                let t = this.uiNodes.get(e).slice();
                for (const e of t) this.close(e)
            }
            showCoinNotEnough() {
                XToast.show("资金不足")
            }
            closeAll() {
                this.uiNodes.forEach((e, t) => {
                    this.closeByName(t)
                })
            }
            async openWxOpenDataContext(t, i, s) {
                if (this.openWxFriendUI) return;
                if (this.openWxFriendUI = !0, await j.I.wxAuthorize("scope.WxFriendInteraction"), !this.openWxFriendUI) return;
                let a = Laya.stage.getChildByName("wxOpenDataMask");
                if (!a) {
                    (a = new Laya.Box).name = "wxOpenDataMask", a.size(Laya.stage.width, Laya.stage.height), a.zOrder = e.ZOrder.WXOpenDataContext, Laya.stage.addChild(a);
                    let t = new Laya.WXOpenDataViewer;
                    t.width = Laya.stage.width, t.height = Laya.stage.height, a.addChild(t)
                }
                if (i && !i.destroyed) {
                    let e = a.getChildByName("box_btns");
                    e && e.removeSelf(), i.name = "box_btns", a.addChild(i)
                }
                a.visible = !0, wx.getOpenDataContext().postMessage({
                    type: "openUI",
                    ui: t,
                    param: s
                })
            }
            closeWxOpenDataContext(e) {
                if (!this.openWxFriendUI) return;
                if (this.openWxFriendUI = !1, !sdk.Sdk.isOnWeiXin()) return;
                wx.getOpenDataContext().postMessage({
                    type: "closeUI",
                    ui: e
                });
                let t = Laya.stage.getChildByName("wxOpenDataMask");
                t && (t.visible = !1)
            }
        }
        const Pa = window.moment;
        ////gameTime
        class GameTime extends Laya.EventDispatcher {
            constructor() {
                super(...arguments), this._interval = 0
            }
            async syncFromServer() {
                let e = await t.http.send("https://cdwaterbear.cn/servertime", "GET");
                if (e) {
                    let t = window.pako.inflate(e.data, {
                            to: "string"
                        }),
                        i = JSON.parse(decodeURIComponent(t));
                    return this.setTime(i.data), !0
                }
                return !1
            }
            setTime(e) {
                this._interval = (new Date).getTime() - e, console.log("time interval: " + this._interval), t.user.userInfo.useLocalTime && (this._interval = 0, console.log("use local time...")), console.log(Pa(this.now).format("YYYY-MM-DD HH:mm:ss")), this.event(_e.SyncFromServer)
            }
            get now() {
                return (new Date).getTime() - this._interval
            }
            get second() {
                return Math.floor(this.now / 1e3)
            }
            get nowDate() {
                return new Date(this.now)
            }
            get nowMoment() {
                return Pa(this.now)
            }
        }
        class NodePool {
            constructor() {
                this._pool = []
            }
            size() {
                return this._pool.length
            }
            clear() {
                for (let e = 0; e < this._pool.length; ++e) this._pool[e].destroy();
                this._pool = []
            }
            put(e) {
                e && !this._pool.includes(e) && (e.removeSelf(), this._pool.push(e))
            }
            get() {
                return this._pool.pop()
            }
        }
        class AssetPool {
            constructor() {
                this.pools = new Map, this.prefabs = new Map
            }
            createObj(e) {
                let i;
                if (e instanceof Laya.Prefab) {
                    if (i = e.create(), e.__spineUrl) {
                        let s = i.getComponent(XSpineScript);
                        s || (s = i.getComponentInChildren(XSpineScript));
                        let a = t.assetLoader.getSpineTemplet(e.__spineUrl).buildArmature();
                        t.assetLoader.addSpineSkeletonReference(a), a.name = "spine", s.node.addChild(a);
                        let n = XCoordinateUtil.getAnchorPos(s.node);
                        a.pos(n.x, n.y)
                    }
                } else e instanceof Laya.SpineTemplet_3_x && (i = e.buildArmature(), t.assetLoader.addSpineSkeletonReference(i));
                return i
            }
            addPrefab(e, t) {
                this.pools.has(t) || this.createPool(t), this.getPool(t).put(this.createObj(e)), this.prefabs.set(t, e)
            }
            getPrefab(e) {
                return this.prefabs.get(e)
            }
            removePrefab(e) {
                this.prefabs.has(e) && this.prefabs.delete(e);
                let t = this.pools.get(e);
                t && t.clear(), this.pools.has(e) && this.pools.delete(e)
            }
            clearPrefabs() {
                this.prefabs.forEach((e, t) => {
                    let i = this.pools.get(t);
                    i && i.clear(), this.pools.delete(t)
                }), this.prefabs.clear()
            }
            createPool(e) {
                let t = new NodePool;
                return this.pools.set(e, t), t
            }
            removePool(e) {
                this.pools.has(e) && this.pools.delete(e)
            }
            getPool(e) {
                let t = this.pools.get(e);
                return t || (t = this.createPool(e)), t
            }
            clearAll() {
                this.pools.forEach((e, t) => {
                    e.clear()
                })
            }
            createNodeWithPrefab(e, t) {
                let i = this.createObj(e);
                return i.__pool__ = t, i
            }
            createNode(e) {
                let t = this.get(e);
                if (t) return t;
                let i = this.getPrefab(e);
                return i ? this.createNodeWithPrefab(i, e) : (console.warn("Can't createNode prefab is null", e), null)
            }
            get(e) {
                let t = this.getPool(e),
                    i = null;
                return t.size() > 0 && ((i = t.get()).__pool__ = e), i
            }
            put(e) {
                e instanceof Laya.Script && (e = e.owner);
                let t = e.__pool__;
                t && this.getPool(t).put(e)
            }
        }
        class XCfgMgr {
            constructor() {
                this.constant = fx.CfgMgr.instance.get("constant"), 
                this.map = new fx.BaseDataModel("mapCfg", XMapCfg), 
                this.skin = new fx.BaseDataModel("skinCfg", vt), 
                this.buildCreate = new fx.BaseDataModel("buildCreateCfg", Bt), this.hunterCfg = fx.CfgMgr.instance.get("hunterCfg"), 
                this.hunterDifficultCfg = new fx.BaseDataModel("hunterDifficultCfg", Et), 
                this.hunterEquipCfg = new fx.BaseDataModel("hunterEquipCfg", Nt), 
                this.sevenGhostCfg = new fx.BaseDataModel("sevenGhostCfg", Ut), 
                this.clubReward = new fx.BaseDataModel("clubReward", Gt), 
                this.inviteCfg = new fx.BaseDataModel("inviteCfg", InviteCfg), 
                this.magicBoxCfg = new fx.BaseDataModel("magicBoxCfg", Ht), 
                this.shopCfg = new fx.BaseDataModel("shopCfg_test", Tt), 
                this.hunterSkillCfg = new fx.BaseDataModel("hunterSkillCfg_test", Pt), 
                this.buffCfg = new fx.BaseDataModel("buffCfg_test", At), 
                this.difficultCfg = new fx.BaseDataModel("newDifficultCfg", Et), 
                this.playerIdArr = [], this.playerSkinTypeArr = [], 
                this.skin.foreach(t => {
                    t.type == e.SkinType.Human && (this.playerIdArr.push(t.id), t.skinType && !this.playerSkinTypeArr.includes(t.skinType) && this.playerSkinTypeArr.push(t.skinType))
                }), this.magicBoxCfg.foreach(e => {})
            }
            static get I() {
                return this._instance || (this._instance = new XCfgMgr), this._instance
            }
            getPlayerIdArr() {
                return this.playerIdArr
            }
            getPlayerSkinTypeArr() {
                return this.playerSkinTypeArr
            }
            getSkinArrByType(e) {
                let t = [];
                return this.skin.foreach(i => {
                    i.type == e && t.push(i.id)
                }), t
            }
            getSkinArrBySkinType(e) {
                let t = [];
                return this.skin.foreach(i => {
                    i.skinType == e && t.push(i.id)
                }), t
            }
            getRandomHunter() {
                let t = [];
                return this.skin.foreach(i => {
                    i.type == e.SkinType.Hunter && t.push(i)
                }), fx.Utils.randomInArray(t)
            }
            getShopGroupArr(e) {
                let t = [];
                return this.shopCfg.foreach(i => {
                    i.group == e && t.push(i)
                }), t
            }
            getHunterEquipCfg(e, t) {
                let i;
                return this.hunterEquipCfg.foreach(s => {
                    if (s.part == e && s.level == t) return i = s
                }), i
            }
            getHunterSkillArr() {
                let t = [];
                return this.skin.foreach(i => {
                    i.type == e.SkinType.Hunter && t.push(i)
                }), t
            }
        }
        var Ha;
        e.LanguageType = void 0, (Ha = e.LanguageType || (e.LanguageType = {})).zh = "zh", Ha.en = "en";
        const LanguageTxtPath = {
                [e.LanguageType.zh]: "language", [e.LanguageType.en]: "language"
            },
            Va = "languageSprite";
        class LanguageStorage extends fx.BaseStorage {
            constructor() {
                super("LanguageStorage"), this.language = e.LanguageType.zh, fx.Utils.warpObjectGetterSetter(this, this.dirty)
            }
        }
        class LanguageMgr {
            constructor() {
                this._labelcfg = {}, this._list = [], this._storage = new LanguageStorage, this._storage.init()
            }
            static get instance() {
                return this._instance || (this._instance = new LanguageMgr), this._instance
            }
            init() {
                this.setLanguage(this._storage.language)
            }
            loadConfig() {
                let e = this._language,
                    t = LanguageTxtPath[e];
                if (t) {
                    this._labelcfg = fx.CfgMgr.instance.get(t);
                    for (const e of this._list) e.reset()
                }
            }
            setLanguage(e) {
                this._language != e && (this._language = e, this._storage.language = e, this.loadConfig())
            }
            getLanguage() {
                return this._language
            }
            add(e) {
                this._list.push(e)
            }
            remove(e) {
                let t = this._list.indexOf(e); - 1 != t && this._list.splice(t, 1)
            }
            getLabel(e, t = null) {
                if (!e) return e;
                let i = this._labelcfg[e] || e;
                if (null == t || 0 == t.length) return i;
                Array.isArray(t) || (t = [t]);
                for (let e = 0; e < t.length; e++) {
                    let s = new RegExp(`\\{${e}\\}`, "g");
                    i = i.replace(s, t[e])
                }
                return i
            }
            getSpriteUrl(t) {
                if (!t) return t;
                if (this._language == e.LanguageType.zh) return t;
                return `${Va}/${this._language}/${t}`
            }
        }
        ////controller
        class Controller {
            constructor() {
                this._isAudit = !1, this.versionData = {}, this.cfg_key = ""
            }
            get isAudit() {
                return this._isAudit
            }
            update(e) {
                e.version && fx.Utils.compareVersion(V.version, e.version) > 0 && (this._isAudit = !0), e && (this.versionData = e)
            }
            async queryVersionCfg(e) {
                let i = `${V.cfg_url}/version/${V.platform}/${V.version}.json`,
                    s = await t.http.send(i, "Get", {}, 10);
                if (s) {
                    if (this.update(s), s && s.shareCfg && s.shareCfg.length > 0)
                        if (sdk.Sdk.isOnWeiXin()) wx.showShareMenu({
                            withShareTicket: !0,
                            menus: ["shareAppMessage", "shareTimeline"]
                        }), wx.onShareAppMessage(() => {
                            let e = fx.Utils.randomInArray(this.versionData.shareCfg);
                            return {
                                title: e.title,
                                imageUrl: e.image
                            }
                        });
                        else {
                            let e = fx.Utils.randomInArray(this.versionData.shareCfg);
                            sdk.Sdk.instance.enableShare(e.title, e.image)
                        }
                    e()
                } else t.ui.showMessageDialog({
                    content: "配置文件获取失败，请重试",
                    showSureBtn: !0,
                    onSure: () => {
                        this.queryVersionCfg(e)
                    }
                })
            }
            async queryCfgs(e) {
                this.cfg_key = "";
                let i = sdk.Sdk.instance.getLaunchOptionsSync();
                if (i && i.query) {
                    let e = i.query.cfgkey;
                    e && (this.cfg_key = e)
                }
                sdk.Sdk.isOnPC() && (this.cfg_key = Laya.LocalStorage.getItem("cfg_key"));
                let s = "remoteCfg";
                this.cfg_key && (s += `_${this.cfg_key}`);
                let a = this.versionData[s];
                if (a && a.length > 0) {
                    let i = new Map,
                        s = a.length;
                    for (const n of a) {
                        let r = fx.Utils.pathInfo(n).filename;
                        this.getCfg(n, n => {
                            s--, n && i.set(r, n), 0 == s && (i.size == a.length ? (i.forEach((e, t) => {
                                fx.CfgMgr.instance.mData[t] = e
                            }), e()) : t.ui.showMessageDialog({
                                content: "游戏配置文件获取失败，请重试",
                                showSureBtn: !0,
                                onSure: () => {
                                    this.queryCfgs(e)
                                }
                            }))
                        })
                    }
                } else e()
            }
            async getCfg(e, i) {
                e = `${V.cfg_url}/resource/${e}`;
                let s = await t.http.send(e, "Get", {}, 10);
                i(s || null)
            }
            checkABTest(e, t) {
                if (fx.Utils.isOnPC()) return 1;
                let i = t[0];
                if (!e) return i;
                let s = window.wx;
                if (!s || !s.getExptInfoSync) return i;
                let a = s.getExptInfoSync([e]);
                if (void 0 === a[e]) return i;
                if ("0" == a[e]) return i;
                for (let i = 1; i < t.length; ++i) {
                    let s = `${i}`;
                    if (a[e] == s) return t[i]
                }
                return i
            }
        }
        ////rewardMgr
        class RewardMgr {
            getRewardName(e) {
                let i = "";
                switch (e.type) {
                    case "Coin":
                        i = "铜币";
                        break;
                    case "Build":
                        i = t.cfg.shopCfg.get(e.id).name;
                        break;
                    case "Skin":
                        i = t.cfg.skin.get(e.id).name
                }
                return i
            }
            getRewardIcon(e, i) {
                let s = "";
                switch (e) {
                    case "Coin":
                        s = "res/ui/common/img_coins.png";
                        break;
                    case "Build":
                        s = t.cfg.shopCfg.get(i).icon
                }
                return s
            }
            addReward(e) {
                if (!e) return;
                let i = this.getRewardName(e),
                    s = e.cnt || 1;
                switch (e.type) {
                    case "Coin":
                        t.user.gameInfo.addCoin(s), XToast.show(`获得${i} *${s}`);
                        break;
                    case "Build":
                        let a = t.cfg.shopCfg.get(e.id);
                        t.user.gameInfo.addOwnBuildData(a.buildId, s), XToast.show(`获得${i} *${s}`);
                        break;
                    case "Skin":
                        t.user.gameInfo.unlockSkin(e.id), XToast.show(`获得皮肤: ${i}`)
                }
            }
            async getWxGameGift() {
                let e = `${V.serverURL}/wxGetGift`,
                    i = {
                        gameId: V.gameID,
                        openId: t.user.userInfo.openid
                    },
                    s = await t.http.send(e, "POST", i, 10, t.user.userInfo.token);
                if (s && s.orderList && s.orderList.length) {
                    let e = new Map;
                    for (let t = 0; t < s.orderList.length; t++) {
                        let i = s.orderList[t];
                        for (const t of i.goodsList)
                            if (e.has(t.id)) {
                                let i = e.get(t.id);
                                e.set(t.id, t.num + i)
                            } else e.set(t.id, t.num)
                    }
                    let i = [];
                    e.forEach((e, t) => {
                        if ("tongbi" == t) {
                            let t = {
                                type: "Coin",
                                cnt: e
                            };
                            this.addReward(t), XAnalyticsUtil.clubGiftReward(`${t.type}_${e}`), i.unshift(t)
                        } else {
                            let s = t.split("_"),
                                a = 0;
                            if (s.length >= 2 && !isNaN(Number(s[1]))) {
                                let t = {
                                    type: "Build",
                                    cnt: e,
                                    id: a = Number(s[1])
                                };
                                XAnalyticsUtil.clubGiftReward(`${t.type}_${e}`), this.addReward(t), i.push(t)
                            }
                        }
                    }), i.length && t.ui.open(l.RewardDialog, {
                        from: "",
                        rewardArr: i
                    })
                }
            }
        }
        const Ka = {
            open_ui: "open_ui",
            close_ui: "close_ui",
            play_video_start: "play_video_start",
            play_video: "play_video",
            first_play_video: "first_play_video",
            pass_level: "pass_level",
            enter_level: "enter_level",
            use_prop: "use_prop",
            get_coin_cnt: "get_coin_cnt",
            use_coin_cnt: "use_coin_cnt",
            get_skin: "get_skin",
            lottery_cnt: "lottery_cnt",
            lot_skin_cnt: "lot_skin_cnt",
            exit_game: "exit_game",
            buy_prop: "buy_prop"
        };
        class Reporter {
            constructor() {
                this.isReportFirstVideo = !1, this.isInitGravityengine = !1, this.eventQueue = []
            }
            init() {
                this.initGravityengine()
            }
            reportToServer(e, i) {
                if (!t.serverStorage.serverUrl || !t.user) return;
                let s = t.serverStorage.serverUrl + "/customTrack",
                    a = {
                        gameID: V.gameID,
                        platform: V.platform,
                        openID: t.serverStorage.openID,
                        pid: t.user.userInfo.playerID,
                        eventId: e,
                        data: JSON.stringify(i)
                    };
                t.http.send(s, "POST", a, 5, t.serverStorage.token)
            }
            reportToUm(e, t) {
                sdk.Sdk.instance.sendEvent(e, t)
            }
            initGravityengine() {
                if (fx.Utils.isOnPC()) return;
                let e = t.user.userInfo.openid;
                const i = {
                    accessToken: "",
                    clientId: e,
                    autoTrack: {
                        appLaunch: !0,
                        appShow: !0,
                        appHide: !0,
                        pageShow: !0,
                        pageShare: !0
                    },
                    name: "ge"
                };
                this.ge = new GravityAnalyticsAPI(i), this.ge.setupAndStart(), this.ge.initialize({
                    name: e,
                    version: 1,
                    openid: e,
                    enable_sync_attribution: !1
                }).then(e => {
                    this.isInitGravityengine = !0, console.log("initialize success " + e);
                    for (const e of this.eventQueue) this.reportToGravityengine(e.event, e.param);
                    t.user.userInfo.isNewPlayer && this.ge.registerEvent()
                }).catch(e => {
                    console.log("initialize failed, error is " + e)
                })
            }
            reportToGravityengine(e, t) {
                this.isInitGravityengine ? (this.ge.track(e, t), console.log(`reportToGravityengine, event:${e}, param:`, t)) : this.eventQueue.push({
                    event: e,
                    param: t
                })
            }
            reportToWe(e, t) {
                if (!sdk.Sdk.isOnWeiXin()) return;
                let i = sdk.Sdk.instance.getSystemInfo().SDKVersion;
                if (!fx.Utils.compatibleVersion(i, "2.14.4")) return;
                let s = wx;
                s.reportEvent && (s.reportEvent(e, t), console.log(`reportToWe, event:${e}, param:`, t))
            }
            canReport() {
                return !Laya.isWXPlayable && !fx.Utils.isOnPC()
            }
            report(e, i) {
                this.canReport() && ((i = i || {}).platform = V.platform, i.version = V.version, t.user && (i.day = t.user.userInfo.day), this.reportToWe(e, i), this.reportToGravityengine(e, i))
            }
            setUserLevel(e) {
                this.isInitGravityengine && this.ge.userSet({
                    cur_level: e
                })
            }
            setUserMaxLevel(e) {
                this.isInitGravityengine && this.ge.userSet({
                    cur_level_high: e
                })
            }
            openUI(e) {
                this.report(Ka.open_ui, {
                    ui: e
                })
            }
            closeUI(e) {
                this.report(Ka.close_ui, {
                    ui: e
                })
            }
            startPlayVideo(e = "unknown") {
                let i = t.user.gameInfo.curLv;
                this.report(Ka.play_video_start, {
                    source: e,
                    cur_level: i
                })
            }
            onVideoShow(e = "unknown") {
                this.report("play_video_show", {
                    source: e
                })
            }
            playVideo(e = "unknown") {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel,
                    n = i.failCnt + i.winCnt;
                if (this.report(Ka.play_video, {
                        source: e,
                        cur_level: s,
                        cur_level_high: a,
                        fin_level_cnt: n
                    }), !this.isReportFirstVideo) {
                    this.isReportFirstVideo = !0;
                    let i = t.user.userInfo.isNewPlayer ? 1 : 0,
                        r = (t.gameTime.now - t.user.userInfo.loginTime) / 1e3;
                    r = Math.floor(r), this.report(Ka.first_play_video, {
                        source: e,
                        game_time: r,
                        newplayer: i,
                        cur_level: s,
                        cur_level_high: a,
                        fin_level_cnt: n
                    })
                }
            }
            finishGame(i, s = 1) {
                let a = t.user.gameInfo,
                    n = a.curLv,
                    r = a.maxLevel,
                    o = a.failCnt + a.winCnt,
                    l = t.gameMgr.playTime,
                    h = t.gameMgr.buildCnt,
                    d = t.gameMgr.adCnt,
                    u = "普通模式",
                    g = "";
                t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? (u = "木头人模式", g = t.playerMgr.player.isAngel ? "救援者" : t.playerMgr.player.isGhost ? "执行人" : "幸存者") : t.gameMgr.gameMode == e.GameMode.E_Hunt ? u = "噬魂者模式" : t.gameMgr.gameMode == e.GameMode.E_SevenGhost && (u = "挑战模式"), this.report(Ka.pass_level, {
                    cur_level: n,
                    cur_level_high: r,
                    fin_level_cnt: o,
                    game_time: l,
                    ad_cnt: d,
                    out_come: i,
                    win_method: s,
                    use_prop_cnt: h,
                    mode: u,
                    role: g
                })
            }
            enterGame() {
                let e = t.user.gameInfo.curLv;
                this.report(Ka.enter_level, {
                    cur_level: e
                })
            }
            useProp(e) {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel;
                this.report(Ka.use_prop, {
                    cur_level: s,
                    cur_level_high: a,
                    prop_name: e
                })
            }
            getCoinCnt(e) {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel,
                    n = i.failCnt + i.winCnt;
                this.report(Ka.get_coin_cnt, {
                    cur_level: s,
                    cur_level_high: a,
                    fin_level_cnt: n,
                    place: e
                })
            }
            useCoinCnt(e) {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel,
                    n = i.failCnt + i.winCnt;
                this.report(Ka.use_coin_cnt, {
                    cur_level: s,
                    cur_level_high: a,
                    fin_level_cnt: n,
                    place: e
                })
            }
            getSkin(e) {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel,
                    n = i.failCnt + i.winCnt,
                    r = i.getSkinCnt();
                this.report(Ka.get_skin, {
                    cur_level: s,
                    cur_level_high: a,
                    fin_level_cnt: n,
                    skin_cnt: r,
                    skin_id: e
                })
            }
            lotteryCnt(e) {
                let i = t.user.gameInfo,
                    s = i.curLv,
                    a = i.maxLevel,
                    n = i.failCnt + i.winCnt;
                this.report(Ka.lottery_cnt, {
                    cur_level: s,
                    cur_level_high: a,
                    fin_level_cnt: n,
                    player_lot_med: e
                })
            }
            lotSkinCnt() {
                let e = t.user.gameInfo,
                    i = e.curLv,
                    s = e.maxLevel,
                    a = e.failCnt + e.winCnt,
                    n = e.getFragmentCnt;
                this.report(Ka.lot_skin_cnt, {
                    cur_level: i,
                    cur_level_high: s,
                    fin_level_cnt: a,
                    lot_skin_cnt: n
                })
            }
            exitGame() {
                let e = t.user.gameInfo,
                    i = e.curLv,
                    s = e.maxLevel,
                    a = e.failCnt + e.winCnt,
                    n = t.gameMgr.playTime,
                    r = t.gameMgr.buildCnt,
                    o = t.gameMgr.adCnt;
                this.report(Ka.exit_game, {
                    cur_level: i,
                    cur_level_high: s,
                    fin_level_cnt: a,
                    game_time: n,
                    ad_cnt: o,
                    use_prop_cnt: r
                })
            }
            shopBuyProp(e, i) {
                let s = t.user.gameInfo,
                    a = s.curLv,
                    n = s.maxLevel,
                    r = s.failCnt + s.winCnt;
                this.report(Ka.buy_prop, {
                    cur_level: a,
                    cur_level_high: n,
                    fin_level_cnt: r,
                    buy_prop_med: i,
                    prop_name: e
                })
            }
        }
        class RankMgr {
            async addCityRankValue(e, i = 1) {
                if (t.user.userInfo.cityId) {
                    let s = XEventDispatcher.I.serverUrl + "/addCityRankValue",
                        a = {
                            gameID: V.gameID,
                            platform: V.platform,
                            rankType: e,
                            cityId: t.user.userInfo.cityId,
                            value: i
                        };
                    return await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token)
                }
            }
            async getCityRankList(e) {
                let i = XEventDispatcher.I.serverUrl + "/getCityRankList",
                    s = {
                        gameID: V.gameID,
                        platform: V.platform,
                        rankType: e
                    },
                    a = await XEventDispatcher.I.send(i, "POST", s, 10, t.user.userInfo.token);
                if (a && a.list) {
                    a.list.sort((e, t) => e.value == t.value ? e.cityId - t.cityId : t.value - e.value);
                    for (let e = 0; e < a.list.length; ++e) a.list[e].rank = e + 1;
                    return a.list
                }
                return []
            }
            async setCustomRankValue(e, i, s) {
                if (i > 0) {
                    let a = XEventDispatcher.I.serverUrl + "/setCustomRankValue",
                        n = {
                            gameID: V.gameID,
                            platform: V.platform,
                            rankType: e,
                            value: i,
                            pid: t.user.userInfo.playerID,
                            playerName: t.user.userInfo.name,
                            playerAvatar: t.user.userInfo.avatarUrl,
                            extraData: JSON.stringify({
                                skinId: s
                            })
                        };
                    await XEventDispatcher.I.send(a, "POST", n, 10, t.user.userInfo.token)
                } else {
                    let i = XEventDispatcher.I.serverUrl + "/delCustomRank",
                        s = {
                            gameID: V.gameID,
                            platform: V.platform,
                            rankType: e,
                            pid: t.user.userInfo.playerID
                        };
                    await XEventDispatcher.I.send(i, "POST", s, 10, t.user.userInfo.token)
                }
            }
            async addCustomRankValue(e, i) {
                if (i > 0) {
                    let s = XEventDispatcher.I.serverUrl + "/addCustomRankValue",
                        a = {
                            gameID: V.gameID,
                            platform: V.platform,
                            rankType: e,
                            value: i,
                            pid: t.user.userInfo.playerID,
                            playerName: t.user.userInfo.name,
                            playerAvatar: t.user.userInfo.avatarUrl
                        };
                    await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token)
                }
            }
            async getCustomRankList(e) {
                let i = t.user.userInfo.playerID,
                    s = XEventDispatcher.I.serverUrl + "/getCustomRankList",
                    a = {
                        gameID: V.gameID,
                        platform: V.platform,
                        rankType: e,
                        pid: i
                    },
                    n = await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token);
                if (n) {
                    n.list = n.list || [];
                    for (let e = 0; e < n.list.length; ++e) n.list[e].rank = e + 1, n.list[e].extraData && (n.list[e].extraData = JSON.parse(n.list[e].extraData)), n.list[e].pid == i && (n.rank = e + 1)
                }
                return n
            }
            async getWeekRankRecord(e) {
                let i = XEventDispatcher.I.serverUrl + "/getWeekRankRecord",
                    s = {
                        gameID: V.gameID,
                        platform: V.platform,
                        rankType: e
                    },
                    a = await XEventDispatcher.I.send(i, "POST", s, 10, t.user.userInfo.token);
                if (a) {
                    a.list = a.list || [];
                    for (const e of a.list) e.list = e.list || [];
                    return a.list
                }
                return []
            }
            async addPlayerRankValue(e, i) {
                let s = XEventDispatcher.I.serverUrl + "/addPlayerRankValue",
                    a = {
                        gameID: V.gameID,
                        platform: V.platform,
                        rankType: e,
                        pid: t.user.userInfo.playerID,
                        value: i,
                        playerName: t.user.userInfo.name,
                        playerAvatar: t.user.userInfo.avatarUrl
                    };
                return await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token)
            }
            async getPlayerRankList(e, i) {
                let s = t.user.userInfo.playerID,
                    a = XEventDispatcher.I.serverUrl + "/getPlayerRankList",
                    n = {
                        gameID: V.gameID,
                        platform: V.platform,
                        rankType: e,
                        pid: s
                    },
                    r = await XEventDispatcher.I.send(a, "POST", n, 10, t.user.userInfo.token);
                if (r && r.list)
                    for (let e = 0; e < r.list.length; ++e) r.list[e].value = r.list[e].value || 0, r.list[e].rank = e + 1, r.list[e].pid == s && (r.value = r.list[e].value, r.rank = e + 1);
                return i && i(r), r
            }
            setFriendRank(e, t) {
                if (!wx || !wx.setUserCloudStorage) return;
                let i = {
                        wxgame: {
                            score: t,
                            update_time: Date.now()
                        }
                    },
                    s = [];
                s.push({
                    key: e,
                    value: JSON.stringify(i)
                }), wx.setUserCloudStorage({
                    KVDataList: s,
                    success: e => {
                        console.log("-----setWxUserCloudStorage success:" + JSON.stringify(e))
                    },
                    fail: e => {
                        console.log("-----setWxUserCloudStorage fail:" + JSON.stringify(e))
                    },
                    complete: e => {
                        console.log("-----setWxUserCloudStorage complete:" + JSON.stringify(e))
                    }
                })
            }
            async addGroupRankValue(e, i) {
                let s = XEventDispatcher.I.serverUrl + "/addGroupRankValue",
                    a = {
                        gameID: V.gameID,
                        rankType: e,
                        value: i,
                        pid: t.user.userInfo.playerID,
                        name: t.user.userInfo.name,
                        avatar: t.user.userInfo.avatarUrl
                    };
                return await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token)
            }
            async getGroupRankInfo(e, i) {
                let s = XEventDispatcher.I.serverUrl + "/getGroupRankInfo",
                    a = {
                        gameID: V.gameID,
                        rankType: e,
                        pid: t.user.userInfo.playerID,
                        name: t.user.userInfo.name,
                        avatar: t.user.userInfo.avatarUrl,
                        forceEnter: i
                    },
                    n = await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token);
                if (n && n.list) {
                    for (let e = 0; e < n.list.length; ++e) n.list[e].value = n.list[e].value || 0;
                    n.list.sort((e, t) => e.value != t.value ? t.value - e.value : e.time - t.time);
                    for (let e = 0; e < n.list.length; ++e) n.list[e].rank = e + 1, n.list[e].pid == t.user.userInfo.playerID && (n.myRank = e + 1)
                }
                return n
            }
            async getGroupRankRecord(e) {
                let i = XEventDispatcher.I.serverUrl + "/getGroupRankRecord",
                    s = {
                        gameID: V.gameID,
                        rankType: e,
                        pid: t.user.userInfo.playerID
                    },
                    a = await XEventDispatcher.I.send(i, "POST", s, 10, t.user.userInfo.token);
                if (a && a.list)
                    for (let e = 0; e < a.list.length; ++e) a.list[e].value = a.list[e].value || 0;
                return a
            }
            async getGroupRankReward(e) {
                let i = XEventDispatcher.I.serverUrl + "/getGroupRankReward",
                    s = {
                        gameID: V.gameID,
                        rankType: e,
                        pid: t.user.userInfo.playerID
                    },
                    a = await XEventDispatcher.I.send(i, "POST", s, 10, t.user.userInfo.token);
                return a && a.rewardRank, a
            }
            calcGroupRankEndTime(e) {
                let i = t.gameTime.now,
                    s = new Date(i);
                s.setHours(0, 0, 0);
                let a = s.getTime() + 1e3 * (e.DailyResetTime || 0);
                return i >= a && (a += 864e5), a
            }
            async getChallengeInfo() {
                let e = XEventDispatcher.I.serverUrl + "/getChallengeInfo",
                    i = {
                        gameID: V.gameID
                    },
                    s = await XEventDispatcher.I.send(e, "POST", i, 10, t.user.userInfo.token);
                if (s && s.challengeInfo) return s.challengeInfo
            }
            async addChallengeValue(e) {
                if (e < 0) return;
                e = Math.floor(e);
                let i = XEventDispatcher.I.serverUrl + "/addChallengeValue",
                    s = {
                        gameID: V.gameID,
                        pid: t.user.userInfo.playerID,
                        value: e,
                        name: t.user.userInfo.name,
                        avatar: t.user.userInfo.avatarUrl
                    },
                    a = await XEventDispatcher.I.send(i, "POST", s, 5, t.user.userInfo.token);
                return a && a.info ? a.info : void 0
            }
            async getChallengeGroup() {
                let e = XEventDispatcher.I.serverUrl + "/getChallengeGroup",
                    i = {
                        gameID: V.gameID,
                        pid: t.user.userInfo.playerID
                    },
                    s = await XEventDispatcher.I.send(e, "POST", i, 5, t.user.userInfo.token);
                return s.code || (s.code = 0), s
            }
            async getChallengePlayerInfo() {
                let e = XEventDispatcher.I.serverUrl + "/getChallengePlayerInfo",
                    i = {
                        gameID: V.gameID,
                        pid: t.user.userInfo.playerID
                    },
                    s = await XEventDispatcher.I.send(e, "POST", i, 5, t.user.userInfo.token);
                if (s && s.info) return s.info
            }
            async getChallengeReward() {
                let e = XEventDispatcher.I.serverUrl + "/getChallengeReward",
                    i = {
                        gameID: V.gameID,
                        pid: t.user.userInfo.playerID
                    },
                    s = await XEventDispatcher.I.send(e, "POST", i, 5, t.user.userInfo.token);
                return s.code || (s.code = 0), s
            }
            async setLevelRankValue(e, i, s) {
                let a = XEventDispatcher.I.serverUrl + "/setLevelRankValue",
                    n = {
                        gameID: V.gameID,
                        rankType: e,
                        levelId: i,
                        value: s,
                        pid: t.user.userInfo.playerID,
                        name: t.user.userInfo.name,
                        avatar: t.user.userInfo.avatarUrl
                    };
                return await XEventDispatcher.I.send(a, "POST", n, 10, t.user.userInfo.token)
            }
            async getLevelRankInfo(e, i) {
                let s = XEventDispatcher.I.serverUrl + "/getLevelRankInfo",
                    a = {
                        gameID: V.gameID,
                        rankType: e,
                        levelId: i
                    },
                    n = await XEventDispatcher.I.send(s, "POST", a, 10, t.user.userInfo.token);
                if (n && n.info) return n.info
            }
        }
        class XMatchData {
            constructor() {
                this.players = [], this.defenders = [], this.hunters = [], this.difficulty = 0, this.hideRoomIndex = 0
            }
        }
        class GameMgr {
            constructor() {
                this._isPause = !1, this.diff = 0, this.isShowTurntable = !1, this.skillABTest = -1, this.difficultABTest = 1, this.speedRatio = 1, this.hunterSpeedRatio = 1
            }
            isDefender() {
                return t.playerMgr.player.type == e.PlayerType.E_Defender
            }
            isHunter() {
                return t.playerMgr.player.type == e.PlayerType.E_Hunter
            }
            randomDiff(e) {
                let i = [
                        [0, 1],
                        [0, 1, 2],
                        [1, 2]
                    ],
                    s = t.user.gameInfo.winCnt + t.user.gameInfo.failCnt,
                    a = 0;
                if (1 == e)
                    for (let e = 0; e < 1; e++) a = s < 5 ? e : 1;
                else a = s < 5 ? 0 : 1;
                let n = Math.floor(XRandomUtil.random() * i[a].length);
                this.diff = i[a][n], this.diff > 3 && (this.diff = 0)
            }
            match(i, s, a, n, r, o) {
                let l, h = new XMatchData;
                h.gameMode = i, this.randomDiff(n.id), h.mapCfg = n, this.mapId = n.id, h.mapData = r, i == e.GameMode.E_Defense ? l = 0 : i == e.GameMode.E_Hunt ? l = 0 : i == e.GameMode.E_AngelOrGhost ? l = 0 : i == e.GameMode.E_SevenGhost && (l = 0);
                let d = [];
                for (let e = 0; e < n.defenderPointNum; ++e) d.push(e);
                t.user.gameInfo.winCnt + t.user.gameInfo.failCnt != 0 && fx.Utils.randomArray(d);
                for (let t = 0; t < s.length; ++t) {
                    let a = s[t];
                    a.spwanPoint = d[t], i != e.GameMode.E_Hunt && t == l && (h.mineUuid = a.uuid), h.defenders.push(a)
                }
                d = [];
                for (let e = 0; e < n.hunterPointNum; ++e) d.push(e);
                fx.Utils.randomArray(d);
                for (let t = 0; t < a.length; ++t) {
                    let s = a[t];
                    s.spwanPoint = d[t], i == e.GameMode.E_Hunt && t == l && (h.mineUuid = s.uuid), h.hunters.push(s)
                }
                return h.players = [], h.players = h.hunters.concat(h.defenders), h
            }
            start(i) {
                this._arrDatas = [], this.gameStatus = e.GameStatus.E_GAME_READY, 
                this.matchData = i, this.gameMode = i.gameMode, this.mapCfg = i.mapCfg, t.playerMgr.init(i), t.mapMgr.init(i.mapData, 0), t.buildingMgr.init(), t.taskMgr.init(), this.startTime = t.gameTime.now, this.killCnt = 0, this.randomCnt = 0, this.isfreeUpDoor = !1, this.curHunterAtkTarget = null, this.playTime = 0, this.buildCnt = 0, this.adCnt = 0, this.playerDeadCnt = 0, this.isUsedSuper = !1, this.defenseDeadCnt = 0, this.defenseFindRoomId = [], this.isAdMagicBox = !1, Laya.timer.clear(this, this.loopTime), Laya.timer.loop(1e3, this, this.loopTime);
                let s = t.user.gameInfo;
                if (1 == this.difficultABTest ? (this.aiRatios = [.7, .75, .65, .4, .7, .85, .5], this.speedRatio = .75, this.hunterSpeedRatio = .75 / t.gameMgr.dCfg.moveSpeed || 1, console.log(1 / this.hunterSpeedRatio, t.gameMgr.dCfg.moveSpeed, "real Speed")) : (this.aiRatios = [.7, .75, .65, .4, .7, .85, .5], this.speedRatio = this.hunterSpeedRatio = 1), t.gameMgr.gameMode == e.GameMode.E_Defense && (s.isStartLv || s.curLv > 1)) {
                    let e = this.dCfg;
                    s.curLv != s.lastLv ? s.isLastWin ? XToast.show(`难度上升：${e.name}`) : XToast.show(`难度降低：${e.name}`) : XToast.show(`难度：${e.name}`)
                } else if (t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost) XToast.show("大战木头人即将开始");
                else if (t.gameMgr.gameMode == e.GameMode.E_Hunt) {
                    let e = this.dCfg;
                    s.curHunterLv != s.lastHunterLv ? s.isLastHunterWin ? XToast.show(`难度上升：${e.name}`) : XToast.show(`难度降低：${e.name}`) : XToast.show(`难度：${e.name}`)
                } else t.gameMgr.gameMode == e.GameMode.E_SevenGhost && XToast.show("挑战模式开始");
                this.aiMultArr = fx.Utils.randomInArray([
                    [1.6, 1.7, 1.8, 1.9, 2],
                    [1.3, 1.4, 1.5, 1.6, 1.7],
                    [1.2, 1.3, 1.4, 1.5, 1.6],
                    [1.1, 1.2, 1.3, 1.4, 1.5],
                    [1, 1.05, 1.1, 1.15, 1.2]
                ])
            }
            loopTime() {
                this.playTime++
            }
            setGameStatus(t) {
                this.gameStatus = t, t == e.GameStatus.E_GAME_START && fx.EventCenter.I.event(XEventNames.E_Game_Start)
            }
            get isPause() {
                return this._isPause
            }
            set isPause(e) {
                this._isPause = e
            }
            pauseGame() {
                Laya.timer.scale = 0, Laya.updateTimer.scale = 0, this.gameStatus != e.GameStatus.E_GAME_READY && this.setGameStatus(e.GameStatus.E_GAME_PAUSE)
            }
            resumeGame() {
                Laya.timer.scale = 1, Laya.updateTimer.scale = 1, this.gameStatus != e.GameStatus.E_GAME_READY && this.setGameStatus(e.GameStatus.E_GAME_START)
            }
            changeMaxHp(e, t, i) {
                t < e.maxHp && (e.curHp = Math.clamp(e.curHp, 0, t)), e.maxHp = t, e.doorkeeper && (e.doorkeeper.maxHp = t, e.doorkeeper.curHp = i, e.doorkeeper.owner && e.doorkeeper.owner.event(be.Hp_Changed)), null != i && (e.curHp = i, e.curHp = Math.clamp(e.curHp, 0, e.maxHp), e.isDie = 0 == e.curHp), e.owner && e.owner.event(be.Hp_Changed)
            }
            takeDamage(i, s, a) {
                if (!s.isDie && !(s.invincible || s.invincible_skill || a <= 0)) {
                    if (s.reduceRate && (a *= 1 - s.reduceRate), s.type == e.BuildType.bed && s.playerUuid) {
                        let e = t.playerMgr.getPlayer(s.playerUuid);
                        if (e.invincibleCnt) return void(e.invincibleCnt -= 1)
                    }
                    if (s.skillEquipHp ? (s.skillEquipHp -= a, s.skillEquipHp <= 0 && (s.skillEquipHp = 0, s.ownerScript.changeSkin(!1))) : (s.curHp -= a, s.curHp = Math.max(s.curHp, 0), this.gameMode == e.GameMode.E_Hunt && s.curHp > 0 && s.curHp / s.maxHp < .1 && (s != t.playerMgr.player || s.isShowYanluo || (s.isShowYanluo = !0, fx.EventCenter.I.event(XEventNames.E_Yanluo_Show)))), s.isDie = 0 == s.curHp, s.owner && (s.owner.event(be.Hp_Changed, [i]), s.owner.event(be.Battle_Be_Hit, [i, a])), s.isDie) {
                        let n = s;
                        if (n.type == e.BuildType.bed && n.playerUuid) {
                            let e = t.playerMgr.getPlayer(n.playerUuid);
                            this.takeDamage(i, e, a)
                        }
                        if (n.type == e.BuildType.door) {
                            XChoreUtil.playSound(121);
                            let e = t.playerMgr.getPlayer(n.playerUuid);
                            this.heartSound(e)
                        }
                    }
                    if (s.type == e.BuildType.door && this.curHunterAtkTarget != s && !i.isGhost) {
                        this.curHunterAtkTarget = s;
                        let e = t.mapMgr.getRoomById(s.roomId);
                        fx.EventCenter.I.event(XEventNames.E_Player_Hurt, e.bedModelList[0].playerUuid)
                    }
                }
            }
            heartSound(e) {
                t.gameMgr.playSound(e, 128)
            }
            AddHp(e, t) {
                if (e.isDie) return;
                if (t <= 0) return;
                let i = t * e.maxHp;
                e.curHp += t * e.maxHp, e.curHp = Math.min(e.curHp, e.maxHp), e.isDie = 0 == e.curHp, e.owner && e.owner.event(be.Hp_Changed, [-i])
            }
            get arrDatas() {
                return this._arrDatas
            }
            set arrDatas(e) {
                this._arrDatas = e
            }
            addDataInArr(e) {
                for (let t = 0; t < this.arrDatas.length; t++) {
                    let i = this.arrDatas[t];
                    if (i.x == e.x && i.y == e.y) return void(this.arrDatas[t] = e)
                }
                this.arrDatas.push(e)
            }
            revive() {}
            get mineRoom() {
                let e = t.playerMgr.player.roomId;
                return t.buildingMgr.getRoom(e)
            }
            isRoomBedUsed(e) {
                let i = t.buildingMgr.getRoom(e);
                if (i) {
                    for (const e of i.bedModelList)
                        if (e.isUsed && !e.isDie) return !0;
                    return !1
                }
            }
            upBed(i, s, a) {
                let n = t.playerMgr.getPlayer(a),
                    r = t.buildingMgr.getBuilding(i, s);
                return r && r.type == e.BuildType.bed && t.buildingMgr.getRoom(r.roomId) ? r.isUsed ? e.BuildResult.E_BED_IS_USED : t.buildingMgr.upBed(i, s, n) : e.BuildResult.E_FAILD
            }
            canHandleGrid(i, s, a) {
                let n = t.playerMgr.mineUuid;
                a = a || n;
                let r = t.mapMgr.getRoomIdByGridPos(i, s),
                    o = t.playerMgr.getPlayer(a),
                    l = t.buildingMgr.getBuilding(i, s);
                if (!l && r == o.roomId) return !0;
                if (-1 != r && l)
                    if (l.type == e.BuildType.door) {
                        if (l.roomId == o.roomId) return !0
                    } else if (l.playerUuid == a) return !0;
                return !1
            }
            canLocatePlayer() {
                return this.isHunter() ? this.gameStatus == e.GameStatus.E_GAME_READY : this.isDefender() ? t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) : void 0
            }
            DizzyTarget(e, t, i = !0) {
                e.dizzyStartTime = Laya.timer.currTimer, e.dizzyDurSec = t, i && EffectUtil.I.playDizzyEffect(e.owner.x, e.owner.y - 100, t)
            }
            gameover(i, s = 1) {
                let a = t.user.gameInfo,
                    n = t.cfg.skin.get(a.curSkinId);
                if (this.gameMode == e.GameMode.E_Defense) {
                    if (a.isLastWin = i, a.lastLv = a.curLv, a.isStartLv && this.gameMode == e.GameMode.E_Defense && (a.isMapByWeek = !0), i) {
                        XAnalyticsUtil.passLevel(s, "普通模式", n.name);
                        let e = t.cfg.difficultCfg.length;
                        if (a.curLv > a.maxLevel) {
                            a.maxLevel = a.curLv, t.reporter.setUserMaxLevel(a.maxLevel);
                            let e = t.cfg.difficultCfg.get(a.maxLevel);
                            XToast.show(`称号上升：${e.title}`)
                        }
                        if (a.curLv == e && (a.maxWinCnt += 1), a.weekMaxLv < a.curLv && (a.weekMaxLv = a.curLv), a.todayMaxLv < a.curLv) {
                            if (a.hunterUnlockLvl += 1, a.hunterUnlockLvl && a.hunterUnlockLvl % 2 == 0) {
                                let e = t.cfg.getHunterSkillArr();
                                for (let t = 0; t < e.length; t++) {
                                    let i = e[t].id;
                                    if (!a.isUnlockHunterSkin(i)) {
                                        a.unlockHunterSkin(i);
                                        break
                                    }
                                }
                            }
                            a.todayMaxLv = a.curLv;
                            let e = t.user.gameInfo.todayMaxLv;
                            t.rankMgr.setCustomRankValue("score_day", e, t.user.gameInfo.curSkinId)
                        } else a.curLv >= t.cfg.difficultCfg.length && (a.todayExtraScore += 1, a.todayMaxLv < a.curLv + a.todayExtraScore && (a.todayMaxLv += 1, t.rankMgr.setCustomRankValue("score_day", a.todayMaxLv, t.user.gameInfo.curSkinId)));
                        a.buffLvArr.includes(a.curLv) || (this.canChooseBuff = !0, this.chooseBuffLv = a.curLv)
                    } else XAnalyticsUtil.loseLevel("普通模式", n.name), a.todayExtraScore ? a.todayExtraScore -= 1 : a.curLv > a.lowestLv && a.setCurLv(a.lowestLv);
                    t.user.saveToServer()
                } else if (this.gameMode == e.GameMode.E_AngelOrGhost) {
                    let e = n.name;
                    t.playerMgr.player.isAngel ? e = "救援者" : t.playerMgr.player.isGhost && (e = "执行人"), i ? XAnalyticsUtil.passLevel(s, "木头人模式", e) : XAnalyticsUtil.loseLevel("木头人模式", e)
                } else if (this.gameMode == e.GameMode.E_Hunt) {
                    a.isLastHunterWin = i, a.lastHunterLv = a.curHunterLv;
                    let e = t.cfg.skin.get(a.curHunterSkinId);
                    if (i) {
                        if (XAnalyticsUtil.passLevel(s, "噬魂者模式", e.name), a.curHunterLv > a.maxHunterLevel) {
                            a.maxHunterLevel = a.curHunterLv;
                            let e = t.cfg.hunterDifficultCfg.get(a.maxHunterLevel);
                            XToast.show(`称号上升：${e.title}`)
                        }
                        if (a.todayHunterMaxLv < a.curHunterLv) {
                            a.todayHunterMaxLv = a.curHunterLv;
                            let e = t.user.gameInfo.todayHunterMaxLv;
                            t.rankMgr.setCustomRankValue("score_hunter_day", e, t.user.gameInfo.curHunterSkinId)
                        } else a.curHunterLv >= t.cfg.hunterDifficultCfg.length && (a.todayHunterExtraScore += 1, a.todayHunterMaxLv < a.curHunterLv + a.todayHunterExtraScore && (a.todayHunterMaxLv += 1, t.rankMgr.setCustomRankValue("score_hunter_day", a.todayHunterMaxLv, t.user.gameInfo.curHunterSkinId)))
                    } else XAnalyticsUtil.loseLevel("噬魂者模式", e.name), a.todayHunterExtraScore ? a.todayHunterExtraScore -= 1 : a.curHunterLv > a.lowestHunterLv && a.setCurHunterLv(a.lowestHunterLv);
                    t.user.saveToServer()
                } else this.gameMode == e.GameMode.E_SevenGhost && (i ? (a.curSevenGhostLv == t.cfg.sevenGhostCfg.length ? (a.curSevenGhostLv = 1, a.isUnlockSkin(1003) || (a.unlockSkin(1003), this.isOpenSevenGhost = !0)) : a.curSevenGhostLv += 1, XAnalyticsUtil.passLevel(s, "挑战模式", n.name)) : (a.curSevenGhostLv = 1, XAnalyticsUtil.loseLevel("挑战模式", n.name)), t.user.saveToServer())
            }
            takeMapBuild(x_, y_, data_) {
                let player_ = t.playerMgr.getPlayer(data_),
                    n = t.buildingMgr.getMapBuild(x_, y_);
                return (!n || !n.isUsed) && t.buildingMgr.takeMapBuild(x_, y_, player_)
            }
            playSoundByNode(t, i, s) {
                this.gameStatus == e.GameStatus.E_GAME_START && this.nodeIsInPlayerView(t) && XChoreUtil.playSound(i, s)
            }
            nodeIsInPlayerView(e) {
                let i = t.mapMgr.mapPosToStagePos(e.x, e.y);
                return !(i.x < 0 || i.x > Laya.stage.width) && !(i.y < 0 || i.y > Laya.stage.height)
            }
            playSound(t, i, s) {
                t && this.gameStatus == e.GameStatus.E_GAME_START && this.isInPlayerView(t) && XChoreUtil.playSound(i, s)
            }
            isInPlayerView(e) {
                return this.nodeIsInPlayerView(e.owner)
            }
            showSpecialTip(e) {
                Laya.timer.once(2e3, this, () => {
                    XToast.show(`${e}个炮台更换了底座`)
                })
            }
            isChooseBuff() {
                let e = !1;
                return t.cfg.buffCfg.foreach(i => {
                    if (i.isOpen) {
                        let s = t.user.gameInfo.getBuffData(i.id);
                        if (i.isRepeat) {
                            if (!s || s.lv < i.values.length - 1) return e = !0, !1
                        } else if (!s) return e = !0, !1
                    }
                }), e
            }
            getPlayer() {
                let i = [0, 1, 2, 3, 4, 5],
                    s = new XPlayerModel;
                s.type = e.PlayerType.E_Defender, s.uuid = fx.Utils.createUUID(), s.name = this.randomName(), s.skinId = t.user.gameInfo.curSkinId;
                let a = [s, null, null, null, null, null],
                    n = [];
                for (let s = 0; s < 6; s++) {
                    let s = XRandomUtil.getIntRandom(0, i.length - 1);
                    if (0 == (s = i.splice(s, 1)[0])) {
                        let i = t.user.gameInfo,
                            s = t.cfg.difficultCfg.get(i.curLv);
                        t.gameMgr.dCfg = s;
                        let a = s.addMaxHp + 1;
                        i.curLv == t.cfg.difficultCfg.length && (s = t.cfg.difficultCfg.get(i.maxWinCnt % i.curLv + 1));
                        let r = new XPlayerModel;
                        r.type = e.PlayerType.E_Hunter, r.uuid = fx.Utils.createUUID(), r.name = this.randomName(), r.skinId = s.bossId, r.attackPower = t.cfg.hunterCfg.attackList[0], r.curHp = t.cfg.hunterCfg.hpList[0] * a, r.maxHp = t.cfg.hunterCfg.hpList[0] * a, n.push(r)
                    } else {
                        let i = new XPlayerModel;
                        i.type = e.PlayerType.E_Defender, i.uuid = fx.Utils.createUUID(), i.name = this.randomName(), i.skinId = fx.Utils.randomInArray(t.cfg.getPlayerIdArr()), a[s] = i
                    }
                }
                return [a, n]
            }
            randomName(e = 0) {
                if (!this.playerNames) {
                    this.playerNames = [], this.includeName = [];
                    let e = fx.CfgMgr.instance.get("namesCfg");
                    for (const t in e) this.playerNames.push(e[t].name)
                }
                e++;
                let t = fx.Utils.randomInArray(this.playerNames);
                return e > 10 ? t : this.includeName.includes(t) ? this.randomName(e) : t
            }
            clearRandomName() {
                this.playerNames = null
            }
        }
        class XTiledInfo {
            constructor(e, t) {
                this.x = e, this.y = t
            }
        }
        class XRoomModel {
            constructor() {
                this.hideDoorHp = 3, this.aiMult = 1, this.coin = 0, this.energy = 0, this.grids = [], this.walls = [], this.buildings = [], this.preBuildings = [], this.bedModelList = [], this.active = !0, this.towers = []
            }
        }
        class XAStar {
            constructor() {
                this._straightCost = 1, this._diagCost = Math.SQRT2, this._slant = !1, this._heuristic = this.euclidian
            }
            findPath(e, t) {
                return this._grid = e, this._open = [], this._closed = [], this._startNode = this._grid.startNode, this._endNode = this._grid.endNode, this._startNode.g = 0, this._startNode.h = this._heuristic(this._startNode), this._startNode.f = this._startNode.g + this._startNode.h, t && (this.slant = t), this.search()
            }
            search() {
                for (var e = this._startNode; e != this._endNode;) {
                    for (var t = Math.max(0, e.x - 1), i = Math.min(this._grid.numCols - 1, e.x + 1), s = Math.max(0, e.y - 1), a = Math.min(this._grid.numRows - 1, e.y + 1), n = t; n <= i; n++)
                        for (var r = s; r <= a; r++)
                            if (this._slant || n == e.x || r == e.y) {
                                var o = this._grid.getNode(n, r);
                                if (o != e && o.walkable && this._grid.getNode(e.x, o.y).walkable && this._grid.getNode(o.x, e.y).walkable) {
                                    var l = this._straightCost;
                                    e.x != o.x && e.y != o.y && (l = this._diagCost);
                                    var h = e.g + l * o.costMultiplier,
                                        d = this._heuristic(o),
                                        u = h + d;
                                    this.isOpen(o) || this.isClosed(o) ? o.f > u && (o.f = u, o.g = h, o.h = d, o.parent = e) : (o.f = u, o.g = h, o.h = d, o.parent = e, this._open.push(o))
                                }
                            }
                    if (this._closed.push(e), 0 == this._open.length) return console.log("AStar >> no path found", n, r), !1;
                    let g = this._open.length;
                    for (let e = 0; e < g; e++)
                        for (let t = e + 1; t < g; t++)
                            if (this._open[e].f > this._open[t].f) {
                                let i = this._open[e];
                                this._open[e] = this._open[t], this._open[t] = i
                            }
                    e = this._open.shift()
                }
                return this.buildPath(), !0
            }
            buildPath() {
                this._path = new Array;
                var e = this._endNode;
                for (this._path.push(e); e != this._startNode;) e = e.parent, this._path.unshift(e)
            }
            get path() {
                return this._path
            }
            isOpen(e) {
                for (var t = 0; t < this._open.length; t++)
                    if (this._open[t] == e) return !0;
                return !1
            }
            isClosed(e) {
                for (var t = 0; t < this._closed.length; t++)
                    if (this._closed[t] == e) return !0;
                return !1
            }
            manhattan(e) {
                return Math.abs(e.x - this._endNode.x) * this._straightCost + Math.abs(e.y + this._endNode.y) * this._straightCost
            }
            euclidian(e) {
                var t = e.x - this._endNode.x,
                    i = e.y - this._endNode.y;
                return Math.sqrt(t * t + i * i) * this._straightCost
            }
            diagonal(e) {
                var t = Math.abs(e.x - this._endNode.x),
                    i = Math.abs(e.y - this._endNode.y),
                    s = Math.min(t, i),
                    a = t + i;
                return this._diagCost * s + this._straightCost * (a - 2 * s)
            }
            get visited() {
                return this._closed.concat(this._open)
            }
            set slant(e) {
                this._slant = e
            }
        }
        class XBlockNode {
            constructor(e, t) {
                this.walkable = !0, this.dynWalkable = !0, this.costMultiplier = 1, this.x = e, this.y = t
            }
        }
        class XGrid {
            constructor(e, t) {
                this._col = e, this._row = t, this._nodes = [];
                for (let i = 0; i < e; i++) {
                    this._nodes[i] = [];
                    for (let e = 0; e < t; e++) this._nodes[i][e] = new XBlockNode(i, e)
                }
            }
            getNode(e, t) {
                return e < 0 || e >= this.numCols || t < 0 || t >= this.numRows ? null : this._nodes[e][t]
            }
            setEndNode(e, t) {
                if (this._endNode = this.getNode(e, t), null == this._endNode) return !1;
                if (!this._endNode.walkable) {
                    let i = [],
                        s = this.getNode(e - 1, t),
                        a = this.getNode(e + 1, t),
                        n = this.getNode(e, t - 1),
                        r = this.getNode(e, t + 1);
                    if (null != s && s.walkable && i.push(s), null != a && a.walkable && i.push(a), null != n && n.walkable && i.push(n), null != r && r.walkable && i.push(r), i.length > 0) {
                        let e = i[Math.floor(Math.random() * i.length)];
                        this._endNode = e
                    }
                }
                return !0
            }
            setStartNode(e, t) {
                this._startNode = this._nodes[e][t]
            }
            setWalkable(e, t, i) {
                this._nodes[e][t].walkable = i
            }
            setDynWalkable(e, t, i) {
                this._nodes[e][t].dynWalkable = i
            }
            get endNode() {
                return this._endNode
            }
            get numCols() {
                return this._col
            }
            get numRows() {
                return this._row
            }
            get startNode() {
                return this._startNode
            }
        }
        class MapMgr {
            constructor() {
                this._outRoomGirds = [], this.outRoomGridsInsideMap = [], this.hideDoors = [], this.roomBuildings = [], this.outBuildings = [], this.hideWall = [], this.hideWallMap = new Map, this.roomsWall = [], this.tempV2 = new fx.V2
            }
            init(e, t) {
                this.outBuildings = [], this.parseData(e, t), this._grid = new XGrid(this._height, this._width);
                for (let e = 0; e < this._height; e++)
                    for (let t = 0; t < this._width; t++) this.setWalkable(e, t, this.isWalkable(e, t)), this.setDynWalkable(e, t, this.isWalkable(e, t));
                this.initRooms(), this.initOutRoomGrids(), this._mapBoundBox = {
                    minX: 0,
                    maxX: this._width * C.GridSize,
                    minY: 0,
                    maxY: this._height * C.GridSize
                };
                for (const e of this._hideRooms) this.setWalkable(e.doorPos.x, e.doorPos.y, !1), this.setDynWalkable(e.doorPos.x, e.doorPos.y, !1);
                for (const e of this._invalidHideRooms) this.setWalkable(e.doorPos.x, e.doorPos.y, !1), this.setDynWalkable(e.doorPos.x, e.doorPos.y, !1)
            }
            get width() {
                return this._width
            }
            get height() {
                return this._height
            }
            get buildings() {
                return this._buildings
            }
            get views() {
                return this._viewList
            }
            get rooms() {
                return this._rooms
            }
            get hideRooms() {
                return this._hideRooms
            }
            get mapNode() {
                return this._mapNode
            }
            set mapNode(e) {
                this._mapNode = e
            }
            get mapBoundBox() {
                return this._mapBoundBox
            }
            get hunterSpawns() {
                return this._hunterSpawns
            }
            get mapBuildPoints() {
                return this._mapBuildPoints
            }
            get mapEquipPoints() {
                return this._mapEquipPoints
            }
            get healZones() {
                return this._healZones
            }
            get realWidth() {
                return this.width * C.GridSize
            }
            get realHeight() {
                return this.height * C.GridSize
            }
            get outRoomGrids() {
                return this._outRoomGirds.slice()
            }
            parseData(e, t) {
                this._tiledMap = [], this._rooms = [], this._hideRooms = [], this._invalidHideRooms = [], this._buildings = [], this._hunterSpawns = [], this._defenderSpawns = [], this._mapBuildPoints = [], this._mapEquipPoints = [], this._healZones = [], this._viewList = [], this._width = e.width, this._height = e.height, this._tileSets = this.getTilesets(e), this.hideDoors = [], this.hideWall = [], this.hideWallMap.clear();
                let i = -1,
                    s = this.getLayer(e, "data").objects;
                for (const e of s)
                    if ("HealZone" == e.type) {
                        let t = new Laya.Rectangle(e.x, e.y, e.width, e.height);
                        this._healZones.push(t)
                    } else if ("DefenderSpawnPoint" == e.type) this._defenderSpawns.push(new fx.V2(e.x, e.y));
                else if ("HunterSpawnPoint" == e.type) this._hunterSpawns.push(new fx.V2(e.x, e.y));
                else if ("MapBuildPoint" == e.type) this._mapBuildPoints.push(new fx.V2(e.x, e.y));
                else if ("MapEquipPoint" == e.type) {
                    let t = e.name.split("-");
                    t[1] && ("1" == t[1] ? (this._mapEquipPoints[0] || (this._mapEquipPoints[0] = []), this._mapEquipPoints[0].push(new fx.V2(e.x, e.y))) : "2" == t[1] ? (this._mapEquipPoints[1] || (this._mapEquipPoints[1] = []), this._mapEquipPoints[1].push(new fx.V2(e.x, e.y))) : "3" == t[1] ? (this._mapEquipPoints[2] || (this._mapEquipPoints[2] = []), this._mapEquipPoints[2].push(new fx.V2(e.x, e.y))) : "4" == t[1] && (this._mapEquipPoints[3] || (this._mapEquipPoints[3] = []), this._mapEquipPoints[3].push(new fx.V2(e.x, e.y))))
                } else if (-1 != e.name.indexOf("Room")) {
                    let s = e.name.replace("Room_", ""),
                        a = Number(s);
                    if (this.getRoomById(a)) {
                        console.error(`Room重复 ${a}`);
                        continue
                    }
                    let n = new XRoomModel;
                    n.id = a;
                    let r = this.mapPosToGridPos(e.x, e.y);
                    if (n.x = r.x, n.y = r.y, "Hide" == e.type) {
                        ++i == t ? (n.active = !1, this._hideRooms.push(n), this._rooms.push(n), console.log(`------------------隐藏房间： ${e.name}`)) : this._invalidHideRooms.push(n);
                        continue
                    }
                    this._rooms.push(n)
                }
                let a = this.getLayer(e, "ground").data,
                    n = this.getLayer(e, "build").data,
                    r = this.getLayer(e, "view") ? this.getLayer(e, "view").data : null;
                for (let e = 0; e < this._height; ++e) {
                    this._tiledMap[e] = [];
                    for (let t = 0; t < this._width; ++t) {
                        let i = new XTiledInfo(e, t),
                            s = e * this._width + t,
                            o = a[s];
                        0 == o ? (i.groundBlock = "floor_1", i.groundRot = 0) : (i.groundBlock = this._tileSets[o][0], i.groundRot = this._tileSets[o][1]), -1 !== i.groundBlock.indexOf("wall_break") && this.hideWall.push(new fx.V2(i.x, i.y)), -1 != i.groundBlock.indexOf("floor_1") && this.outRoomGridsInsideMap.push(new fx.V2(e, t)), -1 != i.groundBlock.indexOf("wall_unable") && this.hideDoors.push(new fx.V2(i.x, i.y)), -1 != i.groundBlock.indexOf("floor") && (i.walkable = !0);
                        let l = n[s];
                        if (l > 0) {
                            let e = this._tileSets[l][0],
                                t = e.split("_");
                            i.buildName = e, i.buildId = Number(t[1]), i.buildRot = this._tileSets[l][1], i.lv = t[3] ? Number(t[3]) : 1, this._buildings.push(i)
                        }
                        if (this._tiledMap[e][t] = i, r) {
                            let i = r[s];
                            if (i > 0) {
                                let s = new XTiledInfo(e, t);
                                if (!this._tileSets[i]) continue;
                                let a = this._tileSets[i][2].name;
                                s.image = `res/map/${a}.png`, s.groundBlock = a, this._viewList.push(s)
                            }
                        }
                    }
                }
            }
            getTilesets(e) {
                let t = {};
                for (let i = 0; i < e.tilesets.length; ++i) {
                    let s, a, n = e.tilesets[i],
                        r = n.name.split("_"),
                        o = Number(r[r.length - 1]);
                    !isNaN(o) && o >= 90 ? (s = n.name.replace(`_${o}`, ""), a = o) : (s = n.name, a = 0), t[n.firstgid] = [s, a, n]
                }
                return t
            }
            getLayer(e, t) {
                for (const i of e.layers)
                    if (i.name == t) return i
            }
            initRooms() {
                for (const e of this._rooms) {
                    let t = [],
                        i = [],
                        s = [];
                    this.searchRoomGrids(e.id, e.x, e.y, t, i, s), e.walls = i;
                    let a, n = new fx.V2(e.x, e.y),
                        r = 1 / 0;
                    for (const e of s) {
                        let t = n.distanceSq(e);
                        if (t < r) r = t, a = e;
                        else if (t == r)
                            if (e.x == a.x)
                                if (e.y < a.y) {
                                    let t = this.getTiledInfo(e.x, e.y - 1);
                                    t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                                } else {
                                    let t = this.getTiledInfo(e.x, e.y + 1);
                                    t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                                } else if (e.y == a.y)
                            if (e.x < a.x) {
                                let t = this.getTiledInfo(e.x - 1, e.y);
                                t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                            } else {
                                let t = this.getTiledInfo(e.x + 1, e.y);
                                t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                            }
                    }
                    let o = [];
                    for (const e of s) e.x == a.x && e.y == a.y || o.push(e);
                    e.doorPosArr = o, e.doorPos = a, e.doorRot = this._tiledMap[a.x][a.y].buildRot, t.unshift(a), e.grids = t
                }
                for (const e of this.rooms) {
                    let t = e.grids[0],
                        i = this.getTiledInfo(t.x, t.y);
                    if (!i) return;
                    i && (i.roomId = e.id)
                }
                for (const e of this._invalidHideRooms) {
                    let t = [],
                        i = [],
                        s = [];
                    this.searchRoomGrids(e.id, e.x, e.y, t, i, s), e.walls = i;
                    let a, n = new fx.V2(e.x, e.y),
                        r = 1 / 0;
                    for (const e of s) {
                        let t = n.distanceSq(e);
                        if (t < r) r = t, a = e;
                        else if (t == r)
                            if (e.x == a.x)
                                if (e.y < a.y) {
                                    let t = this.getTiledInfo(e.x, e.y - 1);
                                    t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                                } else {
                                    let t = this.getTiledInfo(e.x, e.y + 1);
                                    t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                                } else if (e.y == a.y)
                            if (e.x < a.x) {
                                let t = this.getTiledInfo(e.x - 1, e.y);
                                t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                            } else {
                                let t = this.getTiledInfo(e.x + 1, e.y);
                                t.roomId ? a = e : t.groundBlock && -1 != t.groundBlock.indexOf("floor_1") && (a = e)
                            }
                    }
                    e.doorPos = a, t.unshift(a), e.grids = t
                }
            }
            searchRoomGrids(e, t, i, s, a, n, r = !1) {
                let o = new fx.V2(t, i);
                if (XV2Util01.isV2InArray(o, s) || XV2Util01.isV2InArray(o, a)) return;
                let l = this.getTiledInfo(t, i);
                if (l)
                    if (l && (l.roomId = e), l.walkable) {
                        if (r) return;
                        if (l.groundBlock && -1 != l.groundBlock.indexOf("floor_1")) return;
                        if (l.buildName && -1 != l.buildName.indexOf("door")) return void n.push(o);
                        s.push(o), this.searchRoomGrids(e, t, i + 1, s, a, n), this.searchRoomGrids(e, t, i - 1, s, a, n), this.searchRoomGrids(e, t + 1, i, s, a, n), this.searchRoomGrids(e, t - 1, i, s, a, n), this.searchRoomGrids(e, t + 1, i + 1, s, a, n, !0), this.searchRoomGrids(e, t + 1, i - 1, s, a, n, !0), this.searchRoomGrids(e, t - 1, i + 1, s, a, n, !0), this.searchRoomGrids(e, t - 1, i - 1, s, a, n, !0)
                    } else a.push(o)
            }
            initOutRoomGrids() {
                this._outRoomGirds = [];
                for (let e = 0; e < this._height; ++e)
                    for (let t = 0; t < this._width; ++t) {
                        let i = this._tiledMap[e][t];
                        i && !i.roomId && i.walkable && this._outRoomGirds.push(i)
                    }
            }
            getRoomById(e) {
                for (const t of this._rooms)
                    if (t.id == e) return t
            }
            getRoomByGridPos(e, t) {
                let i = this.getRoomIdByGridPos(e, t);
                if (-1 !== i) return this.getRoomById(i)
            }
            getRoomByWallGrid(e, t) {
                let i = null;
                if (this.roomsWall[`x${e}_y${t}`]) return i = this.getRoomById(this.roomsWall[`x${e}_y${t}`])
            }
            getRoomTiledList(e) {
                let t = [];
                for (const i of e.grids) {
                    let e = this.getTiledInfo(i.x, i.y);
                    e && t.push(e)
                }
                return t
            }
            getTiledInfo(e, t) {
                return this._tiledMap[e] ? this._tiledMap[e][t] : null
            }
            isWall(e, t, i) {
                if (!i) return;
                let s = i.walls;
                for (const i of s)
                    if (e == i.x && t == i.y) return !0;
                return !1
            }
            isGridWall(e, t) {
                let i = this.getTiledInfo(e, t);
                if (i) return -1 != i.groundBlock.indexOf("wall")
            }
            getHunterSpawnPos(e) {
                return e = Math.clamp(e, 0, this._hunterSpawns.length - 1), this._hunterSpawns[e]
            }
            getDefenderSpawnPos(e) {
                return e = Math.clamp(e, 0, this._defenderSpawns.length - 1), this._defenderSpawns[e % this._defenderSpawns.length]
            }
            mapPosToGridPos(e, t) {
                let i = Math.floor(t / C.GridSize);
                var s = Math.floor(e / C.GridSize);
                return new fx.V2(i, s)
            }
            gridPosToMapPos(e, t) {
                let i = t * C.GridSize + C.GridHalfSize,
                    s = e * C.GridSize + C.GridHalfSize;
                return new fx.V2(i, s)
            }
            mapPosToStagePos(e, t) {
                return {
                    x: e + this._mapNode.x,
                    y: t + this._mapNode.y
                }
            }
            stagePosToMapPos(e, t) {
                return {
                    x: e - this._mapNode.x,
                    y: t - this._mapNode.y
                }
            }
            isInStageByGridPos(e, t) {
                let i = this.gridPosToMapPos(e, t);
                return this.isInStageByMapPos(i.x, i.y)
            }
            isInStageByMapPos(e, t) {
                let i = this.mapPosToStagePos(e, t);
                return !(i.x < 0 || i.x > Laya.stage.width || i.y < 0 || i.y > Laya.stage.height)
            }
            isWalkable(e, t) {
                return !(!this._tiledMap[e] || !this._tiledMap[e][t]) && this._tiledMap[e][t].walkable
            }
            twoGridsInSameRoome(e, t, i, s) {
                return this.getRoomByGridPos(e, t) == this.getRoomByGridPos(i, s)
            }
            getRoomIdByMapPos(e, t) {
                let i = this.mapPosToGridPos(e, t);
                return this.getRoomIdByGridPos(i.x, i.y)
            }
            getRoomIdByGridPos(e, t) {
                let i = this.getTiledInfo(e, t);
                if (i && i.roomId && i.buildName && i.buildName.includes("door")) return i.roomId;
                for (const i of this.rooms)
                    for (const s of i.grids)
                        if (s.x == e && s.y == t) return i.id;
                return -1
            }
            getRoomIdByGrid(e, t) {
                let i = this.getTiledInfo(e, t);
                if (i && i.roomId && i.buildName && i.buildName.includes("door")) return i.roomId;
                for (const i of this.rooms)
                    for (const s of i.grids)
                        if (s.x == e && s.y == t) return i.id;
                for (const i of this.rooms)
                    for (const s of i.walls)
                        if (s.x == e && s.y == t) return i.id;
                return -1
            }
            getRandomPosByRoomId(e) {
                for (const t of this.rooms)
                    if (e == t.id) {
                        let e = fx.Utils.cloneArray(t.grids);
                        for (const i of t.buildings)
                            for (let t = 0; t < e.length; t++) i.x != e[t].x || i.y != e[t].y || e.splice(t, 1);
                        return fx.Utils.randomInArray(e)
                    }
            }
            getRoomsByDistance(e) {
                let t = this.rooms.slice();
                for (let i = 0; i < t.length - 1; ++i) {
                    let s = !1;
                    for (let a = t.length - 1; a > i; --a) {
                        let i = this.gridPosToMapPos(t[a].x, t[a].y),
                            n = XV2Util01.pDistance(e, i),
                            r = this.gridPosToMapPos(t[a - 1].x, t[a - 1].y);
                        if (XV2Util01.pDistance(e, r) > n) {
                            let e = t[a - 1];
                            t[a - 1] = t[a], t[a] = e, s = !0
                        }
                    }
                    if (!s) break
                }
                return t
            }
            findPath(e, t, i, s, a = !1) {
                let n = this.mapPosToGridPos(e, t),
                    r = this.mapPosToGridPos(i, s);
                if (this._grid.setStartNode(n.x, n.y), !this._grid.setEndNode(r.x, r.y)) return [];
                let o = new XAStar;
                if (o.findPath(this._grid, a), !o.path) return [];
                let l = [];
                for (let e = 0; e < o.path.length; ++e) {
                    let t = this.gridPosToMapPos(o.path[e].x, o.path[e].y);
                    l.push(t)
                }
                return l
            }
            limitMove(e, t, i, s, a = 0) {
                if (0 == i && 0 == s) return {
                    x: e,
                    y: t
                };
                let n = e + (i = Math.min(i, C.GridHalfSize - .01)),
                    r = t + (s = Math.min(s, C.GridHalfSize - .01)),
                    o = e + i,
                    l = t + s,
                    h = this.mapPosToGridPos(e, t);
                i > 0 ? o += a : i < 0 && (o -= a), s > 0 ? l += a : s < 0 && (l -= a);
                let d = this.mapPosToGridPos(o, l);
                if (XV2Util01.isV2Equal(h, d)) return {
                    x: n,
                    y: r
                };
                let u = !1;
                if (h.y != d.y) {
                    let e = d.y > h.y ? 1 : -1,
                        t = this._grid.getNode(h.x, h.y + e);
                    t && !t.dynWalkable && (o = this.gridPosToMapPos(h.x, h.y + e).x - e * (C.GridHalfSize + .01) - e * a, u = !0)
                }
                if (u || (o = n), u = !1, h.x != d.x) {
                    let e = d.x > h.x ? 1 : -1,
                        t = this._grid.getNode(h.x + e, h.y);
                    t && !t.dynWalkable && (l = this.gridPosToMapPos(h.x + e, h.y).y - e * (C.GridHalfSize + .01) - e * a, u = !0)
                }
                u || (l = r);
                let g = this.mapPosToGridPos(o, l),
                    c = this._grid.getNode(g.x, g.y);
                return c && !c.dynWalkable && (o = e, l = t), {
                    x: o,
                    y: l
                }
            }
            move(e, t, i, s, a = 0) {
                if (0 == i && 0 == s) return {
                    x: e,
                    y: t
                };
                let n = e + (i = Math.min(i, C.GridHalfSize - .01)),
                    r = t + (s = Math.min(s, C.GridHalfSize - .01)),
                    o = e + i,
                    l = t + s,
                    h = this.mapPosToGridPos(e, t);
                i > 0 ? o += a : i < 0 && (o -= a), s > 0 ? l += a : s < 0 && (l -= a);
                let d = this.mapPosToGridPos(o, l);
                return XV2Util01.isV2Equal(h, d), {
                    x: n,
                    y: r
                }
            }
            setWalkable(e, t, i) {
                this._grid.setWalkable(e, t, i)
            }
            setDynWalkable(e, t, i) {
                this._grid.setDynWalkable(e, t, i)
            }
            isInMap(e, t) {
                return !(e < this.mapBoundBox.minX || e > this.mapBoundBox.maxX || t < this.mapBoundBox.minY || t > this.mapBoundBox.maxY)
            }
            isInHealZone(e, t) {
                for (const i of this._healZones)
                    if (i.contains(e, t)) return !0;
                return !1
            }
            stagePosToGridPos(e, t) {
                let i = this.stagePosToMapPos(e, t);
                return i = this.mapPosToGridPos(i.x, i.y)
            }
            isHideRoomDoor(e, t) {
                for (const i of this.hideRooms)
                    if (i.doorPos.x == e && i.doorPos.y == t) return !i.active;
                return !1
            }
            getHideDoorPosByRoomId(e) {
                let t = [];
                for (const e of this.hideDoors) {
                    let i = this.getRoomIdByGrid(e.x, e.y);
                    i && -1 !== i && t.push(e)
                }
                if (t.length > 0) return t
            }
            getActiveRoomCnt() {
                let e = 0;
                for (const t of this.rooms) t.active && e++;
                return e
            }
            getRandomRoom(e) {
                let t = [];
                for (const i of this.rooms) 0 != i.active && i != e && t.push(i);
                return fx.Utils.randomInArray(t)
            }
            getMapTiles() {
                return this._tiledMap
            }
        }
        class an extends Laya.Script {
            init(e, t, i) {
                this.node = this.owner, this.x = e.x, this.y = e.y, this.buildCfg = t, this.isUsed = !1, this.isTarget = !1, this.buildName = i
            }
        }
        class nn extends Laya.Script {
            init(e, t) {
                this.node = this.owner, this.x = e.x, this.y = e.y, this.equipCfg = t
            }
        }
        class XTowerModel extends XBuildingModel {
            getAtkPow() {
                let e = this.atk,
                    t = e;
                for (const i of this.buffs) i.Type == Ee.ATK_POW && (t += i.result(e));
                return t
            }
            getAtkCD() {
                let e = this.atkCD,
                    i = e;
                for (const t of this.buffs) t.Type != Ee.ATK_SPD && t.Type != Ee.DYC_ATK_SPD || (i += t.result(e));
                if (3e3 == this.id && this.playerUuid == t.playerMgr.mineUuid) {
                    let e = t.user.gameInfo.getBuffData(23);
                    if (e) {
                        i *= (100 - t.cfg.buffCfg.get(23).values[e.lv]) / 100
                    }
                }
                return i = Math.max(.2, i)
            }
            getAtkDst() {
                let e = this.atkDst,
                    t = e;
                for (const i of this.buffs) i.Type == Ee.ATK_DST && (t += i.result(e));
                return t
            }
        }
        class XBuildingMgr {
            constructor() {
                this.isAddCfg = !1, this.buildCfgs = {}, this.buildIdsMap = {}, this.dawnBed = [], this.mapBuildArr = ["5002_1", "4000_3", "4000_2", "4000_1", "6017_1", "5000_2", "5000_1", "5003_1", "5004_1", "5005_1", "3008_1", "3009_1", "fhl_1", "7777_1", "3006_1", "6023_1"], this.mapBuildWeightArr = [12, 1, 3, 5, 5, 1, 5, 10, 18, 25, 5, 2, 6, 2, 10, 5], this.magicConsumeArr = [
                    [10, 0],
                    [40, 10],
                    [160, 10],
                    [240, 30]
                ]
            }
            initBuildingCfg() {
                this.isAddCfg || 
                (this.isAddCfg = !0, 
                    this.addCfgs("bedCfg", e.BuildType.bed), 
                this.addCfgs("doorCfg", e.BuildType.door), 
                this.addCfgs("towerCfg_test", e.BuildType.tower), 
                this.addCfgs("energyMachineCfg", e.BuildType.energy), 
                this.addCfgs("mineCfg_test", e.BuildType.mine), 
                this.addCfgs("skillBuildCfg_test"), 
                this.superBuildCfg = new fx.BaseDataModel("superBuildCfg_test", Lt), 
                this.specialTowerCfg = new fx.BaseDataModel("specialTowerCfg_test", Dt))
            }
            addCfgs(e, t) {
                let i = fx.CfgMgr.instance.get(e);
                for (const e in i) {
                    let s = i[e];
                    s.id = s.buildId, s.type = t || s.buildType, this.buildCfgs[s.id] || (this.buildCfgs[s.id] = []), this.buildIdsMap[s.type] || (this.buildIdsMap[s.type] = []), this.buildCfgs[s.id].push(s), this.buildIdsMap[s.type].push(s.id), s.lv = this.buildCfgs[s.id].length
                }
            }
            init() {
                this.initBuildingCfg(), this.buildings = [], this.buildingGrids = [], this.turntableBuildArr = [], this.mapEquipScripts = [], this.mapEquipScriptArr = [], this.rooms = {};
                for (const e of t.mapMgr.rooms) this.rooms[e.id] = e;
                let i = t.mapMgr.buildings.slice(0),
                    s = [];
                for (const e of i) {
                    let t = this.getRoom(e.roomId);
                    t && t.active && (s.push(e), this.build(null, e.buildId, e.x, e.y, e.buildRot, e.lv, !1))
                }
                this.openAllDoor(), t.gameMgr.gameMode == e.GameMode.E_Defense ? this.initRandomBuild() : t.gameMgr.gameMode == e.GameMode.E_Hunt ? this.initHunterRandomBuild() : t.gameMgr.gameMode == e.GameMode.E_SevenGhost && this.initSevenGhostRandomBuild()
            }
            initSevenGhostRandomBuild() {
                let e = [6001, 6002, 6004, 6005, 6006, 6007, 6003, 6008, 6009, 6010, 6011, 1001, 6019, 6014];
                for (const t in this.rooms) {
                    let i, s = this.rooms[t],
                        a = s.bedModelList[0],
                        n = new fx.V2(a.x, a.y),
                        r = this.getGridByPos(s.id, n),
                        o = XRandomUtil.random(),
                        l = e[i = o <= .15 ? 0 : o <= .3 ? 1 : o <= .4 ? 2 : o <= .45 ? 3 : o <= .55 ? 4 : o <= .6 ? 5 : o <= .7 ? 6 : o <= .75 ? 7 : o <= .8 ? 8 : o <= .85 ? 9 : o <= .9 ? 10 : o <= .925 ? 11 : o <= .975 ? 12 : 13],
                        h = this.getBuildCfg(l);
                    this.build(null, h.buildId, r.x, r.y, 0, 1, !1, !0, 1, !0)
                }
            }
            initHunterRandomBuild() {
                let e = [6001, 6002, 6004, 6005, 6006, 6007, 6003, 6008, 6009, 6010, 6011];
                for (const t in this.rooms) {
                    let i, s = this.rooms[t],
                        a = s.bedModelList[0],
                        n = new fx.V2(a.x, a.y),
                        r = this.getGridByPos(s.id, n),
                        o = XRandomUtil.random(),
                        l = e[i = o <= .15 ? 0 : o <= .3 ? 1 : o <= .4 ? 2 : o <= .45 ? 3 : o <= .65 ? 4 : o <= .7 ? 5 : o <= .8 ? 6 : o <= .85 ? 7 : o <= .9 ? 8 : o <= .95 ? 9 : 10],
                        h = this.getBuildCfg(l);
                    this.build(null, h.buildId, r.x, r.y, 0, 1, !1, !0, 10)
                }
            }
            initRandomBuild() {
                let e = 100 / 95,
                    t = [5001, 6012, 3e3, 3004, 3001, 6005, 6001, 6013, 6019, 4e3, 6006];
                for (const i in this.rooms) {
                    let s, a = this.rooms[i],
                        n = a.bedModelList[0],
                        r = new fx.V2(n.x, n.y),
                        o = this.getGridByPos(a.id, r),
                        l = XRandomUtil.random(),
                        h = t[s = l < .25 * e ? 0 : l < .4 * e ? 1 : l < .45 * e ? 2 : l < .5 * e ? 3 : l < .55 * e ? 4 : l < .67 * e ? 5 : l < .79 * e ? 6 : l < .83 * e ? 7 : l < .85 * e ? 8 : l < .9 * e ? 9 : 10],
                        d = this.getBuildCfg(h);
                    this.build(null, d.buildId, o.x, o.y, 0, 1, !1, !0, null, !0)
                }
            }
            getGridByPos(e, i) {
                let s = t.buildingMgr.getEmptyGrids(e);
                if (0 == s.length) return;
                let a = new fx.V2;
                if (i) {
                    let e = 9999999;
                    for (const t of s) {
                        let s = i.distanceSq(t);
                        s < e && (e = s, a.from(t))
                    }
                } else a.from(fx.Utils.randomInArray(s));
                return a
            }
            getRoom(e) {
                return this.rooms[e]
            }
            getBuildCfg(e, t = 1) {
                if (this.buildCfgs[e]) return this.buildCfgs[e].length < t && (t = this.buildCfgs[e].length), this.buildCfgs[e][t - 1]
            }
            getBuildCntInRoom(e, t) {
                if (!e) return 0;
                let i = 0;
                for (const s of e.buildings) s.id == t && i++;
                return i
            }
            getBuildMaxLv(e) {
                return this.buildCfgs[e] ? this.buildCfgs[e].length : 1
            }
            openAllDoor() {
                let t = this.buildings;
                for (const i of t) {
                    this.getBuildCfg(i.id).type == e.BuildType.door && this.changeDoorState(i, !0)
                }
            }
            closeAllDoor() {
                let t = this.buildings;
                for (const i of t) {
                    this.getBuildCfg(i.id).type == e.BuildType.door && this.changeDoorState(i, !1)
                }
            }
            changeDoorState(e, i) {
                e.isOpen = i, t.mapMgr.setDynWalkable(e.x, e.y, i), fx.EventCenter.I.event(XEventNames.E_Door_State_Changed, [e])
            }
            openDoorByGridPos(t, i) {
                let s = this.getBuilding(t, i);
                if (!s || s.type != e.BuildType.door) return e.BuildResult.E_FAILD;
                this.changeDoorState(s, !0)
            }
            closeDoorByGridPos(t, i) {
                let s = this.getBuilding(t, i);
                if (!s || s.type != e.BuildType.door) return e.BuildResult.E_FAILD;
                this.changeDoorState(s, !1)
            }
            upBed(x_, y_, a) {
                let n = this.getBuilding(x_, y_),
                    r = this.getRoom(n.roomId);
                if (!n || n.type != e.BuildType.bed || !r) return e.BuildResult.E_FAILD;
                if (n.isUsed) return e.BuildResult.E_BED_IS_USED;
                for (const i of r.buildings)
                    if (i.playerUuid = a.uuid, 2e3 == i.id && a.uuid == t.playerMgr.player.uuid) {
                        let e = t.user.gameInfo.getBuffData(21);
                        if (e) {
                            let s = t.cfg.buffCfg.get(21).values[e.lv];
                            i.maxHp = i.curHp = Math.round(i.maxHp * (s / 100 + 1))
                        }
                    } else if (a.uuid == t.playerMgr.player.uuid) {
                    let s = t.buildingMgr.getBuildCfg(i.id);
                    if (t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId)
                        for (const e of s.buffId)
                            if (t.user.gameInfo.getBuffData(e)) {
                                (s.buffIcon || s.buffBuildAni) && i.ownerScript.initSkin(), i.ownerScript.clearEffects(), i.ownerScript.initEffects();
                                break
                            }
                }
                n.isUsed = !0, a.isBed = !0, a.bedModel = n, r.players || (r.players = []), r.players.push(a);
                let o = this.getBuilding(r.doorPos.x, r.doorPos.y);
                if (o && o.canHandle && this.closeDoorByGridPos(r.doorPos.x, r.doorPos.y), fx.EventCenter.I.event(XEventNames.E_Bed_Up, [n, a.uuid]), a.takeMapBuild) {
                    let e = a.takeMapBuild.buildCfg,
                        t = this.getEmptyGrids(r.id),
                        i = fx.Utils.randomInArray(t);
                    this.buildCd(a.uuid, e.buildId, i.x, i.y, 0, e.lv)
                }
                return e.BuildResult.E_OK
            }
            downBed(e) {
                let t = this.getRoom(e.roomId);
                if (!t) return;
                let i = 0;
                for (let s = 0; s < t.players.length; s++)
                    if (t.players[s].playerUuid == e.uuid) {
                        i = s;
                        break
                    }
                t.players.splice(i, 1), e.isBed = !1, e.bedModel = null, fx.EventCenter.I.event(XEventNames.E_Bed_Down, [e.uuid, t.id])
            }
            build(i, s, a, n, r = 0, o = 1, l = !0, h = !0, d, u = !1) {
                let g = this.getBuilding(a, n);
                if (g && !g.isDie) return e.BuildResult.E_FAILD;
                let c = this.getBuildCfg(s, o);
                if (!c) return;
                let p = t.mapMgr.getRoomIdByGrid(a, n),
                    f = c.coin,
                    m = c.energy,
                    y = t.playerMgr.getPlayer(i);
                if (6666 == c.buildId)
                    if (t.gameMgr.gameMode == e.GameMode.E_Hunt || 1 == t.gameMgr.difficultABTest && t.gameMgr.gameMode == e.GameMode.E_Defense)
                        if (t.playerMgr.mineUuid == i) {
                            let e = Math.clamp(t.gameMgr.randomCnt, 0, 3);
                            f = this.magicConsumeArr[e][0], m = this.magicConsumeArr[e][1]
                        } else {
                            let e = Math.clamp(y.randomCnt, 0, 3);
                            f = this.magicConsumeArr[e][0], m = this.magicConsumeArr[e][1]
                        } else f = this.magicConsumeArr[t.gameMgr.randomCnt][0], m = this.magicConsumeArr[t.gameMgr.randomCnt][1];
                else t.gameMgr.gameMode == e.GameMode.E_Defense && c.buffId && c.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (f = Math.round(.9 * c.coin), m = Math.round(.9 * c.energy));
                if (p && y && l) {
                    let a = this.getRoom(p),
                        n = this.getBuildCntInRoom(a, s);
                    if (c.maxCnt && n >= c.maxCnt) return e.BuildResult.E_MAX_CNT;
                    if (!this.isInfiniteIncome && f && f > y.coin) return e.BuildResult.E_COIN_NOT_ENOUGH;
                    if (!this.isInfiniteIncome && m && m > y.energy) return e.BuildResult.E_ENERGY_NOT_ENOUGH;
                    if (c.preBuilding && !this.isHaveBuilding(p, c.preBuilding.buildId, c.preBuilding.lv)) return e.BuildResult.E_NOT_HAVE_PREBUILD;
                    this.isInfiniteIncome ? t.playerMgr.changePlayerIncomeByUuid(i, f, m) : t.playerMgr.changePlayerIncomeByUuid(i, -f, -m)
                }
                let C = this.createBuildingModelByCfg(i, s, p, o, a, n, r, c);
                return d && (C.curHp = C.maxHp = d), C.isInit = u, C.canHandle = h, this.addBuilding(C, y), t.playerMgr.player.type != e.PlayerType.E_Defender && t.mapMgr.setDynWalkable(a, n, !1), fx.EventCenter.I.event(XEventNames.E_BUILDING_BUILD, [C, !1]), !t.taskMgr.compeletAllTask() && t.taskMgr.startTask(), t.gameMgr.playSound(C, 111), e.BuildResult.E_OK
            }
            buildFree(i, s, a, n, r = 0, o = 1, l = !0, h) {
                let d = this.getBuilding(a, n);
                if (d && !d.isDie) return e.BuildResult.E_FAILD;
                let u = this.getBuildCfg(s, o);
                if (7777 == s && (u = this.getBuildCfg(3e3, o)), !u) return;
                let g, c = t.mapMgr.getRoomIdByGrid(a, n),
                    p = t.playerMgr.getPlayer(i);
                return 7777 == s ? ((g = this.createBuildingModelByCfg(i, 3e3, c, o, a, n, r, u)).isSpecial = !0, !h || h > t.buildingMgr.specialTowerCfg.length ? g.specialId = this.getSpecialTower().id : g.specialId = h) : g = this.createBuildingModelByCfg(i, s, c, o, a, n, r, u), g.canHandle = l, this.addBuilding(g, p), t.playerMgr.player.type != e.PlayerType.E_Defender && t.mapMgr.setDynWalkable(a, n, !1), fx.EventCenter.I.event(XEventNames.E_BUILDING_BUILD, [g, !1]), !t.taskMgr.compeletAllTask() && t.taskMgr.startTask(), t.gameMgr.playSound(g, 111), e.BuildResult.E_OK
            }
            buildCd(i, s, a, n, r = 0, o = 1, l = !0) {
                let h = this.getBuilding(a, n);
                if (h && !h.isDie) return e.BuildResult.E_FAILD;
                let d = this.getBuildCfg(s, o);
                if (7777 == s && (d = this.getBuildCfg(3e3, o)), !d) return;
                let u, g = t.mapMgr.getRoomIdByGrid(a, n),
                    c = t.playerMgr.getPlayer(i);
                if (7777 == s) {
                    (u = this.createBuildingModelByCfg(i, 3e3, g, o, a, n, r, d)).isSpecial = !0;
                    let e = this.getSpecialTower();
                    u.specialId = e.id, "罕见" == e.quality && (u.canChangeSpecial = !0)
                } else u = this.createBuildingModelByCfg(i, s, g, o, a, n, r, d);
                return u.canHandle = l, this.addBuilding(u, c), t.playerMgr.player.type != e.PlayerType.E_Defender && t.mapMgr.setDynWalkable(a, n, !1), fx.EventCenter.I.event(XEventNames.E_BUILDING_BUILD, [u, !1, 60]), !t.taskMgr.compeletAllTask() && t.taskMgr.startTask(), t.gameMgr.playSound(u, 111), e.BuildResult.E_OK
            }
            buildTurntable(i, s, a, n, r = 0, o = 1, l = !0) {
                let h = this.getBuilding(a, n);
                if (h && !h.isDie) return e.BuildResult.E_FAILD;
                let d = this.getBuildCfg(s, o);
                if (7777 == s && (d = this.getBuildCfg(3e3, o)), !d) return;
                let u, g = t.mapMgr.getRoomIdByGrid(a, n),
                    c = t.playerMgr.getPlayer(i);
                if (g && c) {
                    if (!this.isInfiniteIncome && 50 > c.coin) return e.BuildResult.E_COIN_NOT_ENOUGH;
                    if (d.preBuilding && !this.isHaveBuilding(g, d.preBuilding.buildId, d.preBuilding.lv)) return e.BuildResult.E_NOT_HAVE_PREBUILD;
                    this.isInfiniteIncome ? t.playerMgr.changePlayerIncomeByUuid(i, 50, 0) : t.playerMgr.changePlayerIncomeByUuid(i, -50, -0)
                }
                if (7777 == s) {
                    (u = this.createBuildingModelByCfg(i, 3e3, g, o, a, n, r, d)).isSpecial = !0;
                    let e = this.getSpecialTower();
                    u.specialId = e.id, "罕见" == e.quality && (u.canChangeSpecial = !0)
                } else u = this.createBuildingModelByCfg(i, s, g, o, a, n, r, d);
                u.canHandle = l, u.turntableBuildId = `${s}_${o}`, this.turntableBuildArr.push(`${s}_${o}`)
                this.addBuilding(u, c)
                t.playerMgr.player.type != e.PlayerType.E_Defender && t.mapMgr.setDynWalkable(a, n, !1)
                fx.EventCenter.I.event(XEventNames.E_BUILDING_BUILD, [u, !1])
                !t.taskMgr.compeletAllTask() && t.taskMgr.startTask()
                t.gameMgr.playSound(u, 111)
                return    e.BuildResult.E_OK
            }
            buildSpecial(i) {
                let s = t.playerMgr.getPlayer(i.playerUuid);
                return this.addBuilding(i, s), fx.EventCenter.I.event(XEventNames.E_BUILDING_BUILD, [i, !1]), e.BuildResult.E_OK
            }
            createBuildingModelByCfg(i, s, a, n, r, o, l, h) {
                let d;
                switch (h.type) {
                    case e.BuildType.tower:
                        let t = d = new XTowerModel(s, a, n, r, o, l),
                            i = h;
                        t.atkCD = i.atkInterval, t.atkDst = i.atkRange, t.atk = i.atkDamage;
                        break;
                    default:
                        d = new XBuildingModel(s, a, n, r, o, l)
                }
                d.playerUuid = i, d.lv = n, d.type = h.type;
                let u = h.hp || 1;
                return t.gameMgr.changeMaxHp(d, u, u), d
            }
            updateBuildingModel(i, s) {
                let a = s.hp || 1;
                if (2e3 == i.id && i.playerUuid == t.playerMgr.player.uuid) {
                    let e = t.user.gameInfo.getBuffData(21);
                    if (e) {
                        let i = t.cfg.buffCfg.get(21).values[e.lv];
                        a = Math.round(a * (i / 100 + 1))
                    }
                }
                switch (t.gameMgr.changeMaxHp(i, a, a), s.type) {
                    case e.BuildType.tower:
                        let n = i,
                            r = s;
                        n.atkCD = r.atkInterval, n.atkDst = r.atkRange, n.atk = r.atkDamage
                }
            }
            getBuilding(e, t) {
                if (this.buildingGrids[e]) return this.buildingGrids[e][t]
            }
            getMapBuild(x_, y_) {
                if (this.mapBuildScripts && this.mapBuildScripts[x_]) return this.mapBuildScripts[x_][y_]
            }
            getMapEquip(e, t) {
                if (this.mapEquipScripts && this.mapEquipScripts[e]) return this.mapEquipScripts[e][t]
            }
            addBuilding(t, i) {
                this.buildings.push(t), this.buildingGrids[t.x] || (this.buildingGrids[t.x] = []), this.buildingGrids[t.x][t.y] = t;
                let s = this.getRoom(t.roomId);
                s && (s.buildings.push(t), t.type == e.BuildType.bed ? 1e3 == t.id && s.bedModelList.push(t) : t.type == e.BuildType.door ? (s.doorModel = t, s.doorPos = new fx.V2(t.x, t.y)) : t.type == e.BuildType.tower && 3e3 == t.id && s.towers.push(t)), i && i.buildings.push(t)
            }
            getBuildRet(i, s, a = 1) {
                let n = this.getBuildCfg(s, a);
                if (-1 == i) return e.BuildResult.E_FAILD;
                let r = this.getRoom(i),
                    o = this.getBuildCntInRoom(r, s);
                if (n.maxCnt && o >= n.maxCnt) return e.BuildResult.E_MAX_CNT;
                if (n.preBuilding && !this.isHaveBuilding(i, n.preBuilding.buildId, n.preBuilding.lv)) return e.BuildResult.E_NOT_HAVE_PREBUILD;
                let l, h = n.coin,
                    d = r.players[0];
                if (d) {
                    let e = d.uuid;
                    l = t.playerMgr.getPlayer(e)
                } else l = r;
                if (l) {
                    6666 == n.buildId && (h = this.magicConsumeArr[t.gameMgr.randomCnt][0]);
                    let i = n.energy;
                    if (6666 == n.buildId ? i = this.magicConsumeArr[t.gameMgr.randomCnt][1] : t.gameMgr.gameMode == e.GameMode.E_Defense && n.buffId && n.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (h = Math.round(.9 * n.coin), i = Math.round(.9 * n.energy)), h && h > l.coin) return e.BuildResult.E_COIN_NOT_ENOUGH;
                    if (i && i > l.energy) return e.BuildResult.E_ENERGY_NOT_ENOUGH
                }
                return e.BuildResult.E_OK
            }
            destroyBuilding(i, s, a, n = !0) {
                let r = this.getBuilding(s, a);
                if (!r) return;
                let o, l = this.getRoom(r.roomId);
                if (!l && 8888 !== r.id) return;
                if (l && (r.ownerScript.clearEffects(), -1 != (o = l.buildings.indexOf(r)) && (l.buildings.splice(o, 1), n && i))) {
                    r.isPlayerDelete = !0;
                    let s = this.getBuildCfg(r.id, r.lv),
                        a = s ? s.coin : 0,
                        n = s ? s.energy : 0;
                    if (r.isInit) {
                        if (s)
                            if (t.gameMgr.gameMode == e.GameMode.E_Defense) {
                                if (t.user.gameInfo.getBuffData(6) && t.playerMgr.player.uuid != i) {
                                    t.playerMgr.getPlayer(i).isQxbm = !0, i = t.playerMgr.player.uuid
                                }
                                if (1 == t.gameMgr.difficultABTest)
                                    if (n) {
                                        let e = t.user.gameInfo.getBuffData(27);
                                        if (e) {
                                            let n = t.cfg.buffCfg.get(27);
                                            t.playerMgr.changePlayerIncomeByUuid(i, Math.floor(a / 2), Math.floor(s.energy * (n.values[e.lv] / 100)))
                                        } else t.playerMgr.changePlayerIncomeByUuid(i, Math.floor(a / 2), 1)
                                    } else t.playerMgr.changePlayerIncomeByUuid(i, Math.floor(a / 2), Math.floor(s.energy / 2));
                                else s && t.playerMgr.changePlayerIncomeByUuid(i, Math.floor(a / 2), Math.floor(s.energy / 2))
                            } else a ? t.playerMgr.changePlayerIncomeByUuid(i, 1, 0) : t.playerMgr.changePlayerIncomeByUuid(i, 0, 1)
                    } else {
                        if (t.gameMgr.gameMode == e.GameMode.E_Defense) {
                            if (t.user.gameInfo.getBuffData(6) && t.playerMgr.player.uuid != i) {
                                t.playerMgr.getPlayer(i).isQxbm = !0, i = t.playerMgr.player.uuid
                            }
                        }
                        s && t.playerMgr.changePlayerIncomeByUuid(i, Math.floor(a / 2), Math.floor(s.energy / 2))
                    }
                }
                t.mapMgr.setDynWalkable(s, a, !0), delete this.buildingGrids[s][a], -1 != (o = this.buildings.indexOf(r)) && this.buildings.splice(o, 1);
                let h = t.playerMgr.getPlayer(r.playerUuid);
                if (h && -1 != (o = h.buildings.indexOf(r)) && h.buildings.splice(o, 1), XChoreUtil.playSound(113), r.turntableBuildId) {
                    let e = this.turntableBuildArr.indexOf(r.turntableBuildId);
                    e >= 0 && this.turntableBuildArr.splice(e, 0)
                }
                fx.EventCenter.I.event(XEventNames.E_BUILDING_REMOVED, [r])
            }
            upgrade(i, s, a, n = !0, r = 0, o) {
                let l = this.getBuilding(s, a);
                if (!l) return e.BuildResult.E_FAILD;
                let h = t.playerMgr.getPlayer(i);
                if (l.playerUuid && l.playerUuid != i && !l.playerUuid.includes(i)) return e.BuildResult.E_FAILD;
                let d = t.mapMgr.getRoomIdByGridPos(s, a);
                if (!d) return e.BuildResult.E_FAILD;
                if (l.lv >= this.getBuildMaxLv(l.id)) return e.BuildResult.E_MAX_LV;
                let u = 1,
                    g = fx.Utils.clone(this.getBuildCfg(l.id, l.lv + 1));
                if (this.getBuildCfg(l.id, l.lv + 1 + r) && (g = fx.Utils.clone(this.getBuildCfg(l.id, l.lv + 1 + r)), u = 1 + r), n) {
                    let s = g.coin,
                        a = g.energy;
                    if (t.gameMgr.gameMode == e.GameMode.E_Defense && g.buffId && g.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (s = Math.round(.9 * g.coin), a = Math.round(.9 * g.energy)), !this.isInfiniteIncome && g.coin && s > h.coin) return e.BuildResult.E_COIN_NOT_ENOUGH;
                    if (!this.isInfiniteIncome && g.energy && a > h.energy) return e.BuildResult.E_ENERGY_NOT_ENOUGH;
                    if (g.preBuilding && !this.isHaveBuilding(d, g.preBuilding.buildId, g.preBuilding.lv)) return e.BuildResult.E_NOT_HAVE_PREBUILD;
                    this.isInfiniteIncome ? t.playerMgr.changePlayerIncomeByUuid(i, s, a) : t.playerMgr.changePlayerIncomeByUuid(i, -s, -a)
                }
                return l.lv += u, o && (g.hp = g.hp * Math.pow(.5, o)), this.updateBuildingModel(l, g), fx.EventCenter.I.event(XEventNames.E_BUILDING_UPGRADE, [l]), t.gameMgr.playSound(l, 112), e.BuildResult.E_OK
            }
            videoSuper(i, s, a) {
                let n = this.getBuilding(s, a);
                return n ? n.playerUuid && n.playerUuid != i && !n.playerUuid.includes(i) ? e.BuildResult.E_FAILD : t.mapMgr.getRoomIdByGridPos(s, a) ? (n.isSuper = !0, fx.EventCenter.I.event(XEventNames.E_BUILDING_VIDEOUPGRADE, [n]), t.gameMgr.playSound(n, 112), e.BuildResult.E_OK) : e.BuildResult.E_FAILD : e.BuildResult.E_FAILD
            }
            getUpgradeRet(i, s, a, n) {
                let r = this.getBuilding(s, a);
                if (!r) return e.BuildResult.E_FAILD;
                let o = t.mapMgr.getRoomIdByGridPos(s, a);
                if (!o) return e.BuildResult.E_FAILD;
                if (r.lv >= this.getBuildMaxLv(r.id)) return e.BuildResult.E_MAX_LV;
                let l = this.getBuildCfg(r.id, r.lv + 1);
                if (l.preBuilding && !this.isHaveBuilding(o, l.preBuilding.buildId, l.preBuilding.lv)) return e.BuildResult.E_NOT_HAVE_PREBUILD;
                if (n) {
                    let s = t.playerMgr.getPlayer(i),
                        a = 1;
                    if (t.gameMgr.gameMode == e.GameMode.E_Defense && l.buffId && l.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (a = .9), l.coin && Math.round(l.coin * a) > s.coin) return e.BuildResult.E_COIN_NOT_ENOUGH;
                    if (l.energy && Math.round(l.energy * a) > s.energy) return e.BuildResult.E_ENERGY_NOT_ENOUGH
                }
                return e.BuildResult.E_OK
            }
            getBuildingsInRoom(e, t, i) {
                let s = [],
                    a = e.buildings;
                if (t)
                    for (const e of a) t.includes(e.type) && s.push(e);
                else if (i)
                    for (const e of a) i.includes(e.type) || s.push(e);
                else s = a.slice();
                return s
            }
            getAroundGridsByGrid(e, t, i = !1, s = 1) {
                let a = [];
                for (let n = -s; n <= s; n++)
                    for (let r = -s; r <= s; r++) {
                        if (0 == n && 0 == r && !i) continue;
                        let s = e + n,
                            o = t + r;
                        a.push(new fx.V2(s, o))
                    }
                return a
            }
            getRoomAroundOutGrids(e) {
                if (!e) return;
                let i = [],
                    s = t.mapMgr.getRoomById(e);
                if (s) {
                    for (const e of s.walls) {
                        let s = this.getAroundGridsByGrid(e.x, e.y);
                        for (const e of s) {
                            let s = t.mapMgr.getTiledInfo(e.x, e.y);
                            if (s && s.walkable && null == s.roomId) {
                                let t = !1;
                                for (const s of i)
                                    if (s.x == e.x && s.y == e.y) {
                                        t = !0;
                                        break
                                    }
                                t || i.push(e)
                            }
                        }
                    }
                    return i
                }
            }
            isHaveBuilding(t, i, s = 1) {
                let a = this.getRoom(t),
                    n = [];
                for (const e of a.bedModelList) e && !e.isDie && e.playerUuid && n.push(e.playerUuid);
                for (const t of a.buildings)
                    if (t.id == i && t.lv >= s) {
                        if (this.aaa(n, t.playerUuid)) return true;
                        if (t.type == e.BuildType.door) return true
                    }
                return !1
            }
            aaa(arr_, ele_) {
                if (!ele_ || !arr_ || 0 == arr_.length) return false;
                for (const ele of arr_)
                    if (ele_.includes(ele) || ele.includes(ele_)) return true;
                return false
            }
            getIndoorEmptyGrids(e, i, s = 1, a = !0) {
                let n = [];
                for (let r = -s; r <= s; r++)
                    for (let o = -s; o <= s; o++) {
                        if (0 == r && 0 == o && !a) continue;
                        let s = e + r,
                            l = i + o,
                            h = t.mapMgr.getTiledInfo(s, l);
                        h.walkable && void 0 !== h.roomId && !this.getBuilding(s, l) && n.push(new fx.V2(s, l))
                    }
                return n
            }
            getAroundBuildings(e, i, s, a = 1) {
                let n = [],
                    r = this.getBuilding(e, i);
                !r || s && !s.includes(r.type) || n.push(r);
                let o = t.mapMgr.height,
                    l = t.mapMgr.width,
                    h = Math.max(e - a, 0),
                    d = Math.max(i - a, 0),
                    u = Math.min(e + a, o),
                    g = Math.min(i + a, l);
                for (let e = h; e <= u; ++e)
                    for (let t = d; t <= g; ++t) {
                        let i = this.getBuilding(e, t);
                        if (i && (!s || s.includes(i.type))) {
                            if (n.includes(i)) continue;
                            n.push(i)
                        }
                    }
                return n
            }
            getNearBuildingByMapPos(i, s, a, n = 1, r = !1) {
                let o = t.mapMgr.mapPosToGridPos(i, s),
                    l = this.getAroundBuildings(o.x, o.y, a, n);
                if (0 == l.length) return null;
                if (1 == l.length && r) return l[0].type != e.BuildType.door || l[0].isOpen ? l[0].type !== e.BuildType.door ? l[0] : null : l[0]; {
                    let a, n = l[0],
                        o = 1 / 0,
                        h = [];
                    for (let a = 0; a < l.length; ++a) {
                        let r = t.mapMgr.gridPosToMapPos(l[a].x, l[a].y),
                            d = XV2Util01.pDistance({
                                x: i,
                                y: s
                            }, r);
                        d < o && (l[a].type == e.BuildType.door && l[a].isOpen || (o = d, n = l[a])), l[a].type != e.BuildType.door || l[a].isOpen || h.push(l[a])
                    }
                    if (o = 1 / 0, r && h.length > 0) {
                        for (const e of h) {
                            let n = t.mapMgr.gridPosToMapPos(e.x, e.y),
                                r = XV2Util01.pDistance({
                                    x: i,
                                    y: s
                                }, n);
                            r < o && (o = r, a = e)
                        }
                        return a
                    }
                    return n.type == e.BuildType.door && n.isOpen && r && (n = null), n
                }
            }
            getNearBuildingByMapPos2(e, i, s, a = 1) {
                let n = t.mapMgr.mapPosToGridPos(e, i),
                    r = this.getAroundBuildings(n.x, n.y, s, a);
                if (0 == r.length) return null;
                if (1 == r.length) return r[0]; {
                    let s = r[0],
                        a = 1 / 0;
                    for (let n = 0; n < r.length; ++n) {
                        let o = t.mapMgr.gridPosToMapPos(r[n].x, r[n].y),
                            l = XV2Util01.pDistance({
                                x: e,
                                y: i
                            }, o);
                        l < a && (a = l, s = r[n])
                    }
                    return s
                }
            }
            getNearMapBuildingByMapPos(e, i) {
                let s = t.mapMgr.mapPosToGridPos(e, i),
                    a = this.getAroundMapBuildings(s.x, s.y);
                if (0 == a.length) return null;
                if (1 == a.length) return a[0]; {
                    let s = a[0],
                        n = 1 / 0;
                    for (let r = 0; r < a.length; ++r) {
                        let o = t.mapMgr.gridPosToMapPos(a[r].x, a[r].y),
                            l = XV2Util01.pDistance({
                                x: e,
                                y: i
                            }, o);
                        l < n && (n = l, s = a[r])
                    }
                    return s
                }
            }
            getNearMapEquipByMapPos(e, i) {
                let s = t.mapMgr.mapPosToGridPos(e, i),
                    a = this.getAroundMapEquips(s.x, s.y);
                if (0 == a.length) return null;
                if (1 == a.length) {
                    let t = new fx.V2(a[0].node.x, a[0].node.y);
                    if (XV2Util01.pDistance({
                            x: e,
                            y: i
                        }, t) < 50) return a[0]
                } else {
                    let t = a[0],
                        s = 1 / 0;
                    for (let n = 0; n < a.length; ++n) {
                        let r = new fx.V2(a[n].node.x, a[n].node.y),
                            o = XV2Util01.pDistance({
                                x: e,
                                y: i
                            }, r);
                        o < s && (s = o, t = a[n])
                    }
                    if (s < 50) return t
                }
            }
            getAroundMapBuildings(e, i, s = 1) {
                let a = [],
                    n = t.mapMgr.height,
                    r = t.mapMgr.width,
                    o = Math.max(e - s, 0),
                    l = Math.max(i - s, 0),
                    h = Math.min(e + s, n),
                    d = Math.min(i + s, r);
                for (let e = o; e <= h; ++e)
                    for (let t = l; t <= d; ++t) {
                        let i = this.getMapBuild(e, t);
                        if (i) {
                            if (a.includes(i)) continue;
                            a.push(i)
                        }
                    }
                return a
            }
            getAroundMapEquips(e, i, s = 1) {
                let a = [],
                    n = t.mapMgr.height,
                    r = t.mapMgr.width,
                    o = Math.max(e - s, 0),
                    l = Math.max(i - s, 0),
                    h = Math.min(e + s, n),
                    d = Math.min(i + s, r);
                for (let e = o; e <= h; ++e)
                    for (let t = l; t <= d; ++t) {
                        let i = this.getMapEquip(e, t);
                        if (i) {
                            if (a.includes(i)) continue;
                            a.push(i)
                        }
                    }
                return a
            }
            canUpgrade(i, s, a = !0) {
                if (!s.canHandle) return !1;
                if (s.playerUuid && s.playerUuid != i) return !1;
                let n = t.mapMgr.getRoomIdByGridPos(s.x, s.y);
                if (!s || !n) return !1;
                if (s.lv >= this.getBuildMaxLv(s.id)) return !1;
                let r = this.getBuildCfg(s.id, s.lv + 1);
                if (!r) return !1;
                let o = t.playerMgr.getPlayer(i);
                if (a) {
                    let i = 1;
                    if (t.gameMgr.gameMode == e.GameMode.E_Defense && r.buffId && r.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && s.roomId == t.playerMgr.mineRoomId && (i = .9), r.coin && Math.round(r.coin * i) > o.coin) return !1;
                    if (r.energy && Math.round(r.energy * i) > o.energy) return !1
                }
                return !(r.preBuilding && !this.isHaveBuilding(n, r.preBuilding.buildId, r.preBuilding.lv))
            }
            isBedInRoom(e, t, i) {
                for (const s of e.bedModelList)
                    if (t == s.x && i == s.y) return !0;
                return !1
            }
            getEmptyGrids(e) {
                let t = [],
                    i = this.getRoom(e);
                if (!i) return t;
                for (const e of i.grids) {
                    if (this.isBedInRoom(i, e.x, e.y) || i.doorPos.x == e.x && i.doorPos.y == e.y) continue;
                    let s = this.getBuilding(e.x, e.y);
                    s && !s.isDie || t.push(e.clone())
                }
                return t
            }
            repairDoor(e) {
                return !(!e || !e.doorModel) && (e.doorModel.isRepair = !0, fx.EventCenter.I.event(XEventNames.E_Repair_Door, [e]), !0)
            }
            stopRepairDoor(e) {
                e.isRepair = !0
            }
            getOutdoorEmptyGrids(e, i, s = 1) {
                let a = [];
                for (let n = -s; n <= s; n++)
                    for (let r = -s; r <= s; r++) {
                        let s = e + n,
                            o = i + r,
                            l = t.mapMgr.getTiledInfo(s, o);
                        l.walkable && void 0 === l.roomId && a.push(new fx.V2(s, o))
                    }
                return a
            }
            addMapBuild() {
                let e = !1,
                    i = t.mapMgr.mapBuildPoints,
                    s = fx.Utils.randomInArrayEx(i, XRandomUtil.getIntRandom(6, 11));
                for (const i of s) {
                    let s = "",
                        a = [];
                    for (let t = 0; t < this.mapBuildArr.length; t++) e && "fhl_1" == this.mapBuildArr[t] || a.push({
                        o: this.mapBuildArr[t],
                        weight: this.mapBuildWeightArr[t]
                    });
                    for (;
                        "" == s;) s = fx.Utils.takeOneByWeight(a)[1].o;
                    let n, r, o = s.split("_"),
                        l = Number(o[0]),
                        h = new Laya.Image;
                    if (isNaN(l)) r = o[0], "fhl" == o[0] && (e = !0, h.skin = "res/build/specialBuild/fhl.png", h.anchorX = h.anchorY = .5);
                    else {
                        let e = Number(o[1]);
                        n = t.buildingMgr.getBuildCfg(l, e), h.skin = n.icon, h.anchorX = h.anchorY = .5
                    }
                    let d = t.mapMgr.mapPosToGridPos(i.x, i.y),
                        u = h.addComponentIntance(new an);
                    u.init(d, n, r), t.mapMgr.propLayer.addChild(h), h.pos(i.x, i.y), this.mapBuildScripts[d.x] || (this.mapBuildScripts[d.x] = []), this.mapBuildScripts[d.x][d.y] = u, this.mapBuildScriptArr.push(u)
                }
            }
            takeMapBuild(e, i, s) {
                let a = this.getMapBuild(e, i);
                if (!a || a.isUsed) return !1;
                if (a.isUsed = !0, a.owner && !a.owner.destroyed) {
                    if (t.gameMgr.playSoundByNode(a.owner, 126), this.mapBuildScripts[e][i] = null, "fhl" == a.buildName) {
                        if (s.uuid == t.playerMgr.mineUuid) {
                            let e = t.cfg.constant.playerMoveSpeed;
                            e /= t.gameMgr.speedRatio, s.ownerScript.moveSpeed = 4.5 * e
                        }
                        return !1
                    }
                    return s.takeMapBuild = a, fx.EventCenter.I.event(XEventNames.E_MapBuild_take, [a, s.uuid]), !0
                }
            }
            clearMapBuild() {
                this.mapBuildScripts = [], this.mapBuildScriptArr = [], t.mapMgr.propLayer.destroyChildren()
            }
            addMapEquip(e, i) {
                XChoreUtil.playSound(130);
                let s = t.mapMgr.mapEquipPoints,
                    a = XRandomUtil.getIntRandom(0, s.length - 1),
                    n = s[a],
                    r = XRandomUtil.getIntRandom(1, 3);
                n = fx.Utils.randomInArrayEx(n, r);
                for (const i of n) {
                    let s = t.cfg.getHunterEquipCfg(XRandomUtil.getIntRandom(0, 5), e),
                        a = new Laya.Image;
                    a.skin = s.url, a.anchorX = a.anchorY = .5;
                    let n = t.mapMgr.mapPosToGridPos(i.x, i.y),
                        r = a.addComponentIntance(new nn);
                    r.init(n, s), t.mapMgr.propLayer.addChild(a), a.pos(i.x, i.y), this.mapEquipScripts[n.x] || (this.mapEquipScripts[n.x] = []), this.mapEquipScripts[n.x][n.y] = r, this.mapEquipScriptArr.push(r)
                }
                let o = "";
                switch (a) {
                    case 0:
                        o = "北边";
                        break;
                    case 1:
                        o = "南边";
                        break;
                    case 2:
                        o = "西边";
                        break;
                    case 3:
                        o = "东边"
                }
                i ? (XToast.show(`${o}出现${r}件装备，装备60秒后消失`), Laya.timer.once(6e4, this, this.clearAllMapEquip)) : (XToast.show(`${o}出现${r}件装备，装备20秒后消失`), Laya.timer.once(2e4, this, this.clearAllMapEquip))
            }
            clearAllMapEquip() {
                Laya.timer.clear(this, this.clearAllMapEquip), this.mapEquipScripts = [], this.mapEquipScriptArr = [], t.mapMgr.propLayer && t.mapMgr.propLayer.destroyChildren()
            }
            takeMapEquip(e, i) {
                let s = this.getMapEquip(e, i);
                if (!s.owner || s.owner.destroyed) return;
                t.gameMgr.playSoundByNode(s.owner, 126);
                let a = s.equipCfg;
                fx.EventCenter.I.event(XEventNames.E_MapEquip_take, a), this.clearAllMapEquip()
            }
            getSpecialTowerByWeight() {
                let e = [];
                return this.specialTowerCfg.foreach(t => {
                    e.push({
                        o: t,
                        weight: t.weight
                    })
                }), fx.Utils.takeOneByWeight(e)[1].o
            }
            getSpecialTower(e = !1) {
                let t = [];
                this.specialTowerCfg.foreach(e => {
                    t.push(e)
                }), e ? t.splice(0, 5) : 8 * XRandomUtil.getNumberRandom(0, 1) < 6 ? t.splice(5) : t.splice(0, 5);
                let i = [];
                for (const s of t) e ? "罕见" != s.quality && i.push({
                    o: s,
                    weight: s.weight
                }) : i.push({
                    o: s,
                    weight: s.weight
                });
                return fx.Utils.takeOneByWeight(i)[1].o
            }
        }
        ////playerMgr
        class PlayerMgr {
            init(e) {
                this.mineUuid = e.mineUuid, this.hunters = e.hunters, this.defenders = e.defenders, this.angels = [], this.players = this.hunters.concat(this.defenders), this.playerMap = {};
                for (const e of this.players) e.uuid == this.mineUuid && (this.player = e), this.playerMap[e.uuid] = e
            }
            getPlayer(e) {
                return e ? this.playerMap[e] : null
            }
            changePlayerIncomeByUuid(e, t, i) {
                if (!e) return;
                let s = this.getPlayer(e);
                if (!s) return !1;
                if (this.isGoldlessMode && e == this.mineUuid) return !0;
                t = t || 0, i = i || 0;
                let a = Math.max(s.coin + t, 0).toFixed(1),
                    n = Math.max(s.energy + i, 0).toFixed(1);
                return s.coin = Number(a), s.energy = Number(n), !0
            }
            isPlayerBed(e) {
                if (!this.player) return !1;
                if (!e) return this.player.isBed;
                for (const t of this.defenders)
                    if (t.uuid == e) return t.isBed
            }
            get mineRoomId() {
                return this.player.roomId
            }
            addFighter(e) {
                e.spwanPoint = XRandomUtil.getIntRandom(0, t.gameMgr.mapCfg.hunterPointNum - 1), this.hunters.push(e), fx.EventCenter.I.event(XEventNames.E_Create_Fighter, e), this.fighter = e
            }
            addBoxMonster(e, i) {
                e.spwanPoint = XRandomUtil.getIntRandom(0, t.gameMgr.mapCfg.hunterPointNum - 1), this.hunters.push(e), fx.EventCenter.I.event(XEventNames.E_Create_BoxMonster, [e, i])
            }
            addGhost(e) {
                e.spwanPoint = XRandomUtil.getIntRandom(0, t.gameMgr.mapCfg.hunterPointNum - 1), this.hunters.push(e), fx.EventCenter.I.event(XEventNames.E_Create_Ghost, e)
            }
            addAngel() {
                let i = new XPlayerModel;
                i.uuid = this.mineUuid, i.name = this.player.name, i.type = e.PlayerType.E_Defender, i.isAngel = !0, i.skinId = 90003, i.spwanPoint = XRandomUtil.getIntRandom(0, t.gameMgr.mapCfg.defenderPointNum - 1), this.angels.push(i), fx.EventCenter.I.event(XEventNames.E_Create_Angel, i)
            }
            deleteGhost() {
                let e = this.hunters.splice(1);
                for (const t of e) t && t.owner && !t.owner.destroyed && (t.ownerScript.onDead(), t.owner.destroy())
            }
        }
        class XBorrowMoneyMenuScript extends Laya.Script {
            constructor() {
                super(...arguments), this.buildPos = new Laya.Point
            }
            get node() {
                return this.owner
            }
            onAwake() {
                this.img_bg = this.owner.getChildByName("img_bg"), this.box_use = this.owner.getChildByName("box_use"), this.box_hire = this.owner.getChildByName("box_hire"), this.cancel_build = this.owner.getChildByName("cancel_build")
            }
            show(e, i, s) {
                let a = t.mapMgr.getRoomById(s.roomId);
                this.img_bg.height = 290, this.box_hire.visible = !1, this.cancel_build.visible = !1;
                let n = s.ownerScript;
                if (0 == n.curBorrowMoney) this.cancel_build.visible = !0, this.img_bg.height = 440;
                else if (n && n.curHireMoney && n.curHireMoney > 1e3 && n.curFighter && (!n.curHireFighter || n.curHireFighter.isDie) && a.bedModelList && a.bedModelList.length) {
                    a.bedModelList[0].lv >= 8 && (this.img_bg.height = 440, this.box_hire.visible = !0)
                }
                this.node.pos(Laya.stage.width / 2, (Laya.stage.height - this.node.height) / 2 - 100), this.node.width = this.img_bg.width, this.node.height = this.img_bg.height, this.node.visible = !0, this.buildData = s, this.buildPos.x = e, this.buildPos.y = i, this.init()
            }
            hide() {
                this.node.visible = !1
            }
            init() {
                this.initUse(), this.initHire(), this.initCancelBuild()
            }
            initCancelBuild() {
                let e = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv);
                if (!e) return void this.hide();
                let i = this.cancel_build.getChildByName("img_icon_bg"),
                    s = i.getChildByName("img_icon"),
                    a = this.cancel_build.getChildByName("img_upgrade"),
                    n = this.cancel_build.getChildByName("label_name"),
                    r = this.cancel_build.getChildByName("label_describe"),
                    o = a.getChildByName("text_gold"),
                    l = a.getChildByName("text_energy");
                i.skin = "res/PlantingList/img_icon.png";
                let h = e.coin;
                s.skin = "res/build/TearDown.png", n.text = "拆除", r.text = "摧毁当前建筑，并返回\n一定的资源", a.visible = !0, h > 0 && !e.energy ? (o.text = (h / 2).toString(), o.centerY = 0, o.visible = !0, l.visible = !1, h >= 1e5 && (o.text = Math.floor(h / 1e3).toString() + "K")) : !h && e.energy > 0 ? (l.text = (e.energy / 2).toString(), l.centerY = 0, l.visible = !0, o.visible = !1) : h > 0 && e.energy > 0 ? (o.text = (h / 2).toString(), o.centerY = -20, o.visible = !0, h >= 1e5 && (o.text = Math.floor(h / 1e3).toString() + "K"), l.text = (e.energy / 2).toString(), l.centerY = 15, l.visible = !0) : (o.centerY = 0, o.visible = !0, l.visible = !1, o.text = "0"), a.offAll(Laya.Event.CLICK), a.on(Laya.Event.CLICK, this, () => {
                    t.buildingMgr.destroyBuilding(this.buildData.playerUuid, this.buildPos.x, this.buildPos.y, !0), this.hide()
                })
            }
            initHire() {
                let e = this.box_hire.getChildByName("img_icon_bg").getChildByName("img_icon"),
                    t = this.box_hire.getChildByName("img_show"),
                    i = this.box_hire.getChildByName("label_name"),
                    s = this.box_hire.getChildByName("label_describe"),
                    a = this.buildData.ownerScript;
                e.skin = "res/game/img_fighter.png", i.text = "收买", s.text = `收买所需: ${a.curHireMoney}`, t.on(Laya.Event.CLICK, this, this.onClickHire)
            }
            onClickHire() {
                this.buildData.ownerScript.hireFighter();
                this.hide()
            }
            initUse() {
                let e = this.box_use.getChildByName("img_icon_bg").getChildByName("img_icon"),
                    i = this.box_use.getChildByName("img_show"),
                    s = i.getChildByName("img_btn"),
                    a = this.box_use.getChildByName("label_name"),
                    n = this.box_use.getChildByName("label_describe"),
                    r = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv);
                e.skin = r.icon, a.text = r.name, i.off(Laya.Event.CLICK, this, this.onClickRepay), i.off(Laya.Event.CLICK, this, this.onClickBorrow);
                let o = this.buildData.ownerScript;
                o.curAmount ? (n.text = `还款: ${o.curBorrowMoney}`, s.skin = "res/game/lb_repay.png", i.on(Laya.Event.CLICK, this, this.onClickRepay)) : (n.text = `借钱: ${o.getBorrowAmount()}`, s.skin = "res/game/lb_borrow.png", i.on(Laya.Event.CLICK, this, this.onClickBorrow))
            }
            onClickRepay() {
                this.buildData.ownerScript.repayMoney() && (this.lastRepayTime = 10, this.hide())
            }
            onClickBorrow() {
                this.lastRepayTime ? XToast.show("暂停营业，当前无法借钱") : (this.buildData.ownerScript.borrowMoney(), this.hide())
            }
            onUpdate() {
                if (this.lastRepayTime) {
                    let e = this.box_use.getChildByName("img_show").getChildByName("panel_bar"),
                        t = fx.Utils.getFrameDelta();
                    if (this.lastRepayTime -= t, this.lastRepayTime <= 0) this.lastRepayTime = 0, e.width = 168;
                    else {
                        let t = Math.floor(168 * (10 - this.lastRepayTime));
                        e.width = Math.max(.001, t / 10)
                    }
                }
                if (!this.node.visible) return;
                if (!this.buildData) return;
                let e = this.buildData.ownerScript;
                if (e.curAmount) {
                    this.box_use.getChildByName("label_describe").text = `还款: ${e.curBorrowMoney}`, this.box_hire.getChildByName("label_describe").text = `收买所需: ${e.curHireMoney}`
                }
            }
        }
        const dn = {
                1: e.BuildGroup.Build,
                2: e.BuildGroup.Mine,
                3: e.BuildGroup.GodProp,
                4: e.BuildGroup.ZongProp,
                5: e.BuildGroup.Secret,
                6: e.BuildGroup.HideBuild
            },
            un = {
                menu1: ["res/PlantingList/img_basis.png", "res/PlantingList/img_basis_1.png"],
                menu2: ["res/PlantingList/img_senior.png", "res/PlantingList/img_senior_1.png"],
                menu3: ["res/PlantingList/img_rare.png", "res/PlantingList/img_rare_1.png"],
                menu4: ["res/PlantingList/img_legend.png", "res/PlantingList/img_legend_1.png"],
                menu5: ["res/PlantingList/img_god.png", "res/PlantingList/img_god_1.png"]
            };
        class XBuildMenuScript extends Laya.Script {
            constructor() {
                super(...arguments), this.buildPos = new Laya.Point, this.firstNodeInfo = {
                    y: null,
                    length: null,
                    dir: null
                }, this.isMouseDown = !1, this.buildCreateArr = []
            }
            onEnable() {
                this.curMenu = e.BuildGroup.Build, this.list_build = this.owner.getChildByName("list_build"), this.list_hide = this.owner.getChildByName("list_hide"), this.img_bg = this.owner.getChildByName("img_bg"), this.img_hide = this.img_bg.getChildByName("img_hide"), this.select = this.img_bg.getChildByName("select"), this.touchGrid = this.owner.getChildByName("touchGrid"), this.img_guide = this.owner.getChildByName("img_guide"), this.img_hide.on(Laya.Event.CLICK, this, () => {
                    this.curMenu = 6, this.updateMenuUI(), this.initList(dn[6])
                });
                for (let e = 1; e <= this.select.numChildren; e++) {
                    let t = this.select.getChildByName(`menu${e}`);
                    t.offAll(Laya.Event.CLICK), t.on(Laya.Event.CLICK, this, () => {
                        this.curMenu = e, this.updateMenuUI(), this.initList(dn[e])
                    }), (!this.getBuildCfgsByGroup(e) || this.getBuildCfgsByGroup(e).length <= 0) && (t.visible = !1)
                }
                if (t.gameMgr.gameMode == e.GameMode.E_Defense) {
                    let e = t.user.gameInfo.ownPrize.size;
                    this.img_hide.visible = !!e
                } else this.img_hide.visible = !1;
                fx.EventCenter.I.on(XEventNames.E_GuideHand_Show, this, this.guideHandShow), fx.EventCenter.I.on(XEventNames.E_Task_Compelet, this, this.guideHandHide)
            }
            onDestroy() {
                fx.EventCenter.I.off(XEventNames.E_GuideHand_Show, this, this.guideHandShow), fx.EventCenter.I.off(XEventNames.E_Task_Compelet, this, this.guideHandHide)
            }
            guideHandShow(e) {
                if (!this.img_guide.__seq) {
                    let e = this.img_guide.__seq = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                    e.isRepeat = !0, e.run(this.img_guide)
                }
                switch (e) {
                    case 6:
                        this.isShowGuide = !0, this.img_guide.visible = !0, this.img_guide.y = 589;
                        break;
                    case 7:
                        this.isShowGuide = !0, this.img_guide.visible = !0, this.img_guide.y = 193
                }
            }
            guideHandHide() {
                this.isShowGuide = !1, this.img_guide.visible = !1
            }
            get node() {
                return this.owner
            }
            getBuildCfgsByGroup(i) {
                if (i == e.BuildGroup.HideBuild) {
                    this.buildCreateArr[i] = [];
                    for (const [e, s] of t.user.gameInfo.ownPrize) {
                        let s = e.split("_"),
                            a = Number(s[0]),
                            n = Number(s[1]),
                            r = t.buildingMgr.getBuildCfg(a, n);
                        r && this.buildCreateArr[i].push(r)
                    }
                } else if (this.buildCreateArr.length <= 0) {
                    let e = t.cfg.buildCreate.getList();
                    for (const i of e) {
                        this.buildCreateArr[i.group] || (this.buildCreateArr[i.group] = []);
                        let e = t.buildingMgr.getBuildCfg(i.buildId, i.buildLv);
                        e && this.buildCreateArr[i.group].push(e)
                    }
                }
                return this.buildCreateArr[i]
            }
            initList(i) {
                let s = this.getBuildCfgsByGroup(i);
                if (i == e.BuildGroup.HideBuild) {
                    if (0 == s.length) return this.img_hide.visible = !1, this.curMenu = e.BuildGroup.Build, void this.initList(this.curMenu);
                    this.list_build.visible = !1, this.list_hide.visible = !0, this.list_hide.array = s, this.list_hide.renderHandler = new Laya.Handler(this, this.updateHideCell), this.list_hide.vScrollBarSkin = "", this.list_hide.on(Laya.Event.MOUSE_DOWN, this, this.onDownList), this.list_hide.on(Laya.Event.MOUSE_UP, this, this.onUpList), this.list_hide.on(Laya.Event.MOUSE_OUT, this, this.onUpList)
                } else {
                    if (this.list_build.visible = !0, this.list_hide.visible = !1, !s || 0 == s.length) return;
                    if ((t.gameMgr.gameMode != e.GameMode.E_Defense || this.roomId != t.playerMgr.mineRoomId) && i == e.BuildGroup.Build && (s = s.slice(0, 3), t.gameMgr.gameMode == e.GameMode.E_SevenGhost && 2 == t.user.gameInfo.curSevenGhostLv)) {
                        let e = t.cfg.buildCreate.get(999),
                            i = t.buildingMgr.getBuildCfg(e.buildId, e.buildLv);
                        s.push(i)
                    }
                    this.list_build.repeatY = s.length, this.list_build.array = s, this.list_build.height = 148 * s.length, this.list_build.renderHandler = new Laya.Handler(this, this.updateCell)
                }
                this.isShowGuide && (this.img_guide.visible = i == e.BuildGroup.Build), this.img_bg.height = 220 + 592 * .9, this.firstNodeInfo.length || (this.firstNodeInfo.length = s.length);
                let a = t.mapMgr.gridPosToMapPos(this.buildPos.x, this.buildPos.y),
                    n = t.mapMgr.mapPosToStagePos(a.x, a.y);
                n.y += this.touchGrid.height / 2, n.y + this.img_bg.height > Laya.stage.height ? (n.y -= this.img_bg.height + this.touchGrid.height, n.y = Math.clamp(n.y, 0, Laya.stage.height - this.img_bg.height - this.touchGrid.height)) : n.y - this.img_bg.height / 2 < 0 && (n.y = 0);
                let r = fx.Utils.isNotchScreenDevice();
                r && r.notchTop && (n.y -= r.notchTop), n.y < 35 && (n.y = 35), this.node.y = n.y
            }
            onDownList() {
                this.isMouseDown = !0
            }
            onUpList() {
                this.isMouseDown = !1
            }
            updateCell(i) {
                if (!i.dataSource) return void(i.visible = !1);
                let s = i.dataSource,
                    a = i.getChildByName("img_icon_bg"),
                    n = a.getChildByName("img_icon"),
                    r = i.getChildByName("img_upgrade"),
                    o = i.getChildByName("img_lack"),
                    l = i.getChildByName("img_builded"),
                    h = i.getChildByName("img_share"),
                    d = i.getChildByName("label_name"),
                    u = i.getChildByName("label_describe"),
                    g = i.getChildByName("lb_maxCnt"),
                    c = i.getChildByName("count"),
                    p = i.getChildByName("img_discount"),
                    f = i.getChildByName("lb_buffDes"),
                    m = i.getChildByName("img_video");
                if (f.visible = !1, m.visible = !1, a.skin = "res/PlantingList/img_icon.png", t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && t.gameMgr.gameMode == e.GameMode.E_Defense && this.roomId == t.playerMgr.mineRoomId) {
                    let e = "",
                        i = 0;
                    for (let a = 0; a < s.buffId.length; a++) {
                        let n = t.user.gameInfo.getBuffData(s.buffId[a]);
                        if (n) {
                            f.visible = !0;
                            let r = t.cfg.buffCfg.get(s.buffId[a]),
                                o = r.buffDes,
                                l = new RegExp("\\{0\\}", "g");
                            o = o.replace(l, `${r.values[n.lv]}`), e += i ? "，" + o : o, i += 1
                        }
                    }
                    i && (f.text = "庇护：" + e, a.skin = "res/PlantingList/img_icon_2.png")
                }
                let y = r.getChildByName("text_gold"),
                    C = r.getChildByName("text_energy"),
                    _ = (r.getChildByName("mod1"), r.getChildByName("mod2"), r.getChildByName("mod3"), r.getChildByName("mod4"), r.getChildByName("mod5"));
                _ && (_.visible = !1);
                for (let e = 1; e < 5; e++) {
                    let t = r.getChildByName(`mod${e}`);
                    t && (t.visible = !1)
                }
                t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && s.buffIcon && t.user.gameInfo.getBuffData(s.buffId[0]) && this.roomId == t.playerMgr.mineRoomId ? n.skin = s.buffIcon : n.skin = s.icon, d.text = s.name, u.text = s.description;
                let k, b = !1;
                if (d.color = "#73e562", s.maxCnt) {
                    g.visible = !0;
                    let e = this.getBuildNum(s),
                        t = s.maxCnt;
                    6666 == s.buildId && (t = 4), g.text = `可建造${e}/${t}`, b = e == t, e >= 3 && 6666 == s.buildId && (d.color = "#ee82ff", u.text = "随机将炮塔的底座变化成一件法宝,并产生令人惊喜的效果(前提是得有炮塔)")
                } else g.visible = !1;
                let w = (k = t.mapMgr.getRoomById(this.roomId)).players[0];
                w || (w = k);
                let S = !1;
                p.visible = !1;
                let I = s.coin,
                    v = s.energy;
                if (6666 == s.buildId) {
                    let e = t.buildingMgr.magicConsumeArr[t.gameMgr.randomCnt];
                    e && (I = e[0], v = e[1])
                } else t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && s.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && this.roomId == t.playerMgr.mineRoomId && (I = Math.round(.9 * s.coin), v = Math.round(.9 * s.energy), p.visible = !0);
                let M = Math.round(1 * I),
                    x = Math.round(1 * v);
                if (I > 0 && !v ? (y.text = M.toString(), y.centerY = s.type == e.BuildType.skill ? -5 : 0, y.visible = !0, C.visible = !1, S = w.coin >= I) : !I && v > 0 ? (C.text = x.toString(), C.centerY = s.type == e.BuildType.skill ? -5 : 0, C.visible = !0, y.visible = !1, S = w.energy >= v) : I > 0 && v > 0 && (y.text = M.toString(), y.centerY = s.type == e.BuildType.skill ? -30 : -20, y.visible = !0, C.text = x.toString(), C.centerY = s.type == e.BuildType.skill ? 5 : 15, C.visible = !0, S = w.coin >= M && w.energy >= x), r.skin = S ? "res/game/menuBtn.png" : "res/game/menuBtnNo.png", c.visible = !1, r.visible = !0, o.visible = !1, l.visible = !1, h.visible = !1, s.type == e.BuildType.skill || 6666 == s.buildId) {
                    c.visible = !0, c.getChildByName("counttext").text = t.user.gameInfo.getOwnBuildCnt(s.buildId) + "";
                    let e = this.getBuildNum(s);
                    if (b) l.visible = !0, r.visible = !1;
                    else if (t.user.gameInfo.getOwnBuildCnt(s.buildId)) {
                        let t = s.maxCnt;
                        6666 == s.buildId ? (t = 4, r.visible = e < t, 3 == e && (r.visible = !1, h.visible = !0)) : r.visible = !t || e < t, o.visible = !1
                    } else 6666 != s.buildId || t.gameMgr.isAdMagicBox ? o.visible = !0 : m.visible = !0, r.visible = !1
                }
                r.offAll(Laya.Event.CLICK), r.on(Laya.Event.CLICK, this, this.build, [s, !1]), m.offAll(Laya.Event.CLICK), m.on(Laya.Event.CLICK, this, () => {
                    j.I.playVideo("局内获得摇签盒", this, e => {
                        e && (t.gameMgr.isAdMagicBox = !0, t.user.gameInfo.addOwnBuildData(s.buildId, 1), this.hide())
                    })
                }), h.offAll(Laya.Event.CLICK), h.on(Laya.Event.CLICK, this, () => {
                    t.user.gameInfo.getOwnBuildCnt(s.buildId) <= 0 ? XToast.show("快去神秘商店购买吧~") : (XAnalyticsUtil.share("摇签盒"), j.I.share(!1, e => {
                        e && this.build(s, !0)
                    }, "摇签盒"))
                }), t.user.gameInfo.isFirstBuild && t.gameMgr.gameMode == e.GameMode.E_Defense && 6666 != s.buildId ? (i.alpha = .5, i.mouseEnabled = !1) : (i.alpha = 1, i.mouseEnabled = !0)
            }
            updateHideCell(i) {
                if (!i.dataSource) return void(i.visible = !1);
                let s = i.dataSource,
                    a = `${s.buildId}_${s.lv}`,
                    n = t.user.gameInfo.ownPrize.get(a);
                if (!n) return;
                let r, o = i.getChildByName("img_icon_bg").getChildByName("img_icon"),
                    l = i.getChildByName("img_upgrade"),
                    h = i.getChildByName("label_name"),
                    d = i.getChildByName("label_describe"),
                    u = i.getChildByName("lb_maxCnt"),
                    g = i.getChildByName("count");
                if (t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && s.buffIcon && t.user.gameInfo.getBuffData(s.buffId[0]) && this.roomId == t.playerMgr.mineRoomId ? o.skin = s.buffIcon : o.skin = s.icon, h.text = s.name, d.text = s.description, u.visible = !0, s.maxCnt) {
                    let e = 0;
                    for (let i = 0; i < t.playerMgr.player.buildings.length; i++) {
                        if (t.playerMgr.player.buildings[i].id == s.buildId && ++e >= s.maxCnt) {
                            u.text = "可建造1/1", r = !0;
                            break
                        }
                    }
                }
                r || (t.buildingMgr.turntableBuildArr.indexOf(a) >= 0 ? (u.text = "可建造1/1", r = !0) : u.text = "可建造0/1");
                let c = t.playerMgr.player;
                if (!c) return;
                let p = !1;
                p = c.coin >= 50, l.skin = p && !r ? "res/game/menuBtn.png" : "res/game/menuBtnNo.png", g.getChildByName("counttext").text = n.cnt + "", l.visible = !0, l.offAll(Laya.Event.CLICK), l.on(Laya.Event.CLICK, this, this.buildHide, [s])
            }
            updateMenuUI() {
                for (let e = 1; e <= this.select.numChildren; e++) {
                    let i = this.select.getChildByName(`menu${e}`).getChildByName("menuImg"),
                        s = i.getChildAt(0),
                        a = i.getChildAt(1);
                    if (s.visible = !1, i)
                        if (i.skin = "res/PlantingList/img_unselect.png", a.skin = un[`menu${e}`][1], this.curMenu == e) i.skin = "res/PlantingList/img_select.png", a.skin = un[`menu${e}`][0];
                        else if (12 == t.taskMgr.index && 2 == e && (s.visible = !0, !s.__seq)) {
                        s.__seq = !0;
                        let e = (new fx.Sequence).fadeOut(500).fadeIn(500);
                        e.isRepeat = !0, e.run(s)
                    }
                }
            }
            getBuildNum(e) {
                let i = t.mapMgr.getRoomIdByGridPos(this.buildPos.x, this.buildPos.y),
                    s = t.buildingMgr.getRoom(i),
                    a = 0;
                if (s.buildings.length > 0)
                    for (let t = 0; t < s.buildings.length; t++) {
                        const i = s.buildings[t];
                        i && i.id == e.id && (a += 1)
                    }
                return 6666 == e.buildId && (a = t.gameMgr.randomCnt), a
            }
            build(i, s = !1, a = !0) {
                if ((i.type == e.BuildType.skill || 6666 == i.buildId) && !s) {
                    if (!(t.user.gameInfo.getOwnBuildCnt(i.buildId) > 0)) return void XToast.show("快去神秘商店购买吧~"); {
                        let e = this.getBuildNum(i),
                            t = i.maxCnt;
                        if (6666 == i.buildId && (t = 4), e >= t) return void XToast.show("已达到建造上限~")
                    }
                }
                let n = t.buildingMgr.getBuildRet(this.roomId, i.buildId, i.lv);
                switch (s && (n = e.BuildResult.E_OK), n) {
                    case e.BuildResult.E_OK:
                        t.gameMgr.buildCnt++, 
                        t.reporter.useProp(i.name), 
                        t.user.gameInfo.isFirstBuild && 6666 == i.buildId && (t.user.gameInfo.isFirstBuild = !1), XToast.show("建造成功！"), 
                        this.hide(), 
                        a && t.user.gameInfo.useBuildData(i.buildId),
                        XAnalyticsUtil.useLevelItem(`商店道具-${i.name}`), 
                        s ? t.buildingMgr.buildFree(this.playerUuid, i.buildId, this.buildPos.x, this.buildPos.y, 0, i.lv) : t.buildingMgr.build(this.playerUuid, i.buildId, this.buildPos.x, this.buildPos.y, 0, i.lv);
                        break;
                    case e.BuildResult.E_FAILD:
                        XToast.show("建造失败！");
                        break;
                    case e.BuildResult.E_COIN_NOT_ENOUGH:
                        XToast.show("元宝不足，快去升级床铺吧！");
                        break;
                    case e.BuildResult.E_ENERGY_NOT_ENOUGH:
                        XToast.show("灵感不足！");
                        break;
                    case e.BuildResult.E_MAX_CNT:
                        XToast.show("已达到数量上限了！");
                        break;
                    case e.BuildResult.E_MAX_LV:
                        XToast.show("等级已经最高了！");
                        break;
                    case e.BuildResult.E_BED_IS_USED:
                        XToast.show("床铺已经被使用了！");
                        break;
                    case e.BuildResult.E_NOT_HAVE_PREBUILD:
                        {
                            let e = t.buildingMgr.getBuildCfg(i.preBuilding.buildId, i.preBuilding.lv);
                            XToast.show(`请建造前置建筑：${e.name}！`)
                        }
                        break;
                    case e.BuildResult.E_STAGE_NOT_ENOUGH:
                        XToast.show("暂未解锁~")
                }
            }
            buildHide(i) {
                if (i.maxCnt) {
                    let e = 0;
                    for (let s = 0; s < t.playerMgr.player.buildings.length; s++) {
                        if (t.playerMgr.player.buildings[s].id == i.buildId && ++e >= i.maxCnt) return void XToast.show("已达到建造上限~")
                    }
                }
                let s = `${i.buildId}_${i.lv}`;
                if (t.buildingMgr.turntableBuildArr.indexOf(s) >= 0) XToast.show("已达到建造上限~");
                else switch (t.buildingMgr.buildTurntable(this.playerUuid, i.buildId, this.buildPos.x, this.buildPos.y, 0, i.lv)) {
                    case e.BuildResult.E_OK:
                        t.gameMgr.buildCnt++, t.reporter.useProp(i.name), t.user.gameInfo.usePrizeData(s), t.buildingMgr.turntableBuildArr.push(s), this.initList(e.BuildGroup.HideBuild), XToast.show("建造成功！"), this.hide(), t.user.gameInfo.useBuildData(i.buildId), XAnalyticsUtil.useLevelItem(`黑店道具-${i.name}`);
                        break;
                    case e.BuildResult.E_FAILD:
                        XToast.show("建造失败！");
                        break;
                    case e.BuildResult.E_COIN_NOT_ENOUGH:
                        XToast.show("元宝不足，快去升级床铺吧！");
                        break;
                    case e.BuildResult.E_NOT_HAVE_PREBUILD:
                        {
                            let e = t.buildingMgr.getBuildCfg(i.preBuilding.buildId, i.preBuilding.lv);
                            XToast.show(`请建造前置建筑：${e.name}！`)
                        }
                }
            }
            show(i, s) {
                this.buildPos.x = i, this.buildPos.y = s;
                let a = t.mapMgr.getRoomIdByGridPos(i, s);
                this.roomId = a;
                let n = t.mapMgr.getRoomById(a);
                this.playerUuid = n.players[0].uuid, this.node.visible = !0;
                let r = t.mapMgr.gridPosToMapPos(i, s),
                    o = t.mapMgr.mapPosToStagePos(r.x, r.y);
                o.y += this.touchGrid.height / 2, this.firstNodeInfo = {
                    y: null,
                    length: null,
                    dir: null
                }, o.y >= Laya.stage.height / 2 ? this.firstNodeInfo.dir = "bottom" : this.firstNodeInfo.dir = "top", this.updateMenuUI(), this.curMenu == e.BuildGroup.HideBuild && this.roomId != t.playerMgr.mineRoomId && (this.curMenu = e.BuildGroup.Build), this.initList(this.curMenu), o.y + this.img_bg.height > Laya.stage.height && (o.y -= this.img_bg.height + this.touchGrid.height, o.y = Math.clamp(o.y, 0, Laya.stage.height - this.img_bg.height - this.touchGrid.height));
                let l = fx.Utils.isNotchScreenDevice();
                l && l.notchTop && (o.y -= l.notchTop), o.y < 35 && (o.y = 35), this.firstNodeInfo.y = o.y, this.node.pos(Laya.stage.width / 2, o.y), o = t.mapMgr.mapPosToStagePos(r.x, r.y);
                let h = this.node.globalToLocal(new Laya.Point(o.x, o.y), !0);
                this.touchGrid.pos(h.x, h.y)
            }
            hide() {
                this.node.visible = !1
            }
            onUpdate() {
                this.node.visible && (this.isMouseDown || (this.list_build.refresh(), this.list_hide.refresh()))
            }
        }
        class XUpgradeMenuScript extends Laya.Script {
            constructor() {
                super(...arguments), this.buildPos = new Laya.Point, this.isDragPumpkin = !1, this.trigger30034 = !1
            }
            get node() {
                return this.owner
            }
            onAwake() {
                this.img_bg = this.owner.getChildByName("img_bg"), this.up_build = this.owner.getChildByName("up_build"), this.cancel_build = this.owner.getChildByName("cancel_build"), this.specialDoor_build = this.owner.getChildByName("specialDoor_build"), this.show_build = this.owner.getChildByName("show_build"), this.videoUpgrade_build = this.owner.getChildByName("videoUpgrade_build"), this.videoVariant_build = this.owner.getChildByName("videoVariant_build"), this.changeSpecial_build = this.owner.getChildByName("changeSpecial_build"), this.specialTower_build = this.owner.getChildByName("specialTower_build"), this.videoUpgradeShow_build = this.owner.getChildByName("videoUpgradeShow_build"), this.touchGrid = this.owner.getChildByName("touchGrid"), this.touchGrid.visible = !1
            }
            show(i, s, a) {
                this.isSuper = !1, this.isSpecial = !1;
                let n = t.buildingMgr.getBuildCfg(a.id, a.lv);
                switch (this.up_build.y = 185, this.show_build.y = 185, this.changeSpecial_build.visible = !1, a.isSuper ? (this.img_bg.height = 510, this.cancel_build.y = 395, this.up_build.y = 255, this.show_build.y = 255, this.specialTower_build.visible = !1, this.videoUpgrade_build.visible = !1, this.videoVariant_build.visible = !1, this.videoUpgradeShow_build.visible = !0, this.isSuper = !0) : !t.gameMgr.isUsedSuper && n.videoUpgradeIdArr && n.videoUpgradeIdArr.length ? (this.img_bg.height = 580, this.cancel_build.y = 465, this.specialTower_build.visible = !1, this.videoUpgrade_build.visible = !0, this.videoVariant_build.visible = !1, this.videoUpgradeShow_build.visible = !1, this.isSuper = !0) : a.type == e.BuildType.tower && a.isSpecial ? (this.up_build.y = 255, a.canChangeSpecial ? (this.img_bg.height = 650, this.cancel_build.y = 535, this.changeSpecial_build.visible = !0) : (this.img_bg.height = 510, this.cancel_build.y = 395), this.specialTower_build.visible = !0, this.videoUpgrade_build.visible = !1, this.videoVariant_build.visible = !1, this.videoUpgradeShow_build.visible = !1, this.isSpecial = !0) : n.variantDes ? (this.img_bg.height = 580, this.cancel_build.y = 465, this.specialTower_build.visible = !1, this.videoUpgrade_build.visible = !1, this.videoVariant_build.visible = !0, this.videoUpgradeShow_build.visible = !1, this.isVariant = !0) : (this.specialTower_build.visible = !1, this.videoUpgrade_build.visible = !1, this.videoVariant_build.visible = !1, this.videoUpgradeShow_build.visible = !1, this.img_bg.height = 440, this.cancel_build.y = 325), this.node.visible = !0, this.show_build.visible = !1, this.buildData = a, this.buildPos.x = i, this.buildPos.y = s, a.type) {
                    case e.BuildType.bed:
                        t.buildingMgr.getBuildMaxLv(this.buildData.id) == this.buildData.lv ? (XToast.show("该设施已达到最高等级~"), this.hide()) : (this.cancel_build.y = 325, this.initBed());
                        break;
                    case e.BuildType.door:
                        t.buildingMgr.getBuildMaxLv(this.buildData.id) == this.buildData.lv ? (XToast.show("该设施已达到最高等级~"), this.hide()) : (this.cancel_build.y = 325, this.initDoor());
                        break;
                    default:
                        {
                            let e = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv);
                            t.buildingMgr.getBuildMaxLv(this.buildData.id) != this.buildData.lv || e.videoUpgradeBuildId ? this.initOther() : e.coin || e.energy ? this.initMaxLv() : this.initShow()
                        }
                }
                this.buildData.type == e.BuildType.bed && (this.img_bg.height = 290);
                let r = t.mapMgr.gridPosToMapPos(i, s),
                    o = t.mapMgr.mapPosToStagePos(r.x, r.y);
                o.y += this.touchGrid.height / 2, o.y + this.img_bg.height > Laya.stage.height ? o.y -= this.img_bg.height + this.touchGrid.height : o.y - this.img_bg.height / 2 < 0 && (o.y = 0), this.node.pos(Laya.stage.width / 2, (Laya.stage.height - this.node.height) / 2 - 100), this.node.width = this.img_bg.width, this.node.height = this.img_bg.height
            }
            hide() {
                this.node.visible = !1
            }
            upgrade(i = !0) {
                let s = new Laya.Point;
                switch (s.copy(this.buildPos), t.buildingMgr.getUpgradeRet(this.buildData.playerUuid, s.x, s.y, i)) {
                    case e.BuildResult.E_OK:
                        XToast.show("升级成功！"), t.buildingMgr.getBuilding(s.x, s.y) && (t.buildingMgr.upgrade(this.buildData.playerUuid, s.x, s.y, i, 0), !t.taskMgr.compeletAllTask() && t.taskMgr.startTask()), this.hide();
                        break;
                    case e.BuildResult.E_FAILD:
                        XToast.show("升级失败！");
                        break;
                    case e.BuildResult.E_COIN_NOT_ENOUGH:
                        XToast.show("元宝不足，快去升级床吧！");
                        break;
                    case e.BuildResult.E_ENERGY_NOT_ENOUGH:
                        XToast.show("灵感不足！");
                        break;
                    case e.BuildResult.E_MAX_CNT:
                        XToast.show("已达到等级上限了！"), this.hide();
                        break;
                    case e.BuildResult.E_MAX_LV:
                        XToast.show("等级已经最高了！"), this.hide();
                        break;
                    case e.BuildResult.E_BED_IS_USED:
                        XToast.show("床已经被使用了！");
                        break;
                    case e.BuildResult.E_NOT_HAVE_PREBUILD:
                        {
                            let e = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv + 1);
                            if (e.preBuilding) {
                                let i = t.buildingMgr.getBuildCfg(e.preBuilding.buildId, e.preBuilding.lv);
                                XToast.show(`请建造前置建筑：${i.name}！`)
                            }
                        }
                }
            }
            super() {
                let e = new Laya.Point;
                e.copy(this.buildPos), t.buildingMgr.getBuilding(e.x, e.y) && t.buildingMgr.videoSuper(this.buildData.playerUuid, e.x, e.y), this.hide()
            }
            initBed() {
                this.up_build.visible = !0, this.specialDoor_build.visible = !1, this.cancel_build.visible = !1, this.initUpBuild()
            }
            initDoor() {
                this.up_build.visible = !0, this.specialDoor_build.visible = this.buildData.playerUuid == t.playerMgr.mineUuid, this.cancel_build.visible = !1, this.initUpBuild(), this.initDoorSpecialBuild()
            }
            initOther() {
                this.up_build.visible = !0, this.cancel_build.visible = !0, this.specialDoor_build.visible = !1, this.initUpBuild(), this.initCancelBuild(), this.isSuper ? this.buildData.isSuper ? this.initSuperShow() : this.initVideoSuper() : this.isSpecial && (this.initSpecialTower(), this.buildData.canChangeSpecial && this.initChangeSpecial())
            }
            initMaxLv() {
                this.show_build.visible = !0, this.up_build.visible = !1, this.cancel_build.visible = !0, this.specialDoor_build.visible = !1, this.initShow(), this.initCancelBuild(), this.isSuper ? this.buildData.isSuper ? this.initSuperShow() : this.initVideoSuper() : this.isSpecial && (this.initSpecialTower(), this.buildData.canChangeSpecial && this.initChangeSpecial())
            }
            initShow() {
                this.show_build.visible = !0, this.up_build.visible = !1, this.specialDoor_build.visible = !1, this.cancel_build.visible = !0, this.initShowBuild(), this.initCancelBuild(), this.isSuper ? this.buildData.isSuper ? this.initSuperShow() : this.initVideoSuper() : this.isSpecial ? (this.initSpecialTower(), this.buildData.canChangeSpecial && this.initChangeSpecial()) : this.isVariant && this.initVideoVariant()
            }
            initUpBuild(i = !1) {
                let s, a = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv);
                if (a.videoUpgradeBuildId ? s = t.buildingMgr.getBuildCfg(a.videoUpgradeBuildId) : (s = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv + 1), i && (s = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv))), !s) return void this.hide();
                let n = this.up_build.getChildByName("img_bg"),
                    r = this.up_build.getChildByName("img_icon_bg"),
                    o = r.getChildByName("img_icon"),
                    l = this.up_build.getChildByName("img_upgrade"),
                    h = this.up_build.getChildByName("img_freeUpgrade"),
                    d = this.up_build.getChildByName("label_name"),
                    u = this.up_build.getChildByName("label_describe"),
                    g = l.getChildByName("text_gold"),
                    c = l.getChildByName("text_energy"),
                    p = this.up_build.getChildByName("img_discount"),
                    f = this.up_build.getChildByName("img_guide");
                if (f.visible = !1, p.visible = !1, t.gameMgr.isGuide && (f.visible = !0, !f.__seq)) {
                    let e = f.__seq = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                    e.isRepeat = !0, e.run(f)
                }
                if (a.videoUpgradeBuildId ? (h.visible = !0, l.visible = !1) : (h.visible = !1, l.visible = !0, g.getChildByName("gold1").visible = !0), this.buildData.type == e.BuildType.tower && this.buildData.isSpecial ? (r.skin = "res/PlantingList/img_icon_1.png", n.skin = "res/PlantingList/img_item_1.png") : (r.skin = "res/PlantingList/img_icon.png", n.skin = "res/PlantingList/img_item.png"), this.buildData.isSuper) {
                    r.skin = "res/PlantingList/img_icon_1.png", n.skin = "res/PlantingList/img_item_1.png";
                    let e = t.buildingMgr.superBuildCfg.get(this.buildData.superId);
                    o.skin = e.icon, d.text = e.name
                } else r.skin = "res/PlantingList/img_icon.png", n.skin = "res/PlantingList/img_item.png", t.gameMgr.gameMode == e.GameMode.E_Defense && this.buildData.playerUuid == t.playerMgr.mineUuid && s.buffId && s.buffIcon && t.user.gameInfo.getBuffData(s.buffId[0]) ? o.skin = s.buffIcon : o.skin = s.icon, d.text = s.name;
                u.text = s.description, this.img_pumpkin && (this.img_pumpkin.visible = !1);
                let m = this.up_build.getChildByName("lb_buffDes");
                if (m.visible = !1, t.gameMgr.gameMode == e.GameMode.E_Defense && a.buffId) {
                    let e = "",
                        i = 0;
                    for (let s = 0; s < a.buffId.length; s++) {
                        let n = t.user.gameInfo.getBuffData(a.buffId[s]);
                        if (n) {
                            m.visible = !0;
                            let r = t.cfg.buffCfg.get(a.buffId[s]),
                                o = r.buffDes,
                                l = new RegExp("\\{0\\}", "g");
                            o = o.replace(l, `${r.values[n.lv]}`), e += i ? "，" + o : o, i += 1
                        }
                    }
                    i && (m.text = "庇护：" + e, this.buildData.isSuper || (r.skin = "res/PlantingList/img_icon_2.png"))
                }
                if (this.buildData.playerUuid == t.playerMgr.mineUuid || t.user.gameInfo.getBuffData(18))
                    if (i) this.up_build.visible = !1, l.visible = !1;
                    else {
                        let i = t.playerMgr.getPlayer(this.buildData.playerUuid);
                        if (!i) return;
                        let a = !1,
                            n = s.coin,
                            r = s.energy;
                        t.gameMgr.gameMode == e.GameMode.E_Defense && s.buffId && s.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (n = Math.round(.9 * s.coin), r = Math.round(.9 * s.energy), p.visible = !0), s.coin >= 0 && !s.energy ? (g.text = Math.floor(n).toString(), g.centerY = 0, g.visible = !0, c.visible = !1, n >= 1e6 && (g.text = Math.floor(n / 1e3).toString() + "K"), a = i.coin >= n) : !s.coin && s.energy >= 0 ? (c.text = r.toString(), c.centerY = 0, c.visible = !0, g.visible = !1, a = i.energy >= r) : s.coin >= 0 && s.energy >= 0 && (g.text = n.toString(), g.centerY = -20, g.visible = !0, n >= 1e5 && (g.text = Math.floor(n / 1e3).toString() + "K"), c.text = r.toString(), c.centerY = 15, c.visible = !0, a = i.coin >= n && i.energy >= r), l.skin = a ? "res/game/menuBtn.png" : "res/game/menuBtnNo.png", l.offAll(Laya.Event.CLICK), l.visible && l.on(Laya.Event.CLICK, this, this.upgrade, [!0]), h.offAll(Laya.Event.CLICK), h.visible && h.on(Laya.Event.CLICK, this, this.videoUpgrade)
                    } else l.visible = !1;
                g.centerX = 22
            }
            initCancelBuild() {
                let i = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv);
                if (!i) return void this.hide();
                let s = this.cancel_build.getChildByName("img_icon_bg"),
                    a = s.getChildByName("img_icon"),
                    n = this.cancel_build.getChildByName("img_upgrade"),
                    r = this.cancel_build.getChildByName("img_show"),
                    o = this.cancel_build.getChildByName("label_name"),
                    l = this.cancel_build.getChildByName("label_describe"),
                    h = n.getChildByName("text_gold"),
                    d = n.getChildByName("text_energy");
                s.skin = "res/PlantingList/img_icon.png";
                let u = i.coin;
                a.skin = "res/build/TearDown.png", o.text = "拆除", l.text = "摧毁当前建筑，并返回\n一定的资源";
                let g = t.user.gameInfo.getBuffData(28);
                if (!u && !i.energy) {
                    if (!g || t.gameMgr.gameMode != e.GameMode.E_Defense) return r.visible = !0, void(n.visible = !1); {
                        s.skin = "res/PlantingList/img_icon_2.png";
                        let e = t.cfg.buffCfg.get(28);
                        o.text = e.name, l.text = e.des
                    }
                }
                if (n.visible = !0, r.visible = !1, u > 0 && !i.energy) h.text = (u / 2).toString(), this.buildData.isInit && t.gameMgr.gameMode == e.GameMode.E_SevenGhost && (h.text = "1"), h.centerY = 0, h.visible = !0, d.visible = !1, u >= 1e5 && (h.text = Math.floor(u / 1e3).toString() + "K");
                else if (!u && i.energy > 0) {
                    if (d.text = (i.energy / 2).toString(), this.buildData.isInit && (t.gameMgr.gameMode != e.GameMode.E_Defense || 1 == t.gameMgr.difficultABTest)) {
                        let e = t.user.gameInfo.getBuffData(27);
                        if (e) {
                            let s = t.cfg.buffCfg.get(27);
                            d.text = Math.floor(i.energy * (s.values[e.lv] / 100)).toString()
                        } else d.text = "1"
                    }
                    d.centerY = 0, d.visible = !0, h.visible = !1
                } else u > 0 && i.energy > 0 ? (h.text = (u / 2).toString(), h.centerY = -20, h.visible = !0, u >= 1e5 && (h.text = Math.floor(u / 1e3).toString() + "K"), d.text = (i.energy / 2).toString(), d.centerY = 15, d.visible = !0) : (h.centerY = 0, h.visible = !0, d.visible = !1, h.text = "0");
                n.offAll(Laya.Event.CLICK), n.on(Laya.Event.CLICK, this, () => {
                    t.buildingMgr.destroyBuilding(this.buildData.playerUuid, this.buildPos.x, this.buildPos.y, !0), this.hide()
                })
            }
            initDoorSpecialBuild() {
                let e = t.buildingMgr.getBuildCfg(2999);
                if (!e) return;
                let i = this.specialDoor_build.getChildByName("img_icon_bg").getChildByName("img_icon"),
                    s = this.specialDoor_build.getChildByName("img_upgrade"),
                    a = this.specialDoor_build.getChildByName("label_name"),
                    n = this.specialDoor_build.getChildByName("label_describe");
                s.visible = !0, i.skin = e.icon, a.text = e.name, n.text = e.description, t.playerMgr.getPlayer(this.buildData.playerUuid) && (t.gameMgr.isfreeUpDoor ? s.visible = !1 : s.visible = !0, s.offAll(Laya.Event.CLICK), t.user.gameInfo.getOwnBuildCnt(2999) ? (s.skin = "res/game/menuBtn_free.png", s.on(Laya.Event.CLICK, this, this.freeUpUpgrade)) : (s.skin = "res/game/menuBtn_ad.png", s.on(Laya.Event.CLICK, this, this.videoUpgradeDoor)))
            }
            initShowBuild() {
                let i = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv),
                    s = this.show_build.getChildByName("img_bg"),
                    a = this.show_build.getChildByName("img_icon_bg"),
                    n = a.getChildByName("img_icon"),
                    r = this.show_build.getChildByName("label_name"),
                    o = this.show_build.getChildByName("label_describe");
                if (this.buildData.isSuper) {
                    a.skin = "res/PlantingList/img_icon_1.png", s.skin = "res/PlantingList/img_item_1.png";
                    let e = t.buildingMgr.superBuildCfg.get(this.buildData.superId);
                    n.skin = e.icon, r.text = e.name
                } else a.skin = "res/PlantingList/img_icon.png", s.skin = "res/PlantingList/img_item.png", t.gameMgr.gameMode == e.GameMode.E_Defense && i.buffId && i.buffIcon && t.user.gameInfo.getBuffData(i.buffId[0]) ? n.skin = i.buffIcon : n.skin = i.icon, r.text = i.name;
                o.text = i.description;
                let l = this.show_build.getChildByName("lb_buffDes");
                if (l.visible = !1, t.gameMgr.gameMode == e.GameMode.E_Defense && i.buffId) {
                    let e = "",
                        s = 0;
                    for (let a = 0; a < i.buffId.length; a++) {
                        let n = t.user.gameInfo.getBuffData(i.buffId[a]);
                        if (n) {
                            l.visible = !0;
                            let r = t.cfg.buffCfg.get(i.buffId[a]),
                                o = r.buffDes,
                                h = new RegExp("\\{0\\}", "g");
                            o = o.replace(h, `${r.values[n.lv]}`), e += s ? "，" + o : o, s += 1
                        }
                    }
                    s && (l.text = "庇护：" + e, this.buildData.isSuper || (a.skin = "res/PlantingList/img_icon_2.png"))
                }
            }
            initVideoSuper() {
                let e = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv),
                    i = this.videoUpgrade_build.getChildByName("img_icon_bg"),
                    s = i.getChildByName("img_icon"),
                    a = this.videoUpgrade_build.getChildByName("label_name"),
                    n = this.videoUpgrade_build.getChildByName("label_describe"),
                    r = this.videoUpgrade_build.getChildByName("label_des"),
                    o = this.videoUpgrade_build.getChildByName("img_upgrade");
                if (o.offAll(Laya.Event.CLICK), this.buildData.superId) {
                    o.visible = !1, i.visible = !1, r.visible = !0;
                    let e = t.buildingMgr.superBuildCfg.get(this.buildData.superId);
                    n.text = e.description, a.text = e.name
                } else {
                    o.visible = !0, i.visible = !0, r.visible = !1;
                    let l = t.buildingMgr.superBuildCfg.get(e.videoUpgradeIdArr[0]);
                    n.text = l.upDes, s.skin = l.icon, a.text = l.name, o.on(Laya.Event.CLICK, this, this.videoSuper)
                }
            }
            initVideoVariant() {
                let e = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv),
                    i = this.videoVariant_build.getChildByName("img_icon_bg").getChildByName("img_icon"),
                    s = this.videoVariant_build.getChildByName("label_name"),
                    a = this.videoVariant_build.getChildByName("label_describe"),
                    n = this.videoVariant_build.getChildByName("img_upgrade");
                a.text = e.variantDes, i.skin = e.icon, s.text = e.name, n.offAll(Laya.Event.CLICK), n.on(Laya.Event.CLICK, this, this.videoVariant)
            }
            initChangeSpecial() {
                t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv), this.changeSpecial_build.getChildByName("img_icon_bg").getChildByName("img_icon");
                let e = this.changeSpecial_build.getChildByName("img_upgrade");
                e.offAll(Laya.Event.CLICK), e.on(Laya.Event.CLICK, this, this.videoChangeSpecial)
            }
            initSpecialTower() {
                let e = this.buildData,
                    i = t.buildingMgr.specialTowerCfg.get(e.specialId),
                    s = (this.specialTower_build.getChildByName("label_name"), this.specialTower_build.getChildByName("label_describe")),
                    a = this.specialTower_build.getChildByName("img_quality"),
                    n = "";
                switch (i.quality) {
                    case "罕见":
                        n = "res/game/img_q1.png";
                        break;
                    case "传说":
                        n = "res/game/img_q2.png";
                        break;
                    case "神话":
                        n = "res/game/img_q3.png"
                }
                a.skin = n, s.text = i.des
            }
            initSuperShow() {
                let e = this.buildData,
                    i = t.buildingMgr.superBuildCfg.get(e.superId);
                this.videoUpgradeShow_build.getChildByName("label_describe").text = i.description
            }
            freeUpUpgrade() {
                t.user.gameInfo.useBuildData(2999), XAnalyticsUtil.useLevelItem("学校技工"), this.upgrade(!1)
            }
            videoUpgrade() {
                let e = this.buildData,
                    i = t.buildingMgr.getBuildCfg(e.id, e.lv),
                    s = t.buildingMgr.getBuildCfg(i.videoUpgradeBuildId);
                if (s.maxCnt) {
                    let e = t.playerMgr.getPlayer(this.buildData.playerUuid),
                        i = 0,
                        a = !1;
                    for (const t of e.buildings)
                        if (t.id == s.buildId && ++i == s.maxCnt) {
                            a = !0;
                            break
                        }
                    if (a) return void XToast.show("不能再建造了")
                }
                j.I.playVideo("视频升级", this, s => {
                    s && (t.gameMgr.adCnt++, t.buildingMgr.destroyBuilding(e.playerUuid, e.x, e.y, !1), t.buildingMgr.buildFree(e.playerUuid, i.videoUpgradeBuildId, e.x, e.y), this.hide(), t.gameMgr.isUsedSuper = !0)
                })
            }
            videoUpgradeDoor() {
                j.I.playVideo("门升级", this, e => {
                    e && (t.gameMgr.adCnt++, t.gameMgr.isfreeUpDoor = !0, this.upgrade(!1), XAnalyticsUtil.useLevelItem("学校技工"))
                })
            }
            videoSuper() {
                j.I.playVideo("特殊升级", this, e => {
                    e && (t.gameMgr.adCnt++, t.gameMgr.isUsedSuper = !0, this.super())
                })
            }
            videoChangeSpecial() {
                j.I.playVideo("重新附魔", this, e => {
                    if (e) {
                        t.gameMgr.adCnt++;
                        let e = this.buildData;
                        e.canChangeSpecial = !1, e.specialId = t.buildingMgr.getSpecialTower(!0).id, t.buildingMgr.destroyBuilding(this.buildData.playerUuid, this.buildData.x, this.buildData.y, !1), t.buildingMgr.buildSpecial(this.buildData), this.hide()
                    }
                })
            }
            videoVariant() {
                j.I.playVideo("异种变化", this, e => {
                    if (e) {
                        let e = this.buildData,
                            i = t.buildingMgr.getBuildCfg(e.id, e.lv),
                            s = fx.Utils.randomInArray(i.variantList);
                        t.gameMgr.adCnt++, t.buildingMgr.destroyBuilding(e.playerUuid, e.x, e.y, !1), t.buildingMgr.buildFree(e.playerUuid, s.id, e.x, e.y), this.hide()
                    }
                })
            }
            onUpdate() {
                if (!this.node.visible) return;
                if (!this.buildData) return;
                let i = this.up_build.getChildByName("img_upgrade"),
                    s = t.playerMgr.getPlayer(this.buildData.playerUuid);
                if (!s) return;
                let a = t.buildingMgr.getBuildCfg(this.buildData.id, this.buildData.lv + 1),
                    n = a.coin,
                    r = a.energy;
                t.gameMgr.gameMode == e.GameMode.E_Defense && a.buffId && a.buffId.includes(1) && t.user.gameInfo.getBuffData(1) && (n = Math.round(.9 * a.coin), r = Math.round(.9 * a.energy));
                let o = s.coin >= n && s.energy >= r;
                i.skin = o ? "res/game/menuBtn.png" : "res/game/menuBtnNo.png"
            }
        }
        class GameUI {
            constructor() {
                this.operateGrid = new fx.V2, this.tipsList = [], this.iconList = [], this.seqArray = []
            }
            init(e, t) {
                this.gameNode = e, this.label_cd = t.getChildByName("label_cd"), this.label_cd.visible = !1, this.box_angelRevive = t.getChildByName("box_angelRevive"), this.lb_angelRevive = this.box_angelRevive.getChildByName("lb_angelRevive"), this.operateBtn = fx.Utils.createPrefab(T.Prefab_OperateBtn), this.operateImg = this.operateBtn.getChildByName("imgBtn"), this.gameNode.addChild(this.operateBtn), this.operateBtn.visible = !1;
                let i = fx.Utils.createPrefab(T.Prefab_BuildMenu);
                this.gameNode.parent.addChild(i), this.buildMenu = i.getComponent(XBuildMenuScript), i.visible = !1;
                let s = fx.Utils.createPrefab(T.Prefab_UpgradeMenu);
                this.gameNode.parent.addChild(s), this.upgradeMenu = s.getComponent(XUpgradeMenuScript), s.visible = !1;
                let a = fx.Utils.createPrefab(T.Prefab_BorrowMoney);
                this.gameNode.parent.addChild(a), this.borrowMoneyMenu = a.getComponent(XBorrowMoneyMenuScript), a.visible = !1, this.tipsList = [], this.iconList = [], t.getChildByName("btn_back").on(Laya.Event.CLICK, this, this.onClickBack), t.getChildByName("btn_setting").on(Laya.Event.CLICK, this, this.onClickSetting)
            }
            onClickBack() {
                t.ui.open(l.ExitView)
            }
            onClickSetting() {
                t.ui.open(l.SettingDialog, {
                    isInGame: !0
                })
            }
            startGameCd() {
                let e = t.cfg.constant.startTime;
                this.label_cd.visible = !0, this.label_cd.value = e.toString(), Laya.timer.loop(1e3, this, this.countdownFunc)
            }
            countdownFunc() {
                if (this.gameNode.destroyed) return void Laya.timer.clear(this, this.countdownFunc);
                let i = Number(this.label_cd.value);
                i -= 1, this.label_cd.value = i.toString(), i <= 10 && XChoreUtil.playSound(116), i <= 0 && (this.gameNode.destroyed || (XChoreUtil.playSound(109), Laya.timer.clear(this, this.countdownFunc), this.label_cd.visible = !1, t.gameMgr.gameMode == e.GameMode.E_Defense ? Laya.timer.once(5e3, this, () => {
                    t.buildingMgr.clearMapBuild()
                }) : t.gameMgr.gameMode == e.GameMode.E_AngelOrGhost ? XToast.show("木头人开始攻击~") : XToast.show("噬魂者开始攻击~"), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_START)))
            }
            startAngelRevive() {
                this.box_angelRevive.visible = !0, this.lb_angelRevive.value = "10", Laya.timer.loop(1e3, this, this.countdownRevive)
            }
            countdownRevive() {
                if (this.gameNode.destroyed || t.gameMgr.gameStatus == e.GameStatus.E_GAME_FINISH) return void Laya.timer.clear(this, this.countdownRevive);
                let i = Number(this.lb_angelRevive.value);
                i -= 1, this.lb_angelRevive.value = i.toString(), i <= 0 && (this.gameNode.destroyed || (Laya.timer.clear(this, this.countdownRevive), this.box_angelRevive.visible = !1, t.playerMgr.addAngel()))
            }
            showUpgradeMeun(e, t, i) {
                this.hideAllMenu(), this.upgradeMenu.show(e, t, i)
            }
            hideUpgradeMenu() {
                this.upgradeMenu && this.upgradeMenu.hide()
            }
            isShowingUpgradeMenu() {
                return this.upgradeMenu.owner.visible
            }
            showBuildMeun(e, t) {
                this.hideAllMenu(), this.buildMenu.show(e, t)
            }
            hideBuildMenu() {
                this.buildMenu && this.buildMenu.hide()
            }
            isShowingBuildMenu() {
                return this.buildMenu.owner.visible
            }
            showBorrowMoneyMeun(e, t, i) {
                this.hideAllMenu(), this.borrowMoneyMenu.show(e, t, i)
            }
            hideBorrowMoneyMenu() {
                this.borrowMoneyMenu && this.borrowMoneyMenu.hide()
            }
            isBorrowMoneyMenu() {
                return this.borrowMoneyMenu.owner.visible
            }
            hideAllMenu() {
                this.hideUpgradeMenu(), this.hideBuildMenu(), this.hideBorrowMoneyMenu()
            }
            showDoorBtn(t, i, s) {
                this.operateBtn.visible = !0, this.operateImg.skin = s ? "res/game/img_kaimen.png" : "res/game/img_guanmen.png", this.operateBtn.offAll(Laya.Event.CLICK), this.operateBtn.on(Laya.Event.CLICK, this, this.onClickOperateBtn, [e.BuildType.door, t, i, s]), this.operateGrid.setValue(t, i)
            }
            showBedBtn(i, s) {
                if (t.gameMgr.isGuide) {
                    if (this.img_hand) this.img_hand.visible = !0;
                    else {
                        this.img_hand = new Laya.Image("res/game/guide/finger1.png"), this.img_hand.pivot(26, 12), this.img_hand.scale(.5, .5), this.operateBtn.addChild(this.img_hand), this.img_hand.pos(70, 40);
                        let e = (new fx.Sequence).scaleOut(.4, 500).scaleOut(.5, 500);
                        e.isRepeat = !0, e.run(this.img_hand)
                    }
                    fx.EventCenter.I.event(XEventNames.E_GuideArrow_Visible, !1)
                }
                let a = t.playerMgr.player;
                this.operateBtn.visible = !0, this.operateImg.skin = this.switchOperateImg(a.skinId), this.operateBtn.offAll(Laya.Event.CLICK), this.operateBtn.on(Laya.Event.CLICK, this, this.onClickOperateBtn, [e.BuildType.bed, i, s, null]), this.operateGrid.setValue(i, s)
            }
            showMapBuildBtn(e, t) {
                this.operateBtn.visible = !0, this.operateImg.skin = "res/game/img_shiqu.png", this.operateBtn.offAll(Laya.Event.CLICK), this.operateBtn.on(Laya.Event.CLICK, this, this.onClickShiqu, [e, t]), this.operateGrid.setValue(e, t)
            }
            switchOperateImg(e) {
                let t;
                return t = "res/game/img_shangchuang.png"
            }
            onClickOperateBtn(i, s, a, n, r) {
                if (r.stopPropagation(), this.hideOperateBtn(), i == e.BuildType.door) n ? (XChoreUtil.playSound(123), t.buildingMgr.openDoorByGridPos(s, a)) : (XChoreUtil.playSound(122), t.buildingMgr.closeDoorByGridPos(s, a));
                else if (i == e.BuildType.bed) {
                    0 == t.gameMgr.upBed(s, a, t.playerMgr.mineUuid) && t.mapMgr.lowLayer.destroyChildren()
                }
            }
            onClickShiqu(e, i, s) {
                s.stopPropagation(), this.hideOperateBtn();
                let a = t.buildingMgr.getMapBuild(e, i);
                t.playerMgr.player.ownerScript.takeMapBuild(a)
            }
            hideOperateBtn() {
                fx.EventCenter.I.event(XEventNames.E_GuideArrow_Visible, !0), this.img_hand && (this.img_hand.visible = !1), this.operateBtn.visible && (this.operateBtn.visible = !1)
            }
            update() {
                this.updateOperateBtn()
            }
            updateOperateBtn() {
                if (!this.operateBtn.visible) return;
                let e = t.mapMgr.gridPosToMapPos(this.operateGrid.x, this.operateGrid.y),
                    i = t.mapMgr.mapPosToStagePos(e.x, e.y);
                this.operateBtn.pos(i.x, i.y)
            }
            getTokenIcon(t) {
                return t == e.TokenType.E_Coin ? "res/game/img_coin.png" : t == e.TokenType.E_Energy ? "res/game/img_energy.png" : void 0
            }
            valueTips(e, i, s, a, n = 0, r = !0, o = !1) {
                if (!t.mapMgr.isInStageByMapPos(s, a)) return;
                let l;
                (l = this.tipsList.length > 0 ? this.tipsList.pop() : fx.Utils.createPrefab(T.Prefab_IconTips)).visible = !0, t.mapMgr.mapNode.addChild(l);
                let h = l.getChildByName("labelValue");
                if (i > 999) {
                    const e = i / 1e3;
                    h.value = `+${Math.floor(e)}k`
                } else h.value = i >= 0 ? `+${i}` : `${i}`;
                let d = h.getChildByName("imgToken");
                if (!d) return;
                if (d.visible = r, d.skin = this.getTokenIcon(e), o && (Number.isInteger(i) ? h.value = `${i}` : h.value = `${i.toFixed(1)}`, i > 999)) {
                    const e = i / 1e3;
                    h.value = `${Math.floor(e)}k`
                }
                let u = h.getChildByName("extraImg");
                if (n) {
                    u.visible = !0;
                    let t = u.getChildByName("extraValue");
                    u.skin = this.getTokenIcon(e), t.value = `+${n}`
                } else u.visible = !1;
                l.pos(s, a), l.alpha = 1, Laya.Tween.clearAll(l);
                let g = new fx.Sequence;
                this.seqArray.push(g), g.pos(s, a - 50, 1e3), g.fadeOut(100), g.exec(Laya.Handler.create(this, this.recoverTips, [l])), g.run(l)
            }
            recoverTips(e) {
                -1 == this.tipsList.indexOf(e) && (this.tipsList.push(e), e.visible = !1)
            }
            iconTips(e, i, s, a) {
                let n;
                if ((n = this.iconList.length > 0 ? this.iconList.pop() : fx.Utils.createPrefab(T.Prefab_LabelTips)).visible = !0, a) a.addChild(n);
                else {
                    if (!t.mapMgr.isInStageByMapPos(e, i)) return;
                    t.mapMgr.mapNode.addChild(n)
                }
                let r = n.getChildByName("imgToken");
                r.skin = s, r.scale(.75, .75), n.pos(e, i), n.alpha = 1, Laya.Tween.clearAll(n);
                let o = new fx.Sequence;
                this.seqArray.push(o), o.pos(e, i - 50, 1e3), o.fadeOut(100), o.exec(Laya.Handler.create(this, this.recoverlb, [n])), o.run(n)
            }
            recoverlb(e) {
                -1 == this.iconList.indexOf(e) && (this.iconList.push(e), e.visible = !1)
            }
        }
        class BulletMgr {
            init(e) {
                this.bulletLayer = e, this.bulletMaps = {}
            }
            createBulletNode(e, t) {
                let i;
                if (this.bulletMaps[e] && this.bulletMaps[e] && this.bulletMaps[e].length > 0) i = this.bulletMaps[e].pop();
                else if ((i = new Laya.Box).size(1, 1), i.name = "box_bullet", -1 == e.indexOf(".atlas")) {
                    let s = new Laya.Image(e);
                    if (s.name = "img_bullet", s.anchorX = s.anchorY = .5, t) {
                        s.size(90, 90);
                        let e = new Laya.Label;
                        e.centerX = e.centerY = 0, e.bold = !0, e.font = "Microsoft YaHei", e.fontSize = 35, s.addChild(e), e.text = `${t[0]}`
                    }
                    i.addChild(s)
                }
                if (t) {
                    i.getChildAt(0).getChildAt(0).text = fx.Utils.randomInArray(t)
                }
                return i.visible = !0, this.bulletLayer.addChild(i), i
            }
            recoverBulletNode(e, t) {
                this.bulletMaps[e] || (this.bulletMaps[e] = []), this.bulletMaps[e].includes(t) || (this.bulletMaps[e].push(t), t.visible = !1)
            }
        }
        class GuildMgr {
            constructor() {
                this.stepIndex = 0
            }
            init(e) {
                this.node = e
            }
            localCenterToGlobal(e, t) {
                return (t = t || new Laya.Point).x = .5 * e.width, t.y = .5 * e.height, e.localToGlobal(t), t
            }
            show(e) {
                t.gameMgr.isPause = !0, this.stepIndex = e.step, this.node.visible = !0, this.node.alpha = 1, this.node.width = Laya.stage.width, this.node.height = Laya.stage.height, this.clickMask || (this.clickMask = new Laya.Image("res/mask.png"), this.clickMask.alpha = 0, this.clickMask.anchorX = this.clickMask.anchorY = .5, this.node.addChild(this.clickMask));
                let i, s = this.node.getChildByName("img_mask"),
                    a = s.getChildAt(0);
                a.anchorX = a.anchorY = .5, a.blendMode = "destination-out", s.cacheAs = "bitmap", e.clickNode ? i = this.localCenterToGlobal(e.clickNode) : e.clickPos && (i = new Laya.Point(e.clickPos.x, e.clickPos.y)), i ? (s.globalToLocal(i), a.pos(i.x, i.y), a.size(e.clickWidth, e.clickHeight)) : a.size(1, 1), this.clickMask.offAll(Laya.Event.CLICK), this.clickMask.on(Laya.Event.CLICK, this, t => {
                    this.disableClick(), e.clickCb ? e.clickCb() : e.clickNode.event(Laya.Event.CLICK, t)
                }), e.clickFull ? (this.clickMask.pos(this.node.width / 2, this.node.height / 2), this.clickMask.size(this.node.width, this.node.height)) : (this.clickMask.pos(i.x, i.y), this.clickMask.size(e.clickWidth, e.clickHeight));
                e.tipsOffset;
                let n = this.node.getChildByName("box_dialog");
                if (e.tips) {
                    n.visible = !0, n.seekChildByName("label_tips").text = e.tips
                } else n.visible = !1;
                this.hand || (this.hand = fx.Utils.createPrefab(T.Prefab_GuideFinger), this.node.addChild(this.hand)), e.hideHand ? this.hand.visible = !1 : (this.hand.visible = !0, this.hand.pos(i.x, i.y + .25 * e.clickHeight), XChoreUtil.playUIFrameAni(this.hand, "ani1", !0))
            }
            disableClick() {
                this.clickMask && this.clickMask.offAll(Laya.Event.CLICK)
            }
            hide() {
                this.node.visible = !1
            }
        }
        class yn {
            constructor(e) {
                this.content = new Map, this.parent = e
            }
            var (e) {
                this.content.set(e, void 0)
            }
            load(e) {
                if (this.content.has(e)) return this.content.get(e);
                if (this.parent) return this.parent.load(e);
                throw new Error(`Variable ${e} not found`)
            }
            out(e, t) {
                if (this.content.has(e)) return this.content.set(e, t), t;
                if (this.parent) return this.parent.out(e, t);
                throw new Error(`Variable ${e} not found`)
            }
        }
        class Cn extends yn {
            constructor(e) {
                super(), this.global = e
            }
            load(e) {
                try {
                    return super.load(e)
                } catch (e) {}
                if (this.global.hasOwnProperty(e)) return this.global[e];
                throw new Error(`Variable ${e} not found`)
            }
            out(e, t) {
                try {
                    return super.out(e, t)
                } catch (e) {}
                this.global[e] = t
            }
        }
        var _n, kn;
        e.OpCode = void 0, (_n = e.OpCode || (e.OpCode = {}))[_n.NOP = 0] = "NOP", _n[_n.UNDEF = 1] = "UNDEF", _n[_n.NULL = 2] = "NULL", _n[_n.OBJ = 3] = "OBJ", _n[_n.ARR = 4] = "ARR", _n[_n.TRUE = 5] = "TRUE", _n[_n.FALSE = 6] = "FALSE", _n[_n.NUM = 7] = "NUM", _n[_n.ADDR = 8] = "ADDR", _n[_n.STR = 9] = "STR", _n[_n.POP = 10] = "POP", _n[_n.TOP = 13] = "TOP", _n[_n.TOP2 = 14] = "TOP2", _n[_n.VAR = 16] = "VAR", _n[_n.LOAD = 17] = "LOAD", _n[_n.OUT = 18] = "OUT", _n[_n.JUMP = 32] = "JUMP", _n[_n.JUMPIF = 33] = "JUMPIF", _n[_n.JUMPNOT = 34] = "JUMPNOT", _n[_n.FUNC = 48] = "FUNC", _n[_n.CALL = 49] = "CALL", _n[_n.NEW = 50] = "NEW", _n[_n.RET = 51] = "RET", _n[_n.GET = 64] = "GET", _n[_n.SET = 65] = "SET", _n[_n.IN = 67] = "IN", _n[_n.DELETE = 68] = "DELETE", _n[_n.EQ = 80] = "EQ", _n[_n.NEQ = 81] = "NEQ", _n[_n.SEQ = 82] = "SEQ", _n[_n.SNEQ = 83] = "SNEQ", _n[_n.LT = 84] = "LT", _n[_n.LTE = 85] = "LTE", _n[_n.GT = 86] = "GT", _n[_n.GTE = 87] = "GTE", _n[_n.ADD = 96] = "ADD", _n[_n.SUB = 97] = "SUB", _n[_n.MUL = 98] = "MUL", _n[_n.EXP = 99] = "EXP", _n[_n.DIV = 100] = "DIV", _n[_n.MOD = 101] = "MOD", _n[_n.BNOT = 112] = "BNOT", _n[_n.BOR = 113] = "BOR", _n[_n.BXOR = 114] = "BXOR", _n[_n.BAND = 115] = "BAND", _n[_n.LSHIFT = 115] = "LSHIFT", _n[_n.RSHIFT = 117] = "RSHIFT", _n[_n.URSHIFT = 118] = "URSHIFT", _n[_n.OR = 128] = "OR", _n[_n.AND = 129] = "AND", _n[_n.NOT = 130] = "NOT", _n[_n.INSOF = 144] = "INSOF", _n[_n.TYPEOF = 145] = "TYPEOF";
        class bn {
            constructor(e, t, i = 0, s = []) {
                this.scope = e, this.codes = t, this.pc = i, this.stack = s
            }
            loadAddress() {
                const e = new DataView(new ArrayBuffer(8));
                for (let t = 0; t < 4; t++) e.setUint8(t, this.codes[this.pc + t]);
                this.pc += 4, this.stack.push(e.getUint32(0))
            }
            loadNumber() {
                const e = new DataView(new ArrayBuffer(8));
                for (let t = 0; t < 8; t++) e.setUint8(t, this.codes[this.pc + t]);
                this.pc += 8, this.stack.push(e.getFloat64(0))
            }
            loadString() {
                const e = new DataView(new ArrayBuffer(2));
                let t = "";
                for (let i = 0;; i += 2) {
                    e.setUint16(0, this.codes[this.pc + i] << 8 | this.codes[this.pc + i + 1]);
                    const s = e.getUint16(0);
                    if (!s) return this.pc = this.pc + i + 2, void this.stack.push(t);
                    t += String.fromCharCode(s)
                }
            }
            run() {
                for (;;) {
                    const t = this.codes[this.pc++];
                    switch (t) {
                        case e.OpCode.NOP:
                            break;
                        case e.OpCode.UNDEF:
                            this.stack.push(void 0);
                            break;
                        case e.OpCode.NULL:
                            this.stack.push(null);
                            break;
                        case e.OpCode.OBJ:
                            this.stack.push({});
                            break;
                        case e.OpCode.ARR:
                            this.stack.push([]);
                            break;
                        case e.OpCode.TRUE:
                            this.stack.push(!0);
                            break;
                        case e.OpCode.FALSE:
                            this.stack.push(!1);
                            break;
                        case e.OpCode.NUM:
                            this.loadNumber();
                            break;
                        case e.OpCode.ADDR:
                            this.loadAddress();
                            break;
                        case e.OpCode.STR:
                            this.loadString();
                            break;
                        case e.OpCode.POP:
                            this.stack.pop();
                            break;
                        case e.OpCode.TOP:
                            this.stack.push(this.stack[this.stack.length - 1]);
                            break;
                        case e.OpCode.TOP2:
                            this.stack.push(this.stack[this.stack.length - 2], this.stack[this.stack.length - 1]);
                            break;
                        case e.OpCode.VAR:
                            this.scope.var(this.stack.pop());
                            break;
                        case e.OpCode.LOAD:
                            this.stack.push(this.scope.load(this.stack.pop()));
                            break;
                        case e.OpCode.OUT:
                            this.stack.push(this.scope.out(this.stack.pop(), this.stack.pop()));
                            break;
                        case e.OpCode.JUMP:
                            this.pc = this.stack.pop();
                            break;
                        case e.OpCode.JUMPIF:
                            {
                                const e = this.stack.pop();
                                this.stack.pop() && (this.pc = e);
                                break
                            }
                        case e.OpCode.JUMPNOT:
                            {
                                const e = this.stack.pop();
                                this.stack.pop() || (this.pc = e);
                                break
                            }
                        case e.OpCode.FUNC:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop(),
                                    i = this.stack.pop(),
                                    s = this,
                                    a = function(...t) {
                                        const n = new yn(s.scope);
                                        return n.var("this"), n.out("this", this), i && (n.var(i), n.out(i, a)), new bn(n, s.codes, e, [t]).run()
                                    };
                                Object.defineProperty(a, "name", {
                                    value: i
                                }), Object.defineProperty(a, "length", {
                                    value: t
                                }), this.stack.push(a);
                                break
                            }
                        case e.OpCode.CALL:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop(),
                                    i = this.stack.pop();
                                this.stack.push(t.apply(i, e));
                                break
                            }
                        case e.OpCode.NEW:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(new(t.bind.apply(t, [null, ...e])));
                                break
                            }
                        case e.OpCode.RET:
                            return this.stack.pop();
                        case e.OpCode.GET:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t[e]);
                                break
                            }
                        case e.OpCode.SET:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop(),
                                    i = this.stack.pop();
                                this.stack.push(i[t] = e);
                                break
                            }
                        case e.OpCode.IN:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(e in t);
                                break
                            }
                        case e.OpCode.DELETE:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(delete t[e]);
                                break
                            }
                        case e.OpCode.EQ:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t == e);
                                break
                            }
                        case e.OpCode.NEQ:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t != e);
                                break
                            }
                        case e.OpCode.SEQ:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t === e);
                                break
                            }
                        case e.OpCode.SNEQ:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t !== e);
                                break
                            }
                        case e.OpCode.LT:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t < e);
                                break
                            }
                        case e.OpCode.LTE:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t <= e);
                                break
                            }
                        case e.OpCode.GT:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t > e);
                                break
                            }
                        case e.OpCode.GTE:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t >= e);
                                break
                            }
                        case e.OpCode.ADD:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t + e);
                                break
                            }
                        case e.OpCode.SUB:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t - e);
                                break
                            }
                        case e.OpCode.MUL:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t * e);
                                break
                            }
                        case e.OpCode.EXP:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t * * e);
                                break
                            }
                        case e.OpCode.DIV:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t / e);
                                break
                            }
                        case e.OpCode.MOD:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t % e);
                                break
                            }
                        case e.OpCode.BNOT:
                            {
                                const e = this.stack.pop();
                                this.stack.push(~e);
                                break
                            }
                        case e.OpCode.BOR:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t | e);
                                break
                            }
                        case e.OpCode.BXOR:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t ^ e);
                                break
                            }
                        case e.OpCode.BAND:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t & e);
                                break
                            }
                        case e.OpCode.LSHIFT:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t << e);
                                break
                            }
                        case e.OpCode.RSHIFT:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t >> e);
                                break
                            }
                        case e.OpCode.URSHIFT:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t >>> e);
                                break
                            }
                        case e.OpCode.OR:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t || e);
                                break
                            }
                        case e.OpCode.AND:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t && e);
                                break
                            }
                        case e.OpCode.NOT:
                            {
                                const e = this.stack.pop();
                                this.stack.push(!e);
                                break
                            }
                        case e.OpCode.INSOF:
                            {
                                const e = this.stack.pop(),
                                    t = this.stack.pop();
                                this.stack.push(t instanceof e);
                                break
                            }
                        case e.OpCode.TYPEOF:
                            {
                                const e = this.stack.pop();
                                this.stack.push(typeof e);
                                break
                            }
                        default:
                            throw new Error(`Unexpected code ${t.toString(16)}`)
                    }
                }
            }
        }
        class wn {
            static check(e) {
                this.callback = e;
                let i = t.controller.versionData.hotFixVer;
                if (!this.checked) {
                    if (this.checked = !0, !i) return void this.callback(0);
                    this.onChecked(null)
                }
            }
            static onChecked(e) {
                let i = t.controller.versionData.hotFixVer;
                if (e && e.version == i) this.callback(1);
                else {
                    let e = `${V.patch_url}/${this.patchFileName}.${i}.bin`;
                    console.log("load patch file: " + e), Laya.loader.load(e, Laya.Handler.create(this, this.onPatchDownload), null, Laya.Loader.BUFFER)
                }
            }
            static onPatchDownload(e) {
                e ? this.patch(e) : this.callback(1)
            }
            static patch(e) {
                let i = {
                        console: console,
                        Math: Math,
                        window: window,
                        BundleJs: BundleJs,
                        Game: t,
                        fx: fx,
                        sdk: sdk,
                        Laya: Laya
                    },
                    s = sdk.Sdk.instance.getGlobalInstance();
                s && (i[s[0]] = s[1]);
                const a = new Cn(i);
                new bn(a, Array.from(new Uint8Array(e))).run(), this.callback(1)
            }
        }
        wn.patchFileName = "data";
        class BuffMgr {
            addBuff(e, t) {
                e && t && (e.buffs || (e.buffs = []), e.buffs.includes(t) || e.buffs.push(t))
            }
            removeBuff(e, t) {
                if (!(e && e.buffs && e.buffs.length && t)) return;
                let i = e.buffs.findIndex(e => e == t); - 1 != i && e.buffs.splice(i, 1)
            }
            getBuff(e, t) {
                if (!(e && e.buffs && e.buffs.length && t)) return null;
                let i = e.buffs.findIndex(e => (console.log(e), console.log(t), e == t));
                return -1 == i ? null : e.buffs[i]
            }
            clearBuffs(e) {
                e && e.buffs && e.buffs.length && (e.buffs = [])
            }
        }
        class TaskMgr {
            constructor() {
                this.taskTextArr = [], this.isInit = !1, this.index = 1
            }
            init() {
                if (t.gameMgr.gameMode != e.GameMode.E_Defense) return void(this.isInit = !1);
                let i = t.user.gameInfo;
                if (i.winCnt + i.failCnt >= 3) return void(this.isInit = !1);
                let s = fx.CfgMgr.instance.get("taskCfg");
                s = fx.CfgMgr.instance.get("taskCfg_test"), this.taskTextArr = [];
                for (const e in s)
                    if (Object.prototype.hasOwnProperty.call(s, e)) {
                        const t = s[e];
                        t && this.taskTextArr.push(t)
                    }
                this.taskTextArr.length < i.taskIndex ? this.isInit = !1 : (this.isInit = !0, this.index = 1, this.compeletAllTask() || fx.EventCenter.I.on(XEventNames.E_Bed_Up, this, this.startTask))
            }
            getCurTaskCfg() {
                let e = this.index;
                if (e < 0 && e >= this.taskTextArr.length) return null;
                let t = fx.CfgMgr.instance.get("taskCfg", e);
                return t = fx.CfgMgr.instance.get("taskCfg_test", e)
            }
            isBedLvEnough(e) {
                let i = t.playerMgr.player;
                return !(!i || !i.bedModel) && i.bedModel.lv > e
            }
            compeletAllTask() {
                return !this.isInit || !(this.index <= this.taskTextArr.length) && (fx.EventCenter.I.off(XEventNames.E_Bed_Up, this, this.startTask), !0)
            }
            Task1() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.taskCompelet()
            }
            Task2() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.isBedLvEnough(1) ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 2)
            }
            Task3() {
                t.gameMgr.randomCnt > 0 ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 3)
            }
            Task4() {
                {
                    let e = t.gameMgr.mineRoom;
                    e && e.doorModel && e.doorModel.lv > 1 ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 4)
                }
            }
            Task5() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.isBedLvEnough(2) ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 5)
            }
            Task6() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.isBedLvEnough(3) ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 6)
            }
            Task7() {
                let e = t.gameMgr.mineRoom;
                if (t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && e && e.buildings) {
                    let t = 0;
                    for (let i = 0; i < e.buildings.length; i++) {
                        const s = e.buildings[i];
                        s && "tower" == s.type && (t += 1)
                    }
                    t >= 2 ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 7)
                }
            }
            Task8() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && (t.gameMgr.isClickRepair ? this.taskCompelet() : fx.EventCenter.I.event(XEventNames.E_GuideHand_Show, 8))
            }
            Task9() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.isBedLvEnough(4) && this.taskCompelet()
            }
            Task10() {
                let e = t.gameMgr.mineRoom;
                if (t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && e && e.buildings) {
                    let t = 0;
                    for (let i = 0; i < e.buildings.length; i++) {
                        const s = e.buildings[i];
                        s && "energy" == s.type && (t += 1)
                    }
                    t >= 2 && this.taskCompelet()
                }
            }
            Task11() {
                t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && this.isBedLvEnough(6) && this.taskCompelet()
            }
            Task12() {
                let e = t.gameMgr.mineRoom;
                if (t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && e && e.buildings) {
                    let t = 0;
                    for (let i = 0; i < e.buildings.length; i++) {
                        const s = e.buildings[i];
                        s && "tower" == s.type && s.lv >= 5 && (t += 1)
                    }
                    t >= 1 && this.taskCompelet()
                }
            }
            Task13() {
                let e = t.gameMgr.mineRoom;
                if (t.playerMgr.isPlayerBed(t.playerMgr.mineUuid) && e && e.buildings) {
                    let t = 0;
                    for (let i = 0; i < e.buildings.length; i++) {
                        const s = e.buildings[i];
                        s && "mine" == s.type && 5e3 == s.id && 1 == s.lv && (t += 1)
                    }
                    t >= 1 && this.taskCompelet()
                }
            }
            startTask() {
                switch (this.index) {
                    case 1:
                        this.taskFunc = this.Task1;
                        break;
                    case 2:
                        this.taskFunc = this.Task2;
                        break;
                    case 3:
                        this.taskFunc = this.Task3;
                        break;
                    case 4:
                        this.taskFunc = this.Task4;
                        break;
                    case 5:
                        this.taskFunc = this.Task5;
                        break;
                    case 6:
                        this.taskFunc = this.Task6;
                        break;
                    case 7:
                        this.taskFunc = this.Task7;
                        break;
                    case 8:
                        this.taskFunc = this.Task8;
                        break;
                    case 9:
                        this.taskFunc = this.Task9;
                        break;
                    case 10:
                        this.taskFunc = this.Task10;
                        break;
                    case 11:
                        this.taskFunc = this.Task11;
                        break;
                    case 12:
                        this.taskFunc = this.Task12;
                        break;
                    case 13:
                        this.taskFunc = this.Task13;
                        break;
                    default:
                        this.taskCompelet(), XToast.show("您已完成所有任务，请尽情体验游戏吧~")
                }
                this.compeletAllTask() || this.taskFunc && this.taskFunc()
            }
            taskCompelet() {
                fx.EventCenter.I.event(XEventNames.E_Task_Compelet), this.taskFunc = null
            }
            getInit() {
                return this.isInit
            }
        }
        class LoadingScript extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                let e = Laya.stage.getChildByName("PureLoading");
                e && (e.visible = !1), this.pb_progress = this.owner.getChildByName("pb_progress"), this.pb_progress.value = 1, this.loginSdk()
            }
            onDisable() {
                fx.EventCenter.I.offAllCaller(this)
            }
            loginSdk() {
                this.sdkTime = Date.now(), fx.EventCenter.I.once(sdk.SdkEvent.E_SDK_INIT_OK, this, e => {
                    console.log("SDK 初始化完成！"), this.onSdkLogin()
                }), sdk.Sdk.instance.init()
            }
            onSdkLogin() {
                let e = (Date.now() - this.sdkTime) / 1e3;
                e = Math.round(100 * e) / 100, XAnalyticsUtil.track("login_sdk", {
                    login_time: e
                }), fx.Utils.isOnMiniGame() && (sdk.Sdk.isOnWeiXin() ? V.channel_AdIds.videoId.length > 0 && (sdk.Sdk.instance.adIds = V.channel_AdIds) : sdk.Sdk.instance.adIds = V.channel_AdIds, sdk.Sdk.isOnWeiXin() ? j.I.initWxVideo() : sdk.Sdk.instance.preloadVideo()), XRegClass.init(), this.initGame(), this.initConfig()
            }
            initGame() {
                t.cryptUtil = new CryptUtil, t.http = new Js, t.assetLoader = new AssetLoader, t.assetPool = new AssetPool, 
                t.ui = new Aa, t.gameTime = new GameTime, t.language = LanguageMgr.instance, t.controller = new Controller, 
                t.rewardMgr = new RewardMgr, t.reporter = new Reporter, t.serverStorage = XEventDispatcher.I, 
                t.rankMgr = new RankMgr, t.gameMgr = new GameMgr, t.gameUI = new GameUI, t.mapMgr = new MapMgr, 
                t.buildingMgr = new XBuildingMgr, t.playerMgr = new PlayerMgr, t.bulletMgr = new BulletMgr, 
                t.guideMgr = new GuildMgr, t.buffMgr = new BuffMgr, t.taskMgr = new TaskMgr
            }
            initConfig() {
                this.cfgTime = Date.now(), LoadingUtil.show("同步配置文件"), t.controller.queryVersionCfg(() => {
                    wn.check(() => {
                        t.controller.queryCfgs(() => {
                            LoadingUtil.hide(), this.onConfigInited()
                        })
                    })
                })
            }
            onConfigInited() {
                let e = (Date.now() - this.cfgTime) / 1e3;
                e = Math.round(100 * e) / 100, XAnalyticsUtil.track("load_cfg", {
                    load_time: e
                }), t.cfg = new XCfgMgr, t.user = new XUser, fx.EventCenter.I.event("InfoNeedInit"), t.user.parseFromLocal(), this.getServerData()
            }
            getServerData() {
                this.syncTime = Date.now(), LoadingUtil.show("数据同步中"), XEventDispatcher.I.init(V.serverURL, V.gameID, V.platform, e => {
                    LoadingUtil.hide(), e ? (e.data && t.user.parseFromServer(e.data), this.onSyncdData()) : t.ui.showMessageDialog({
                        content: "数据同步失败，请重试",
                        showSureBtn: !0,
                        onSure: () => {
                            this.getServerData()
                        }
                    })
                })
            }
            onSyncdData() {
                let e = (Date.now() - this.syncTime) / 1e3;
                e = Math.round(100 * e) / 100, XAnalyticsUtil.track("sync_data", {
                    sync_time: e
                }), t.reporter.init(), t.user.init(), t.language.init(), t.user.checkNewDay(), t.user.saveToLocal(), t.user.saveToServer(), t.user.updateInvite(), this.loadResource()
            }
            async loadResource() {
                let e = 0,
                    i = [];
                if (0 == i.length) return void this.enterGame();
                let s = () => {
                    ++e >= i.length && this.enterGame()
                };
                for (const e of i) e.includes("fnt") ? t.assetLoader.loadBMFont(e, s) : t.assetLoader.loadPrefab(e, s, !0)
            }
            enterGame() {
                let e = Laya.timer.currTimer;
                XRandomUtil.init(e), XAnalyticsUtil.onLevelChange(t.user.gameInfo.curLv), XAnalyticsUtil.onHunterLevelChange(t.user.gameInfo.curHunterLv), t.gameMgr.skillABTest = 1, Laya.timer.callLater(this, function() {
                    console.log("切换游戏场景！"), t.ui.changeScene(l.MainScene, {
                        from: "loading"
                    })
                })
            }
            getABtestNum(e) {
                let t = -1,
                    i = window.wx;
                if (i && i.getExptInfoSync) {
                    let s = i.getExptInfoSync([e]);
                    t = "0" == s[e] ? 0 : "1" == s[e] ? 1 : "2" == s[e] ? 2 : -1
                } else t = -1;
                return t
            }
        }
        class Mn extends Laya.Script {get node() {
                return this.owner
            }
            onAwake() {
                this.onTianChange(), t.user.gameInfo.on(Ce.TianChange, this, this.onTianChange)
            }
            onTianChange() {
                let e = t.user.gameInfo.tian;
                this.lb_num.text = `${e}`
            }
            onDestroy() {
                t.user.gameInfo.off(Ce.TianChange, this, this.onTianChange)
            }
        }
        class xn extends Laya.Script {get node() {
                return this.owner
            }
            onAwake() {
                t.controller.versionData.ServiceChat && sdk.Sdk.isOnWeiXin() ? this.node.on(Laya.Event.CLICK, this, () => {
                    sdk.Sdk.instance.openCustomerServiceConversation()
                }) : this.node.visible = !1
            }
        }
        class Bn extends Laya.Script {get node() {
                return this.owner
            }
            onAwake() {
                this.onCoinChange(), t.user.gameInfo.on(Ce.CoinChange, this, this.onCoinChange)
            }
            onCoinChange() {
                let e = t.user.gameInfo.coin;
                this.lb_num.text = `${e}`
            }
            onDestroy() {
                t.user.gameInfo.off(Ce.CoinChange, this, this.onCoinChange)
            }
        }
        class Tn extends Laya.Script {get node() {
                return this.owner
            }
            onAwake() {
                this.img_dot = this.node.seekChildByName("img_dot"), this.updateUI(), t.user.gameInfo.on(Ce.GameClubDataChange, this, this.updateUI), t.user.gameInfo.on(Ce.GameClubRewardClaimed, this, this.updateUI)
            }
            updateUI() {
                let e = !1,
                    i = t.cfg.clubReward.getList().slice();
                for (const s of i) {
                    if (!t.user.gameInfo.isClubRewardClaimed(s.id)) {
                        e = !0;
                        break
                    }
                }
                this.img_dot.visible = e
            }
            onClick(e) {
                t.ui.openPanel(l.ClubRewardDialog)
            }
        }
        class En extends Laya.Script {
            constructor() {
                super(...arguments), this.space = 0, this.dir = "left"
            }
            onEnable() {
                this.delayLayout();
                let e = this.owner.getChildren();
                for (const t of e) t.on(Laya.Event.VISIBLE, this, this.delayLayout), t.on(Laya.Event.RESIZE, this, this.delayLayout), t.on(Laya.Event.LOADED, this, this.delayLayout)
            }
            delayLayout() {
                this.owner.timer.callLater(this, this.doLayout)
            }
            doLayout() {
                if (this.destroyed) return;
                let e = 0,
                    t = 0,
                    i = this.owner.getChildren();
                if ("left" == this.dir) {
                    let s = [];
                    for (let a = 0; a < i.length; ++a) {
                        let n = i[a];
                        if (n.visible && "ignore" != n.name) {
                            let i = XCoordinateUtil.getAnchorPos(n);
                            s.push({
                                node: n,
                                pos: e + i.x
                            });
                            let a = n.width;
                            n._bitmap && n._bitmap._source && (a = n._bitmap._source.sourceWidth || n._bitmap._source.width), e = t += a + this.space
                        }
                    }
                    if (this.adaptBoxSize) {
                        this.owner.width = e
                    }
                    for (const e of s) e.node.left = void 0, e.node.right = void 0, e.node.centerX = void 0, e.node.x = e.pos
                } else {
                    let t = [];
                    for (let s = i.length - 1; s >= 0; --s) {
                        let a = i[s];
                        if (a.visible && "ignore" != a.name) {
                            t.push({
                                node: a,
                                pos: e
                            });
                            let i = a.width;
                            a._bitmap && a._bitmap._source && (i = a._bitmap._source.sourceWidth || a._bitmap._source.width), e += i + this.space
                        }
                    }
                    if (this.adaptBoxSize) {
                        this.owner.width = e
                    }
                    for (const e of t) e.node.left = void 0, e.node.centerX = void 0, e.node.right = e.pos
                }
            }
        }
        class Ln extends Laya.Script {
            constructor() {
                super(...arguments), this.input = new fx.V2
            }
            onAwake() {
                this.list = this.owner.seekChildByName("list"), this.initList();
                let e = this.owner.getChildByName("img_bg");
                e.visible = !1, this.img_bg = e, this.b_input = this.owner.seekChildByName("b_input"), this.b_input.visible = !1, this.textinput = this.owner.seekChildByName("textinput"), this.owner.seekChildByName("btn_sure").on(Laya.Event.CLICK, this, this.onClickSure), this.owner.getChildByName("lb_gm").on(Laya.Event.CLICK, this, () => {
                    e.visible = this.list.visible = !this.list.visible, this.b_input.visible && (this.b_input.visible = !1)
                }), this.owner.getChildByName("lb_log").on(Laya.Event.CLICK, this, () => {});
                let t = this.owner.getChildByName("p_log");
                t.height = 0, t.visible = !1, t.vScrollBarSkin = null, this.p_log = t
            }
            initList() {
                let e = window.GM,
                    t = [],
                    i = Object.getOwnPropertyNames(e),
                    s = ["init", "enableLog", "loadGMBox", "logType"];
                for (let a = 0; a < i.length; ++a) {
                    let n = i[a];
                    "function" == typeof e[n] && -1 == s.indexOf(n) && t.push(e[n])
                }
                this.list.height = Laya.stage.height - 100, this.list.array = t, this.list.renderHandler = new Laya.Handler(this, this.updateItem), this.list.visible = !1, this.list.vScrollBarSkin = ""
            }
            updateItem(e, t) {
                let i = e.dataSource,
                    s = e.seekChildByName("label_item"),
                    a = i.toString(),
                    n = a.indexOf(")"); - 1 != n && (a = a.substring(0, n + 1)), s.text = a, s.on(Laya.Event.CLICK, this, () => {
                    this.curFun = i, this.img_bg.visible = this.b_input.visible = !0, this.list.visible = !1
                })
            }
            onClickSure() {
                let e = window.GM,
                    t = this.textinput.text.split(",");
                this.curFun ? this.curFun.call(e, ...t) : XToast.show("no function"), this.img_bg.visible = this.b_input.visible = !1
            }
            log(e, ...t) {
                let i = "";
                for (const e of t)
                    if (e instanceof Object) try {
                        i += JSON.stringify(e)
                    } catch (e) {
                        i += "Json stringify Error !!!\n"
                    } else i += e;
                let s = new Laya.Label;
                s.width = Laya.stage.width, s.wordWrap = !0, s.fontSize = 30, s.bgColor = e, s.text = i, s.height += 10;
                let a = s.height,
                    n = this.owner.getChildByName("p_log");
                s.y = n.contentHeight, n.addChild(s), n.height = Math.min(s.y + a, Laya.stage.height), n.content.height = Math.max(n.contentHeight, n.height)
            }
            onKeyUp(e) {
                switch (e.keyCode) {
                    case 113:
                    case 119:
                        break;
                    case 32:
                        this.jump();
                        break;
                    case 81:
                        break;
                    default:
                        this.stopMove()
                }
            }
            onUpdate() {}
            moveForward(e) {}
            moveRight(e) {}
            stopMove() {}
            lookForward(e) {}
            lookRight(e) {}
            jump() {}
        }
        class JumpGameCfg {}
        class JumpShowCfg {}
        e.ExportType = void 0, (kn = e.ExportType || (e.ExportType = {}))[kn.EXPORT_ICON = 1] = "EXPORT_ICON", kn[kn.EXPORT_BANNER = 2] = "EXPORT_BANNER";
        class Pn extends fx.BaseLogic {
            constructor() {
                super(), this.jumpGameCfg = null, this.jumpShowCfg = null, this.jumpCfgUrl = "https://cdn.105775.cn/WXMiniProgramJump/config_miniGameJump.json", this.testSign = !1, this.startRequest = !1, this.testSign ? (console.warn("测试数据模式：打开状态！"), this.createTestData()) : console.warn("测试数据模式：关闭状态！开始获取线上配置！")
            }
            static get I() {
                return this._instance || (this._instance = new Pn), this._instance
            }
            onInitOnce() {}
            onInit() {}
            get iconShowNum() {
                return 0
            }
            isShowIcon() {
                if (!this.jumpShowCfg || !this.jumpGameCfg) return !1;
                if (-1 == this.jumpShowCfg.iconShow) return !0;
                return this.iconShowNum >= this.jumpShowCfg.iconShow
            }
            isShowBanner() {
                if (!this.jumpShowCfg || !this.jumpGameCfg) return !1;
                if (-1 == this.jumpShowCfg.bannerShow) return !0;
                return this.iconShowNum >= this.jumpShowCfg.bannerShow
            }
            getJumpData() {
                return this.jumpGameCfg && this.jumpShowCfg ? this.jumpGameCfg : (this.startRequest || (this.startRequest = !0, sdk.Sdk.instance.request(this.jumpCfgUrl, Laya.Handler.create(this, e => {
                    console.log(`跳转数据获取成功：${JSON.stringify(e)}`), e && !this.jumpGameCfg && this.checkAppid(e), this.startRequest = !1
                }), Laya.Handler.create(this, e => {
                    console.log(`跳转数据获取失败：${JSON.stringify(e)}`), this.startRequest = !1
                }), null, "GET", !0)), null)
            }
            checkAppid(e) {
                this.jumpGameCfg = new JumpGameCfg, this.jumpShowCfg = new JumpShowCfg;
                let t = V.appId;
                const i = wx.getAccountInfoSync();
                if (i && i.miniProgram && i.miniProgram.appId && (t = i.miniProgram.appId), this.jumpGameCfg.imgUrl = e.imgUrl, this.jumpGameCfg.bannerImage = e.bannerImage, e[V.appId])
                    if (this.jumpShowCfg = e[t], this.jumpShowCfg.appidList.length > 0) {
                        this.jumpGameCfg.gameList = [];
                        for (let e = 0; e < this.jumpShowCfg.appidList.length; e++) {
                            const t = this.jumpShowCfg.appidList[e];
                            for (let e = 0; e < this.jumpGameCfg.gameList.length; e++) {
                                const i = this.jumpGameCfg.gameList[e];
                                if (t == i.appId) {
                                    this.jumpGameCfg.gameList.push(i);
                                    break
                                }
                            }
                        }
                    } else this.jumpGameCfg.gameList = e.gameList;
                if (this.jumpGameCfg.gameList) {
                    let e = 0;
                    for (; e < this.jumpGameCfg.gameList.length;) {
                        this.jumpGameCfg.gameList[e].appId == t ? this.jumpGameCfg.gameList.splice(e, 1) : e++
                    }
                }
            }
            getBannerImage() {
                return this.jumpGameCfg.imgUrl + this.jumpGameCfg.bannerImage
            }
            getBannerRedSign() {
                return this.jumpShowCfg.showRedDot
            }
            createTestData() {
                this.checkAppid({
                    imgUrl: "https://cdn.105775.cn/A_PopularizeIcon/",
                    bannerImage: "512/banner_moregame.jpg",
                    gameList: [{
                        appId: "wxbef6b029c522ae75",
                        gameImage: "512/icon_leiting.jpg",
                        name: "雷霆大作战",
                        icon: "icon_ltdzz.jpg"
                    }, {
                        appId: "wx73e100a1d27fe6d9",
                        gameImage: "512/icon_liaozai.jpg",
                        name: "聊斋搜神记",
                        icon: "icon_lzssj.jpg"
                    }, {
                        appId: "wxb247bb59ed38bd1f",
                        gameImage: "512/icon_turan.jpg",
                        name: "硬币消消消",
                        icon: "icon_jttrda.jpg"
                    }, {
                        appId: "wx3120b1de251b3b39",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "无敌汉字王",
                        icon: "icon_zsgsmjh.jpg"
                    }, {
                        appId: "wx2fb814a983638999",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "汉字挑战王",
                        icon: "icon_zsgsmjh.jpg"
                    }, {
                        appId: "wxeba1b1251a947be5",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "文字乐消消",
                        icon: "icon_zsgsmjh.jpg"
                    }, {
                        appId: "wx5ccdd2067d2bc49b",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "奇妙的文字",
                        icon: "icon_zsgsmjh.jpg"
                    }, {
                        appId: "wx808183e6119c67a6",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "花式拧螺丝",
                        icon: "icon_zsgsmjh.jpg"
                    }, {
                        appId: "wx83432bc52126ed1c",
                        gameImage: "512/icon_jianghu.jpg",
                        name: "拿起锤子打螺丝",
                        icon: "icon_zsgsmjh.jpg"
                    }],
                    wxbef6b029c522ae75: {
                        name: "雷霆大作战",
                        iconShow: -1,
                        bannerShow: -1,
                        showRedDot: !1,
                        appidList: []
                    },
                    wx83432bc52126ed1c: {
                        name: "拿起锤子打螺丝",
                        iconShow: -1,
                        bannerShow: -1,
                        showRedDot: !1,
                        appidList: []
                    }
                })
            }
        }
        class JumpGameListDialog extends e.ui.scenes.WXJump.JumpGameListDialogUI {
            constructor() {
                super(), this.index = 0
            }
            onAdd() {
                this.jumpGame = Pn.I.getJumpData(), this.initUI(), this.initBtn()
            }
            initUI() {
                this.img_bg.width = Laya.stage.width, this.img_bg.height = Laya.stage.height, this.img_bg.on(Laya.Event.CLICK, this, () => {
                    fx.SceneManager.closePanel(this)
                }), this.list_index.width = 40 * this.jumpGame.gameList.length + 10 * (this.jumpGame.gameList.length - 1), this.list_index.array = this.jumpGame.gameList, this.list_index.renderHandler = new Laya.Handler(this, (e, t) => {
                    if (!e.dataSource) return;
                    let i = e.getChildByName("img_sign");
                    this.index == t ? i.skin = "res/wxJumpRes/2.png" : i.skin = "res/wxJumpRes/3.png"
                }), this.changeContent()
            }
            initBtn() {
                this.left_btn.on(Laya.Event.CLICK, this, () => {
                    0 != this.index ? this.index-- : this.index = this.jumpGame.gameList.length - 1, this.changeContent()
                }), this.right_btn.on(Laya.Event.CLICK, this, () => {
                    this.index < this.jumpGame.gameList.length - 1 ? this.index++ : this.index = 0, this.changeContent()
                }), this.img_icon.on(Laya.Event.CLICK, this, () => {
                    let e = this.jumpGame.gameList[this.index];
                    fx.Utils.isOnPC() ? (this.startTime = fx.Utils.getTime(), XToast.show("点击游戏跳转：" + e.name)) : sdk.Sdk.instance.navigateApp({
                        appId: e.appId,
                        success: () => {
                            this.startTime = fx.Utils.getTime()
                        }
                    })
                })
            }
            changeContent() {
                this.list_index.refresh(), this.img_icon.skin = this.jumpGame.imgUrl + this.jumpGame.gameList[this.index].gameImage
            }
        }
        class XBannerJumpScript extends Laya.Script {
            onAwake() {
                if (this._owner = this.owner, !Pn.I.isShowBanner()) return this._owner.visible = !1, void this._owner.destroy();
                this.img_reddot = this._owner.getChildByName("img_reddot"), this.img_reddot.visible = Pn.I.getBannerRedSign(), this._owner.getChildByName("img_banner").skin = Pn.I.getBannerImage(), this._owner.on(Laya.Event.CLICK, this, () => {
                    fx.SceneManager.openPanel(JumpGameListDialog)
                })
            }
        }
        class Gn extends Laya.Script {
            constructor() {
                super(), this.gameIndex = -1
            }
            onEnable() {
                this._owner = this.owner, this._owner.visible = !1, this.initUi()
            }
            initUi() {
                if (this.jumpGame = Pn.I.getJumpData(), this.jumpGame) {
                    if (!Pn.I.isShowIcon()) return this._owner.visible = !1, void this._owner.destroy();
                    this._owner.visible = !0;
                    let e = this._owner.getChildByName("iconBg");
                    this.gameIcon = e.getChildByName("gameIcon"), this.gameName = this._owner.getChildByName("gameName"), this.hotImg = this._owner.getChildByName("hotImg"), fx.Effect.breathEff(this.hotImg, 1500, 1.1), this._owner.on(Laya.Event.MOUSE_DOWN, this, () => {
                        fx.Utils.isOnPC() ? XToast.show(`点击了：${this.jumpGame.gameList[this.gameIndex].name}`) : (console.log(this.jumpGame.gameList[this.gameIndex].appId), sdk.Sdk.instance.navigateApp({
                            appId: this.jumpGame.gameList[this.gameIndex].appId,
                            success: () => {
                                console.log("跳转成功啦~")
                            }
                        }))
                    }), this.updataFunc(), Laya.timer.loop(3e3, this, this.updataFunc)
                } else Laya.timer.once(1e3, this, this.initUi)
            }
            onDisable() {}
            updataFunc() {
                this.gameIndex += 1, this.gameIndex >= this.jumpGame.gameList.length && (this.gameIndex = 0), "111" !== this.gameName.text && this.shake(), this.gameIcon.skin = this.jumpGame.imgUrl + this.jumpGame.gameList[this.gameIndex].icon, this.gameName.text = this.jumpGame.gameList[this.gameIndex].name, this.hotImg.visible = !0
            }
            shake() {
                new fx.Sequence([{
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: -15
                    },
                    duration: 100,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: 15
                    },
                    duration: 150,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: -10
                    },
                    duration: 150,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: 10
                    },
                    duration: 150,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: -5
                    },
                    duration: 100,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: 5
                    },
                    duration: 100,
                    ease: Laya.Ease.backOut
                }, {
                    t: "to",
                    target: this._owner,
                    props: {
                        rotation: 0
                    },
                    duration: 100,
                    ease: Laya.Ease.backOut
                }], !1).run()
            }
        }
        class Rn extends e.ui.scenes.WXJump.MiniGameListDialogUI {
            onAdd() {
                this.initList(), this.img_close.on(Laya.Event.CLICK, this, this.onClickClose)
            }
            onClickClose() {
                t.ui.close(this)
            }
            initList() {
                let e = [];
                if (Pn.I.isShowBanner() && (this.jumpGame = Pn.I.getJumpData(), this.jumpGame && this.jumpGame.gameList.length > 0))
                    for (let t = 0; t < this.jumpGame.gameList.length; t++) {
                        const i = this.jumpGame.gameList[t];
                        e.push(i)
                    }
                this.list_items.vScrollBarSkin = "", this.list_items.dataSource = e, this.list_items.renderHandler = new Laya.Handler(this, this.updateItem)
            }
            updateItem(e) {
                if (!e.dataSource) return;
                let t = e.dataSource,
                    i = e.getChildByName("label_name"),
                    s = e.getChildByName("img_icon"),
                    a = e.getChildByName("label_des");
                i && (i.text = t.name), s && (s.skin = this.jumpGame.imgUrl + t.icon), a && t.des ? (a.text = t.des, a.visible = !0) : a.visible = !1, e.on(Laya.Event.CLICK, this, this.onClickItem, [e])
            }
            onClickItem(e) {
                let t = e.dataSource;
                fx.Utils.isOnPC() ? XToast.show(`点击了：${t.name}`) : (console.log(t.appId), sdk.Sdk.instance.navigateApp({
                    appId: t.appId,
                    success: () => {
                        console.log("跳转成功啦~")
                    }
                }))
            }
        }
        class XMoreGameBtnScript extends Laya.Script {
            onAwake() {
                this._owner = this.owner, this._owner.visible = !1, this.initUi()
            }
            initUi() {
                if (Pn.I.getJumpData()) {
                    if (!Pn.I.isShowBanner()) return this._owner.visible = !1, void this._owner.destroy();
                    this._owner.visible = !0, this._owner.on(Laya.Event.CLICK, this, () => {
                        fx.SceneManager.openPanel(Rn)
                    })
                } else Laya.timer.once(1e3, this, this.initUi)
            }
        }
        class On extends Laya.Script {
            onAwake() {
                fx.EventCenter.I.on(fx.BaseEvent.E_PANEL_OPENCLOSE, this, this.opencloseFunc)
            }
            onEnable() {
                this.owner;
                this.init()
            }
            onDisable() {}
            onDestroy() {
                fx.EventCenter.I.off(fx.BaseEvent.E_PANEL_OPENCLOSE, this, this.opencloseFunc), this.wxGameClubBtn && this.wxGameClubBtn.destroy()
            }
            showSelf(e) {
                e ? this.showGameClub() : this.hideGameClub()
            }
            init() {
                if (!window.wx) return;
                let e, t, i = this.owner,
                    s = sdk.Sdk.instance.getSystemInfo();
                if (i.top) e = s.screenHeight * (i.top / i.parent.height);
                else if (i.bottom) {
                    let t = i.parent.height - i.bottom - i.height;
                    e = s.screenHeight * (t / i.parent.height)
                }
                if (i.left) t = s.screenWidth * (i.left / i.parent.width);
                else if (i.right) {
                    let e = i.parent.width - i.right - i.width;
                    t = s.screenWidth * (e / i.parent.width)
                }
                this.wxGameClubBtn = wx.createGameClubButton({
                    type: "image",
                    image: "res/wxJumpRes/img_gameClub.png",
                    style: {
                        left: t,
                        top: e,
                        width: .6 * i.width,
                        height: .6 * i.height
                    }
                })
            }
            showGameClub() {
                this.wxGameClubBtn && this.wxGameClubBtn.show()
            }
            hideGameClub() {
                this.wxGameClubBtn && this.wxGameClubBtn.hide()
            }
            opencloseFunc(e) {
                this.owner.timerOnce(200, this, () => {
                    e.code === fx.BaseCode.PANEL_OPEN || e.code === fx.BaseCode.VIEW_OPEN ? this.hideGameClub() : e.code !== fx.BaseCode.PANEL_CLOSE && e.code !== fx.BaseCode.VIEW_CLOSE || 0 != Laya.Dialog.manager.getChildren().length || this.showGameClub()
                })
            }
        }
        class Vn {
            constructor() {}
            static init() {
                var e = Laya.ClassUtils.regClass;
                e("game/core/InputScript.ts", InputScript), e("script/ScaleEffectBtn.ts", Ni), e("script/PulseEffectBtn.ts", qs), e("game/core/CoinScript.ts", Ws), e("game/core/PlayerHeadScript.ts", Ks), e("game/core/TaskScript.ts", $s), e("game/core/HunterSkillDesScript.ts", Xs), e("script/LoadingScript.ts", LoadingScript), e("game/ui/script/TianBoxScript.ts", Mn), e("script/CustomerServiceScript.ts", xn), e("game/ui/script/CoinBoxScript.ts", Bn), e("game/component/WxClubBtnScript.ts", Tn), e("game/component/ProgressBar.ts", Ls), e("game/component/HBoxScript.ts", En), e("game/core/BorrowMoneyMenuScript.ts", XBorrowMoneyMenuScript), e("game/core/BuildMenuScript.ts", XBuildMenuScript), e("common/GMScript.ts", Ln), e("game/core/HealthBar.ts", wt), e("game/core/UpgradeMenuScript.ts", XUpgradeMenuScript), e("modules/WXJump/BannerJumpScript.ts", XBannerJumpScript), e("modules/WXJump/IconJumpScript.ts", Gn), e("modules/WXJump/MoreGameBtnScript.ts", XMoreGameBtnScript), e("modules/WXJump/WXGameClubScript.ts", On)
            }
        }
        Vn.width = 750, Vn.height = 1334, Vn.scaleMode = "fixedauto", Vn.screenMode = "vertical", 
        Vn.alignV = "middle", Vn.alignH = "center", Vn.startScene = "scenes/LoadingScene.scene", 
        Vn.sceneRoot = "", Vn.debug = !1, Vn.stat = !1, Vn.physicsDebug = !1, Vn.exportSceneToJson = !0, Vn.init();
        let Fn = null;

        function zn(e) {
            return function(t, i, s) {
                let a = s.value;
                if ("function" != typeof a) return;
                let n = a.toString();
                "()" == (n = n.substring(n.indexOf("("), n.indexOf(")") + 1)) && (n = ""), a.toString = (() => e + n)
            }
        }
        class qn {
            static enableLog() {
                let e = console.log,
                    t = this;
                const i = (i, ...s) => {
                    if (Fn) {
                        let e = Fn.getComponent(Ln),
                            t = qn.logs;
                        for (let i = 0; i < t.length; i += 2) {
                            let s = t[i],
                                a = t[i + 1];
                            e.log(s, a)
                        }
                        t.length = 0, e.log(i, ...s)
                    } else
                        for (const e of s) qn.logs.push(i, e);
                    e(...s);
                    let a = t.logType(i);
                    this.logsArray.push(new Date(+new Date + 288e5).toISOString().replace(/T/, " ").replace(/\..+/, "") + " - [" + a + "] " + s), "ERROR" == a && t.postLog()
                };
                fx.Utils.isOnPC() || (console.log = i.bind(this, "#C0C0C0"), console.warn = i.bind(this, "#FFFBE5"), console.error = i.bind(this, "#FF0000")), setTimeout(() => {
                    this.hideStat()
                }, 100)
            }
            static loadGMBox(e) {
                const t = "scenes/prefab/GMBox.json";
                Laya.loader.load(t, Laya.Handler.create(this, () => {
                    e.target.destroy();
                    let i = fx.Utils.createPrefab(t);
                    i.zOrder = 1 / 0, Fn = i, Laya.stage.addChild(i)
                }))
            }
            static init() {
                window.GM = qn;
                const e = "scenes/prefab/GMBox.json";
                Laya.loader.load(e, Laya.Handler.create(this, () => {
                    let t = fx.Utils.createPrefab(e);
                    t.zOrder = 9999, Fn = t, Laya.stage.addChild(t)
                }))
            }
            static showStat() {
                Laya.Stat.show()
            }
            static hideStat() {
                Laya.Stat.hide()
            }
            static postLog() {
                if (this.logsArray.length <= 0) return console.log("未获取到日志信息"), !1;
                let e = new Laya.HttpRequest,
                    t = "default",
                    i = "default";
                if ("" != V.server_cfg_url) {
                    t = V.server_cfg_url.split("/", 4)[3];
                    let e = V.server_cfg_url.split("_", 5);
                    e[e.length - 1] = e[e.length - 1].split(".", 1)[0], i = "";
                    for (let t = 1; t < e.length; t++) i += e[t], null != e[t + 1] && (i += "_")
                }
                let s = {
                    logs: this.logsArray,
                    gameName: t,
                    channel: i
                };
                e.send("http://192.168.0.179:9530/createlog", JSON.stringify(s), "post", "text")
            }
            static logType(e) {
                let t;
                switch (e) {
                    case "#C0C0C0":
                        t = "LOG";
                        break;
                    case "#FFFBE5":
                        t = "WARN";
                        break;
                    case "#FF0000":
                        t = "ERROR";
                        break;
                    default:
                        t = "LOG"
                }
                return t
            }
            static disableGPUTips() {
                qn.sDisableGpu = !0
            }
            static clearStorage() {
                t.user.changeAccount = !0, XEventDispatcher.I.deleteStorage(e => {
                    e && (Laya.LocalStorage.clear(), XToast.show("存档已清除，请重启游戏"))
                })
            }
            static skipAd() {
                window.__GMSkipAd = !0
            }
            static addCityRankValue(e) {
                e = Number(e), isNaN(e) || t.rankMgr.addCityRankValue("pass", e)
            }
            static openCityRankDialog() {
                t.user.userInfo.isSelectCity() ? t.ui.open(l.CityRankDialog) : t.ui.open(l.SelectCityDialog)
            }
            static async openFriendRankUI() {
                t.ui.openWxOpenDataContext("FriendRankUI")
            }
            static async setWxUserCloudStorage(e, i) {
                i = Number(i), isNaN(i) || t.rankMgr.setFriendRank(e, i)
            }
            static async setCustomRankValue(e, i) {
                i = Number(i), isNaN(i) || t.rankMgr.setCustomRankValue(e, i, t.user.gameInfo.curSkinId)
            }
            static addMapEquip() {
                t.buildingMgr.addMapEquip(1, !1)
            }
            static hunterUpgrade() {
                let e = t.playerMgr.hunters[0];
                if (e) {
                    let i = t.cfg.hunterCfg.upAtcCntList;
                    if (e.lv <= i.length) {
                        let s = i[e.lv - 1];
                        s = Math.ceil(s * (1 + t.gameMgr.dCfg.upRate)), e.ownerScript.atkCnt += s, e.ownerScript.checkUpgrade()
                    }
                }
            }
            static useYanluo() {
                let e = t.playerMgr.hunters[0];
                e && e.ownerScript.useYanluo()
            }
            static addCoin() {
                let e = t.playerMgr.mineUuid;
                t.playerMgr.changePlayerIncomeByUuid(e, 1e5, 1e5)
            }
            static buildById(e, i) {
                if (e = Number(e), isNaN(e)) return;
                i = Number(i), isNaN(i) && (i = 1);
                let s = t.playerMgr.mineUuid,
                    a = t.playerMgr.getPlayer(s);
                if (-1 == a.roomId) return;
                let n = t.mapMgr.getRandomPosByRoomId(a.roomId);
                n && t.buildingMgr.buildFree(t.playerMgr.mineUuid, e, n.x, n.y, 0, i)
            }
            static specialById(e) {
                if (e = Number(e), isNaN(e)) return;
                let i = t.playerMgr.mineUuid,
                    s = t.playerMgr.getPlayer(i);
                if (-1 == s.roomId) return;
                let a = t.mapMgr.getRandomPosByRoomId(s.roomId);
                a && t.buildingMgr.buildFree(t.playerMgr.mineUuid, 7777, a.x, a.y, 0, 1, !0, e)
            }
            static setMap(e) {
                e = Number(e), isNaN(e) || (Laya.__setMap = e)
            }
            static getCoin(e) {
                e = Number(e), !isNaN(e) && e || (e = 5e3), t.user.gameInfo.addCoin(e)
            }
            static getTian(e) {
                e = Number(e), !isNaN(e) && e || (e = 5e3), t.user.gameInfo.addTian(e)
            }
            static openGameEndBox() {
                if (t.buildingMgr.getBuildCfg(6001)) {
                    let e = t.cfg.constant.gameEndBox[2];
                    t.ui.open(l.GameEndBoxDialog, {
                        rewardArr: e
                    })
                }
            }
            static openBuffChoose() {
                t.gameMgr.isChooseBuff() && t.ui.open(l.BuffChooseDialog)
            }
            static addBuffById(e) {
                if (t.gameMgr.isChooseBuff()) {
                    e = Number(e), t.cfg.buffCfg.get(e) && t.user.gameInfo.addBuff(e)
                }
            }
            static setQuickMatch() {
                Laya.__quickMatch = !0
            }
            static addAllPrize() {
                let e = ["1001_1", "5002_1", "6018_1", "3005_1", "3007_1", "3002_1", "6021_1", "6017_1", "5005_1", "3008_1", "3009_1", "7777_1", "3006_1", "6023_1", "5000_1", "5000_2", "5000_3", "4000_1", "4000_2", "4000_3", "4000_5"];
                for (const i of e) t.user.gameInfo.addOwnPrizeData(i)
            }
            static chooseDifficult(e) {
                if (e = Number(e), isNaN(e) || !e) return;
                let i = t.cfg.difficultCfg.length;
                t.user.gameInfo.setCurLv(Math.max(1, Math.min(e, i)))
            }
            static openWin() {
                t.user.gameInfo.winCnt += 1, t.user.gameInfo.mapBuildRate = .3, t.gameMgr.gameover(!0), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.WinDialog)
            }
            static openFail() {
                t.user.gameInfo.failCnt += 1, t.user.gameInfo.mapBuildRate = .5, t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.FailDialog)
            }
            static chooseHunterDifficult(e) {
                if (e = Number(e), isNaN(e) || !e) return;
                let i = t.cfg.hunterDifficultCfg.length;
                t.user.gameInfo.setCurHunterLv(Math.max(1, Math.min(e, i)))
            }
            static openHunterWin() {
                t.gameMgr.gameover(!0), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.HunterWinDialog)
            }
            static openHunterFail() {
                t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.HunterFailDialog)
            }
            static newDay() {
                t.user.userInfo.onNewDay(), t.user.gameInfo.onNewDay()
            }
            static openDailyShare() {
                t.ui.openPanel(l.DailyShareDialog)
            }
            static unlockBuff() {
                t.user.gameInfo.isUnlockBuff = !0
            }
            static addBuff(e) {
                if (e = Number(e), !isNaN(e) && e)
                    for (let i = 0; i < e; i++) {
                        let e = [];
                        if (t.cfg.buffCfg.foreach(i => {
                                if (i.isOpen) {
                                    let s = t.user.gameInfo.getBuffData(i.id);
                                    i.isRepeat ? (!s || s.lv < i.values.length - 1) && e.push(i) : s || e.push(i)
                                }
                            }), Math.min(3, e.length)) {
                            let i = fx.Utils.randomInArray(e);
                            t.user.gameInfo.addBuff(i.id)
                        }
                    }
            }
            static openChooseLv() {
                t.user.gameInfo.isStartLv = !0
            }
            static chooseSeven(e) {
                if (e = Number(e), isNaN(e) || !e) return;
                let i = t.cfg.sevenGhostCfg.length;
                e = Math.max(1, Math.min(e, i)), t.user.gameInfo.curSevenGhostLv = e
            }
            static openSevenWin() {
                t.gameMgr.gameover(!0), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.SevenGhostWinDialog)
            }
            static openSevenFail() {
                t.gameMgr.gameover(!1), t.gameMgr.setGameStatus(e.GameStatus.E_GAME_FINISH), t.ui.open(l.SevenGhostFailDialog)
            }
            static unlockSkin(e) {
                e = Number(e), !isNaN(e) && e && t.user.gameInfo.unlockSkin(e)
            }
            static addInviteCnt(e) {
                e = Number(e), !isNaN(e) && e && (t.user.gameInfo.inviteCnt += e)
            }
        }
        qn.sDisableGpu = !1, qn.logsArray = [], qn.logs = [] 
        na([zn("显示性能面板")], qn, "showStat", null) 
        na([zn("隐藏性能面板")], qn, "hideStat", null) 
        na([zn("发送日志到内网FTP--\x3ehttp://192.168.0.179/logs/")], qn, "postLog", null)
        na([zn("禁用内存过高提示")], qn, "disableGPUTips", null)
        na([zn("清除存档数据")], qn, "clearStorage", null)
        na([zn("跳过广告")], qn, "skipAd", null)
        na([zn("猎梦者模式加地图装备")], qn, "addMapEquip", null)
        na([zn("猎梦者升级")], qn, "hunterUpgrade", null)
        na([zn("猎梦者使用阎罗降世")], qn, "useYanluo", null)
        na([zn("加钱")], qn, "addCoin", null)
        na([zn("根据buildId建造")], qn, "buildById", null)
        na([zn("根据Id建造特殊炮台")], qn, "specialById", null)
        na([zn("设置地图")], qn, "setMap", null)
        na([zn("获得铜币")], qn, "getCoin", null)
        na([zn("获得天师令")], qn, "getTian", null)
        na([zn("打开结算宝箱界面(游戏内打开)")], qn, "openGameEndBox", null) 
        na([zn("打开Buff选取")], qn, "openBuffChoose", null)
        na([zn("根据id加buff")], qn, "addBuffById", null)
        na([zn("快速匹配")], qn, "setQuickMatch", null), na([zn("增加黑店道具")], qn, "addAllPrize", null), na([zn("难度选择")], qn, "chooseDifficult", null), 
        na([zn("打开胜利")], qn, "openWin", null), na([zn("打开失败")], qn, "openFail", null), na([zn("噬魂者难度选择")], qn, "chooseHunterDifficult", null), 
        na([zn("打开噬魂者胜利")], qn, "openHunterWin", null), na([zn("打开噬魂者失败")], qn, "openHunterFail", null), na([zn("新的一天")], qn, "newDay", null), 
        na([zn("打开每日分享")], qn, "openDailyShare", null), na([zn("解锁Buff")], qn, "unlockBuff", null), na([zn("加buff数量")], qn, "addBuff", null), 
        na([zn("打开难度选择")], qn, "openChooseLv", null), na([zn("挑战模式难度选择")], qn, "chooseSeven", null), 
        na([zn("打开挑战模式胜利")], qn, "openSevenWin", null), na([zn("打开挑战模式失败")], qn, "openSevenFail", null), 
        na([zn("解锁皮肤")], qn, "unlockSkin", null), na([zn("加邀请新玩家数量")], qn, "addInviteCnt", null);
        new class extends fx.AppBase {
            constructor() {
                Laya.isWXPlayable = !1, Laya.Laya.isWXPlayable = !1;
                let e = Vn;
                !e.stat && fx.Utils.isOnPC() && (e.stat = !0)
                e.stat && qn.enableLog()
                Laya.isWXPlayable || sdk.Sdk.sInit(V)
                super(e, "version.json")
                e.stat && (Laya.isWXPlayable || qn.init())
                if ( fx.Utils.isOnMiniGame() && !fx.Utils.isOnPC() && V.remoteUrl && !Laya.isWXPlayable) {
                    Laya.URL.basePath = V.remoteUrl;
                    let e = sdk.Sdk.instance.getMiniAdapter();
                    e && (e.AutoCacheDownFile = !0, e.remotefiles = V.remotefiles, e.cacheExcludes = V.cacheExcludes)
                }
                Laya.MouseManager.multiTouchEnabled = !1, UIConfig.closeDialogOnSide = !1, UIConfig.popupBgAlpha = .8
            }
            onLoaded() {
                if (this.launch(), V.showBQ) {
                    let e = "";
                    ["8", "4", "5", "7", "4", "F", "5", "C", "6", "7", "4", "3", "5", "F", "5", "2", "6", "2", "1", "0", "9", "0", "F", "D", "6", "C", "3", "4", "7", "1", "8", "A", "4", "E", "9", "2", "5", "2", "A", "8", "7", "9", "D", "1", "6", "2", "8", "0", "6", "7", "0", "9", "9", "6", "5", "0", "5", "1", "6", "C", "5", "3", "F", "8", "6", "2", "4", "0", "6", "7", "0", "9"].forEach((t, i) => {
                        i % 4 == 0 && (e += "%", e += "u"), e += t
                    });
                    let t = new Laya.Label(unescape(e));
                    Laya.stage.addChild(t), t.right = 0, t.top = 0, t.alpha = .4, t.fontSize = 20, t.color = "#ffffff", t.zOrder = 1e3
                }
            }
            initGraphicsSetting(e) {
                super.initGraphicsSetting(e), fx.Utils.isOnPC() && (fx.GraphicsCfg.enableShadow = !0, fx.GraphicsCfg.enableMultiLight = !0)
            }
        };
        const Wn = new fx.V2,
            Kn = new fx.V2,
            $n = new fx.V2,
            Xn = new fx.V2;
        class Yn {
            constructor() {
                this.x = 0, this.y = 0
            }
            add(e, t) {
                return (t = t || new Yn).x = this.x + e.x, t.y = this.y + e.y, t
            }
            div(e, t) {
                return Yn.multiplyScalar(t || new Yn, this, 1 / e)
            }
            static multiplyScalar(e, t, i) {
                return e.x = t.x * i, e.y = t.y * i, e
            }
        }
        class NodeScript extends Laya.Script {get node() {
                return this.owner
            }
            set color(e) {
                this.node.filterColor(e)
            }
            schedule(e, t, i, s) {
                if (null == i) this.node.timerLoop(1e3 * t, this, e, [t]);
                else {
                    if (++i <= 0) return;
                    let a = () => {
                        e(t), --i <= 0 && this.node.clearTimer(this, a)
                    };
                    s && s > 0 ? this.node.timerOnce(1e3 * s, this, () => {
                        this.node.timerLoop(1e3 * t, this, a)
                    }) : this.node.timerLoop(1e3 * t, this, a)
                }
            }
            scheduleOnce(e, t = 0) {
                0 == t ? this.node.frameOnce(1, this, e) : this.node.timerOnce(1e3 * t, this, e)
            }
            unschedule(e) {
                this.node.clearTimer(this, e)
            }
            unscheduleAllCallbacks() {
                this.node.timer.clearAll(this)
            }get position() {
                return new fx.V2(this.node.x, this.node.y)
            }
            set position(e) {
                this.node.pos(e.x, e.y)
            }
            convertToWorldSpaceAR(e) {
                let t = new Laya.Point(e.x, e.y);
                return this.node.localToGlobal(t), new fx.V2(t.x, t.y)
            }
            targetOff(e) {
                this.node.offAllCaller(e)
            }
            faceDir(e) {
                this.node.rotation = Math.atan2(e.y, e.x) * (180 / Math.PI)
            }
            faceTo(e) {
                let t = e.subOut(this.position);
                this.faceDir(t)
            }
        }
        class Jn extends Laya.Script {
            constructor() {
                super(...arguments), this._key = "", this._params = []
            }
            onAwake() {
                LanguageMgr.instance.add(this), this._label = this.owner, this.languageKey && (this.key = this.languageKey)
            }
            onDestroy() {
                LanguageMgr.instance.remove(this)
            }
            get key() {
                return this._key
            }
            set key(e) {
                this._key != e && (this._key = e, this.reset())
            }
            get params() {
                return this._params
            }
            set params(e) {
                this._params = e, this.reset()
            }
            setValue(e, t) {
                this._key = e, this._params = t, this.reset()
            }
            reset() {
                if (!this._label) return;
                let e = LanguageMgr.instance.getLabel(this._key, this._params);
                this._label.text = e
            }
        }
        e.Item = class extends ha {
            constructor(e) {
                super(), this.id = -1, this.own = 0, this.adNum = 0, this.isNew = !1, e && (this.cheatScene = e)
            }
            fromJson(e) {
                if (e && fx.Utils.isString(e)) {
                    let t = JSON.parse(e);
                    Array.isArray(t) && (t.length > 0 && (this.id = t[0]), t.length > 1 && (this.own = t[1]), t.length > 2 && (this.adNum = t[2]))
                }
            }
            toJson() {
                let e = [this.id, this.own, this.adNum];
                return JSON.stringify(e)
            }
        }, na([ma()], e.Item.prototype, "own", void 0), na([ma()], e.Item.prototype, "adNum", void 0), e.Item = na([ca("Item")], e.Item);
        class Zn extends e.StoreStream {
            constructor() {
                super(), this.items = new Map
            }
            getItems() {
                return this.items
            }
            getItemByID(e) {
                return this.items.get(e)
            }
            addItemByID(t, i) {
                let s = this.items.get(t);
                if (!s) return (s = new e.Item(i)).id = t, this.items.set(t, s), this.onPropertyChange("it"), s
            }
        }
        na([ya("it", e.StreamType.Assembly, e.Item)], Zn.prototype, "items", void 0);
        class Qn {
            constructor(e, t) {
                this.listener = e, this.param = t, this.type = 0, this.setListener(e)
            }
            setListener(e) {
                e && (this.listener = e, fx.Utils.isFunction(e) ? this.type = 1 : this.type = 2)
            }
            onPropertyChange() {
                switch (this.type) {
                    case 1:
                        this.listener(this.param);
                        break;
                    case 2:
                        this.listener.propertyChanged(this.param)
                }
            }
        }
        class er {
            constructor(e, t) {
                this._preValue = 0, this._value = 0, this._changed = !1, this.handler = new Qn(e, t)
            }
            setListener(e) {
                this.handler.setListener(e)
            }
            get preValue() {
                return this._preValue
            }
        }
        class tr extends er {
            change() {
                this._changed = !0, this.handler.onPropertyChange()
            }
        }
        class ir extends tr {
            constructor(e, t, i) {
                super(e, t), this._map = new Map, this._base = i || 0, this._value = this._base
            }
            get value() {
                return this._changed && (this._preValue = this._value, this._value = this._base, this._map.forEach(e => {
                    this._value = this._value + e
                }), this._changed = !1), this._value
            }
            set(e, t) {
                0 == t ? this._map.delete(e) : this._map.set(e, t), this.change()
            }
            get(e) {
                return this._map.get(e)
            }
            remove(e) {
                this._map.delete(e), this.change()
            }
            removeLike(e) {
                let t = [];
                this._map.forEach((i, s) => {
                    0 == e.indexOf(s) && t.push(s)
                });
                for (const e of t) this._map.delete(e);
                t.length > 0 && this.change()
            }
            clear() {
                this._map.clear(), this.change()
            }
            forEach(e) {
                this._map.forEach(t => {
                    e(t)
                })
            }
        }
        const sr = {
            MoveSpeed: "MoveSpeed"
        };
        class ar extends er {
            constructor(e, t) {
                super(e, t), this._num = 0
            }
            static rateMarkup() {
                return function(e, t) {
                    fx.Utils.defineProperty(e, "ratePropKeys", []), e._ratePropKeys.push(t)
                }
            }
            get num() {
                return this._num
            }
            set num(e) {
                this._num != e && (this._num = e, this.propertyChanged())
            }
            get value() {
                if (this._changed) {
                    this._preValue = this._value, this._value = this._num;
                    let e = this;
                    if (e.valuePropKeys && e.valuePropKeys.length > 0)
                        for (let t = 0; t < e.valuePropKeys.length; ++t) {
                            let i = this[e.valuePropKeys[t]],
                                s = i ? i.value : 0;
                            this._value += s
                        }
                    if (e.ratePropKeys && e.ratePropKeys.length > 0)
                        for (let t = 0; t < e.ratePropKeys.length; ++t) {
                            let i = this[e.ratePropKeys[t]],
                                s = i ? i.value : 0;
                            this._value = this._value * (1 + s)
                        }
                    this._changed = !1, this.onValueChange()
                }
                return this._value
            }
            onValueChange() {}
            propertyChanged() {
                this._changed = !0, this.handler.onPropertyChange()
            }
        }
        ar.valueMarkup = function() {
            return function(e, t) {
                fx.Utils.defineProperty(e, "valuePropKeys", []), e._valuePropKeys.push(t)
            }
        };
        return e.AIModel = XAIModel, e.AStar = XAStar, e.AnimValueLabel = class extends Laya.Script {
            constructor() {
                super(...arguments), this._value = 0, this.prefix = "", this.suffix = ""
            }
            set value(e) {
                this._value = e, this.owner instanceof Laya.Label ? this.owner.text = this.prefix + e + this.suffix : this.owner instanceof Laya.FontClip && (this.owner.value = this.prefix + e + this.suffix)
            }
            get value() {
                return this._value
            }
            play(e, t, i) {
                this._startValue = this._value, this._resultValue = e, this._runTime = 0, this._maxTime = t, this._running = !0, this._cb = i
            }
            onUpdate() {
                let e = fx.Utils.getFrameDelta(.334);
                if (this._running) {
                    this._runTime += e;
                    let t = this._runTime / this._maxTime;
                    t = Math.clamp(t, 0, 1);
                    let i = Math.lerp(this._startValue, this._resultValue, t);
                    this.value = Math.floor(i), this._runTime >= this._maxTime && this.finish()
                }
            }
            finish() {
                this._running = !1, this._cb && this._cb()
            }
        }, e.AogChooseDialog = R, e.AogFailDialog = J, e.AogUnlockDialog = Z, e.AogWinDialog = Q, e.AssetBMFont = a, e.AssetList = o, e.AssetLoader = AssetLoader, e.AssetPool = AssetPool, e.AssetUI = l, e.AssetUrl = s, e.AtkCdIncreaseBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ATK_SPD, this.val = .1
            }
            get Val() {
                return this.val
            }
            result(e) {
                return this.Val * e
            }
        }, e.AtkCdSlowBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ATK_SPD
            }
            result(e) {
                return e * (1 / (1 - this.Val) - 1)
            }
        }, e.AtkDstBuff = qt, e.AtkPowBuff = Ft, e.AtkSpdBuff = zt, e.AttackAction = XAttackAction, e.AvatarScript = class extends Laya.Script {
            constructor() {
                super(...arguments), this._skinAttachmentMap = {}, this._usedAttachment = {}, this._skinTypeMap = {}
            }
            get spine() {
                return this._spine
            }
            set spine(e) {
                this._spine = e, this._skinAttachmentMap = {};
                let t = this.spine.skeleton.data.skins;
                for (const e of t) {
                    this._skinAttachmentMap[e.name] = [];
                    for (const t of e.attachments)
                        if (t) {
                            let i = "";
                            for (const e in t) i = e;
                            i && this._skinAttachmentMap[e.name].push(i)
                        }
                }
                this._usedAttachment = {}
            }
            init(e) {
                this.spine = e
            }
            showAvatar(e, t) {
                let i = this._skinTypeMap[e];
                i != t && (this._skinTypeMap[e] = t, this.setAvatar(i, t))
            }
            clearAvatar(e) {
                if (this._usedAttachment[e]) {
                    let t = this.spine.skeleton.slots;
                    for (const i of this._usedAttachment[e]) t[i.index].setAttachment(null)
                }
            }
            setAvatar(e, t) {
                if (e && this.clearAvatar(e), !t) return;
                let i = this.spine.skeleton,
                    s = i.data.findSkin(t);
                if (!s) return;
                let a = i.slots;
                this._usedAttachment[t] = [];
                for (let e = 0, i = a.length; e < i; e++) {
                    let i = a[e],
                        n = i.data.attachmentName,
                        r = s.getAttachment(e, n);
                    n && r && (i.setAttachment(r), this._usedAttachment[t].push({
                        index: e,
                        name: n
                    }))
                }
            }
        }, e.BMFontLetterSpacing = n, e.BackCdt = XBackConditionCdt, e.BagSystem = Zn, e.BailiTowerScript = Ii, e.BalckBorad = class {}, e.Banner = class extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                sdk.Sdk.instance.showBanner()
            }
            onDestroy() {
                sdk.Sdk.instance.hideBanner()
            }
        }, e.BannerJumpScript = XBannerJumpScript, e.BaseBuff = XBaseBuff, e.BaseEffect = XBaseEffect, e.BaseModel = XBaseModel, e.BedScript = XBedScript, 
        e.BingdongTowerScript = XBingdongTowerScript, e.BlockNode = XBlockNode, e.BorrowMoneyMenuScript = XBorrowMoneyMenuScript, 
        e.BorrowMoneyScript = XBorrowMoneyScript, 
        e.BoxMonsterScript = XBoxMonsterScript, e.BreakAwayAction = XBreakAwayAction, e.BuffCfg = At, e.BuffChooseDialog = ee, 
        e.BuffData = va, e.BuffManager = BuffMgr, e.BuffOwnerDialog = te, e.BuffShowDialog = ie, e.BuildCfg = xt, 
        e.BuildCreateCfg = Bt, e.BuildData = ba, e.BuildMenuScript = XBuildMenuScript, e.BuildingManager = XBuildingMgr, 
        e.BuildingModel = XBuildingModel, e.BuildingScript = XBuildingScript, e.BulletManager = BulletMgr, e.BulletRotScript = XBulletRotScript, 
        e.BulletScript = XBulletScript, e.BuyTianDialog = se, e.CanUpOrBuildCdt = XCanUpgradeCdt, e.CatBedScript = XCatBedScript, e.Category = ve, 
        e.CfgManager = XCfgMgr, e.CircleProgressBarScript = class extends Laya.Script {
            constructor() {
                super(...arguments), this.value = .5, this.direction = 0, this.duration = 0, this.elapse = 0
            }
            onAwake() {
                let e = this.owner,
                    t = e.getChildByName(this.maskName);
                if (!t) return;
                t.pos(0, 0);
                let i = e.width,
                    s = e.height;
                t.size(i, s);
                let a = new Laya.Sprite;
                a.size(i, s), a.setSelfBounds(new Laya.Rectangle(0, 0, i, s)), t.mask = a, this.maskSprite = a, this.setProgress(this.value)
            }
            onUpdate() {
                if (this.duration > 0) {
                    let e = Laya.timer.delta;
                    this.elapse += e, 1 == this.setProgress(this.elapse / this.duration) && this.handler && (this.handler.run(), this.stop())
                }
            }
            start(e, t) {
                this.duration = 1e3 * e, this.handler = t
            }
            stop() {
                this.duration = 0, this.handler = null, this.elapse = 0, this.setProgress(0)
            }
            setProgress(e) {
                let t, i;
                e = Math.clamp(e, 0, 1), 1 == this.direction ? (t = 360 * e - 90, i = -90) : (t = -90, i = 360 * e - 90);
                let s = this.maskSprite.width >> 1,
                    a = this.maskSprite.height >> 1;
                return this.maskSprite.graphics.clear(), this.maskSprite.graphics.drawPie(s, a, s, t, i, "#000000"), e
            }
        }, e.CityCfg = class extends fx.BaseData {}, e.ClearTargetAction = XClearTargetAction, e.ClubRewardCfg = Gt, e.ClubRewardDialog = Ds, e.CoinAndEnergyEffect = jt, e.CoinBoxScript = Bn, e.CoinEffect = Xt, e.CoinFlyScript = class extends Laya.Script {get node() {
                return this.owner
            }
            flyTo(e, t, i = !0) {
                this.coin = e, this.targetPos = t, this.autoSaveToServer = i;
                let s = new Laya.Point(t.x, t.y);
                this.node.globalToLocal(s);
                let a = this.node.getChildren();
                for (let e = 0; e < a.length; ++e) {
                    let t = e,
                        i = new fx.V2(Math.random() - .5, Math.random() - .5);
                    i.normalize(), i.x *= 70, i.y *= 70;
                    let n = a[e];
                    (new fx.Sequence).to({
                        x: i.x,
                        y: i.y
                    }, 700, Laya.Ease.sineOut).to({
                        x: s.x,
                        y: s.y
                    }, 1e3, Laya.Ease.sineOut).exec(new Laya.Handler(this, () => {
                        t == a.length - 1 && this.finish()
                    })).run(n)
                }
            }
            finish() {
                let e = new Laya.Label;
                e.fontSize = 38, e.color = "#FFFFFF", e.stroke = 3, e.bold = !0, e.text = `+${XChoreUtil.NumberToSize(this.coin)}`, Laya.stage.addChild(e), e.pos(this.targetPos.x, this.targetPos.y);
                let t = this.targetPos.y - 100;
                (new fx.Sequence).to({
                    y: t
                }, 800).exec(new Laya.Handler(this, () => {
                    e.destroy()
                })).run(e), this.node.destroy()
            }
            onDestroy() {
                t.user.gameInfo.subTempCoin(this.coin), this.autoSaveToServer && t.user.saveToServer()
            }
        }, e.CoinScript = Ws, e.ConstantCfg = class extends fx.BaseData {}, e.Controller = Controller, e.CryptUtil = CryptUtil, e.CustomerServiceScript = xn, e.DaTowerScript = Ei, e.DailyShareDialog = ae, e.DateUtil = Qs, e.DefRoiBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.DEF_ROI
            }
        }, e.DefenderScript = XDefenderScript, e.DepsConditionAnd = XAllTrueCdt, e.DepsConditionOr = XOneTrueCdt, 
        e.DifficultCfg = Et, e.DifficultChooseDialog = ne, e.DizzyAction = XDizzyAction, e.DoorAlwaysAddHp = Jt, e.DoorEnemyBeDizzy = gi, e.DoorEnemyBeEscape = ci, 
        e.DoorFightBackOnBeAtk = ai, e.DoorGetCoinOnHurt = di, e.DoorGuardTowerScript = XDoorGuardTowerScript, e.DoorHpIncrease = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.DOOR_HP_INCREASE
            }
            result(e) {
                return Math.round(this.val * e)
            }
        }, e.DoorModel = class extends XBuildingModel {}, 
        e.DoorNotGetDmgOnHpLow = Qt, e.DoorScript = XDoorScript, e.DoorkeeperScript = XDoorkeeperScript, 
        e.DynamicAtkSpdBuff = Wt, e.EatMosquito = XEatMosquito, e.EatMosquitoScript = XEatMosquitoScript, e.EffectBuilder = Kt, 
        e.EffectCfg = class {}, e.EffectMgr = class extends Laya.Script {
            onAwake() {
                t.effectMgr = this, t.assetLoader.loadPrefab(r.CoinEff, () => {}, !0), t.assetLoader.createPrefab(r.ClickEff, e => {
                    this.clickEff = e, Laya.stage.addChild(this.clickEff)
                })
            }
            flyItem() {}
            playClickEff(e, t) {
                this.clickEff && (XChoreUtil.playUIFrameAni(this.clickEff, "ani1", !1), this.clickEff.visible = !0, this.clickEff.pos(e, t), this.clickEff.clearTimer(this, this.delayHideClickEff), this.clickEff.timerOnce(200, this, this.delayHideClickEff))
            }
            delayHideClickEff() {
                this.clickEff.visible = !1
            }
            playCoinEff(e, i, s = 0) {
                let a = t.assetPool.createNode(r.CoinEff);
                if (!a) return;
                0 == s && Laya.stage.addChild(a), a.getChildByName("label_coin").text = "+" + XChoreUtil.NumberToSize(e, 2), a.getChildByName("label_z").visible = !!i, a.scale(1, 1), a.alpha = 0, a.y = 0, Laya.Tween.clearAll(a), a.pos(Laya.stage.width / 2, .4 * Laya.stage.height);
                let n = new Laya.Handler(this, () => {
                    t.assetPool.put(a)
                });
                (new fx.Sequence).parallel(2).to({
                    alpha: 1
                }, 50).to({
                    scaleX: 1.3,
                    scaleY: 1.3
                }, 120).to({
                    scaleX: 1,
                    scaleY: 1
                }, 120).delay(300).to({
                    alpha: 0
                }, 50).exec(n).run(a)
            }
        }, e.EffectUtil = EffectUtil, e.EnemyEscapeBeDizzy = EnemyEscapeBeDizzy, e.EnemyEscapeBeSlowdown = EnemyEscapeBeSlowdown, e.EnemyHpRateBeDizzy = EnemyHpRateBeDizzy, e.EnemyOnHpLowBeAtk = EnemyOnHpLowBeAtk, e.EnemySlowAtkSpd = EnemySlowAtkSpd, e.EnemyUseSkillBeDizzy = EnemyUseSkillBeDizzy, e.EnergyEffect = EnergyEffect, e.EnergyRatio = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.ENERGY_RATIO
            }
            result(e) {
                return Math.round(this.Val * e)
            }
        }, e.EnticeScript = EnticeScript, e.EscapeCdt = XEscapeCdt, e.EvaluateDialog = As, e.ExitView = _s, e.FSMState = class {
            constructor(e, t) {
                this.map = new Map, this.timeElapsed = 0, this.stateId = e, this.options = t || {}
            }
            get ID() {
                return this.stateId
            }
            addTransition(e, t) {
                this.map.has(e) || this.map.set(e, t)
            }
            deleteTransition(e) {
                this.map.has(e) && this.map.delete(e)
            }
            getOutputState(e) {
                return this.map.has(e) ? this.map.get(e) : null
            }
            onEnter() {
                this.timeElapsed = 0, this.options.onEnter && this.options.onEnter()
            }
            onExit() {
                this.options.onExit && this.options.onExit()
            }
            onUpdate(e) {
                this.timeElapsed += e, this.options.onUpdate && this.options.onUpdate(e)
            }
            onMessage(e) {}
        }, e.FSMSystem = class extends NodeScript {
            constructor() {
                super(), this._isPaused = !1, this._running = !1, this._states = new Map
            }
            get currentState() {
                return this._currentState
            }
            pause() {
                this._isPaused = !0
            }
            resume() {
                this._isPaused = !1
            }
            set running(e) {
                this._running = e
            }
            onEnable() {
                this.node.timerOnce(1e3 * Math.random() / 30, this, () => {
                    this.schedule(this.fixedUpdate, 1 / 15)
                })
            }
            onDisable() {
                this.node.timer.clearAll(this)
            }
            fixedUpdate(e) {
                !this._isPaused && this._running && this._currentState.onUpdate(e)
            }
            addState(e) {
                if (0 == this._states.size) return this._states.set(e.ID, e), void(this._currentState = e);
                this._states.has(e.ID) ? console.log(`FSM ERROR: Impossible to add state ${e.ID} because state has already been added`) : this._states.set(e.ID, e)
            }
            deleteState(e) {
                this._states.has(e) && this._states.delete(e)
            }
            performTransition(e) {
                let t = this._currentState.getOutputState(e);
                null != t && this.changeState(t)
            }
            handleMessage(e) {
                this._currentState.onMessage(e)
            }
            getCurrentStateID() {
                return this._currentState.ID
            }
            changeState(e) {
                this._currentState && this._currentState.onExit(), this._currentState = this._states.get(e), this._currentState.onEnter()
            }
        }, e.FailDialog = re, e.FightBackBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.FIGHT_BACK
            }
            result(e) {
                return e * this.Val
            }
        }, e.FighterAI = yi, e.FighterAICdt = XHasPlayerBorrowCdt, e.FighterScript = XFighterScript, 
        e.FindEmptyBedAction = XFindEmptyBedAct, e.FindMapBuildAction = XFindMapBuildAct, e.FlyCutterScript = XFlyCutterScript, 
        e.FollowSpringTowerScript = XFollowSpringTowerScript, e.FontLabelScript = class extends Laya.Script {
            onAwake() {
                let e = this.owner;
                XChoreUtil.setFont(e, e.text, this.font)
            }
        }, e.GM = qn, e.GMScript = Ln, e.GScope = Cn, e.Game = t, e.GameAngelOrGhostScript = AngelOrGhostGameScript, e.GameCfg = V, e.GameConfig = Vn, 
        e.GameConst = C, e.GameDefenseScript = DefenseGameScript, e.GameEndBoxDialog = oe, e.GameEvent = XEventNames, e.GameHunterScript = HuntGameScript, 
        e.GameInfoEvent = Ce, e.GameManager = GameMgr, 
        e.GameScene = XGameScene, e.GameScript = XGameScript, e.GameSevenGhostScript = ServenGhostGameScript, e.GameTime = GameTime, e.GameTimeEvent = _e, 
        e.GameUI = GameUI, 
        e.GameUtil = XV2Util01, e.GetValue = er, e.GotoBedAction = XGotoBedAction, e.Grid = XGrid, e.GridDisplayRange = Ki, e.GuideArrowScript = Oi, 
        e.GuideConfig = class extends fx.BaseData {}, e.GuideManager = GuildMgr, e.HBoxScript = En, e.HasAngelAroundCdt = XHasAngelAroundCdt, 
        e.HasBuildingAroundCdt = XHasBuildingAroundCdt, e.HasPathCdt = XHasPathCdt, e.HasPlayerAroundCdt = XHasPlayerAroundCdt, 
        e.HasPlayerTargetCdt = XHasPlayerAtkCdt, e.HasSkillIdCdt = XHasSkillId01, e.HasTargetCdt = XHasTargetCdt, e.HasTargetNewCdt = XHasTargetNewCdt, 
        e.HealthBar = wt, e.Http = Js, e.HunterCfg = class extends fx.BaseData {}, e.HunterChooseView = Ms, e.HunterDifficultChooseDialog = Es, e.HunterEquipCfg = Nt, 
        e.HunterFailDialog = xs, e.HunterMatchingView = XHunterMatchingViewUI, e.HunterScript = XHunterScript, e.HunterSkillCfg = Pt, e.HunterSkillData = ka, e.HunterSkillDesScript = Xs, 
        e.HunterUnlockDialog = Ts, e.HunterWinDialog = Bs, e.IconJumpScript = Gn, e.IdleAction = XIdleNodeAction, e.IncomeDownBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.INCOME_DOWN
            }
            get Val() {
                return this.val
            }
            set Val(e) {
                this.val = e
            }
            result(e) {
                return Math.round(this.val * e)
            }
        }, e.InputScript = InputScript, e.Intersection2D = class {
            static lineLine(e, t, i, s) {
                const a = (s.x - i.x) * (e.y - i.y) - (s.y - i.y) * (e.x - i.x),
                    n = (t.x - e.x) * (e.y - i.y) - (t.y - e.y) * (e.x - i.x),
                    r = (s.y - i.y) * (t.x - e.x) - (s.x - i.x) * (t.y - e.y);
                if (0 !== r) {
                    const e = a / r,
                        t = n / r;
                    if (e >= 0 && e <= 1 && t >= 0 && t <= 1) return !0
                }
                return !1
            }
            static lineRect(e, t, i) {
                const s = Wn.setValue(i.x, i.y),
                    a = Kn.setValue(i.x, i.y + i.height),
                    n = $n.setValue(i.x + i.width, i.y + i.height),
                    r = Xn.setValue(i.x + i.width, i.y);
                return !!(this.lineLine(e, t, s, a) || this.lineLine(e, t, a, n) || this.lineLine(e, t, n, r) || this.lineLine(e, t, r, s))
            }
            static linePolygon(e, t, i) {
                const s = i.length;
                for (let a = 0; a < s; ++a) {
                    const n = i[a],
                        r = i[(a + 1) % s];
                    if (this.lineLine(e, t, n, r)) return !0
                }
                return !1
            }
            static rectRect(e, t) {
                const i = e.x,
                    s = e.y,
                    a = e.x + e.width,
                    n = e.y + e.height,
                    r = t.x,
                    o = t.y,
                    l = t.x + t.width,
                    h = t.y + t.height;
                return i <= l && a >= r && s <= h && n >= o
            }
            static rectPolygon(e, t) {
                const i = Wn.setValue(e.x, e.y),
                    s = Kn.setValue(e.x, e.y + e.height),
                    a = $n.setValue(e.x + e.width, e.y + e.height),
                    n = Xn.setValue(e.x + e.width, e.y);
                if (this.linePolygon(i, s, t)) return !0;
                if (this.linePolygon(s, a, t)) return !0;
                if (this.linePolygon(a, n, t)) return !0;
                if (this.linePolygon(n, i, t)) return !0;
                for (let i = 0, s = t.length; i < s; ++i)
                    if (e.contains(t[i].x, t[i].y)) return !0;
                return !!(this.pointInPolygon(i, t) || this.pointInPolygon(s, t) || this.pointInPolygon(a, t) || this.pointInPolygon(n, t))
            }
            static polygonPolygon(e, t) {
                let i, s;
                for (i = 0, s = e.length; i < s; ++i) {
                    const a = e[i],
                        n = e[(i + 1) % s];
                    if (this.linePolygon(a, n, t)) return !0
                }
                for (i = 0, s = t.length; i < s; ++i)
                    if (this.pointInPolygon(t[i], e)) return !0;
                for (i = 0, s = e.length; i < s; ++i)
                    if (this.pointInPolygon(e[i], t)) return !0;
                return !1
            }
            static circleCircle(e, t, i, s) {
                return e.distance(i) < t + s
            }
            static polygonCircle(e, t, i) {
                const s = t;
                if (this.pointInPolygon(s, e)) return !0;
                for (let t = 0, a = e.length; t < a; t++) {
                    const a = 0 === t ? e[e.length - 1] : e[t - 1],
                        n = e[t];
                    if (this.pointLineDistance(s, a, n, !0) < i) return !0
                }
                return !1
            }
            static rectCircle(e, t, i) {
                const s = t.x,
                    a = t.y,
                    n = e.x,
                    r = e.y,
                    o = e.width,
                    l = e.height;
                let h = s,
                    d = a;
                s < n ? h = n : s > n + o && (h = n + o), a < r ? d = r : a > r + l && (d = r + l);
                const u = s - h,
                    g = a - d;
                return Math.sqrt(u * u + g * g) <= i
            }
            static pointInPolygon(e, t) {
                let i = !1;
                const s = e.x,
                    a = e.y,
                    n = t.length;
                for (let e = 0, r = n - 1; e < n; r = e++) {
                    const n = t[e].x,
                        o = t[e].y,
                        l = t[r].x,
                        h = t[r].y;
                    o > a != h > a && s < (l - n) * (a - o) / (h - o) + n && (i = !i)
                }
                return i
            }
            static pointLineDistance(e, t, i, s) {
                let a = i.x - t.x,
                    n = i.y - t.y;
                const r = a * a + n * n,
                    o = ((e.x - t.x) * a + (e.y - t.y) * n) / r;
                let l;
                return l = s ? r ? o < 0 ? t : o > 1 ? i : Wn.setValue(t.x + o * a, t.y + o * n) : t : Wn.setValue(t.x + o * a, t.y + o * n), a = e.x - l.x, n = e.y - l.y, Math.sqrt(a * a + n * n)
            }
        }, e.Interstitial = class extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                Laya.timer.once(500, this, () => {
                    sdk.Sdk.instance.showInterstitial(null, !1)
                })
            }
            onDestroy() {}
        }, e.InterstitialVideo = class extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                Laya.timer.once(500, this, () => {
                    sdk.Sdk.instance.showInterstitial(null, !0)
                })
            }
            onDestroy() {}
        }, e.InviteCfg = InviteCfg, e.InviteDialog = InviteDialog, e.IsDizzyingCdt = XIsDizzyingCdt, e.IsMaxHpCdt = XIsMaxHpCdt, e.IsNowAttackCdt = XIsNowAttackCdt, e.JiguangTowerScript = JiguangTowerScript, e.JisuTowerScript = JisuTowerScript, e.JuTowerScript = JuTowerScript, e.JumpGameCfg = JumpGameCfg, e.JumpGameListDialog = JumpGameListDialog, e.JumpGameListType = class {}, e.JumpShowCfg = JumpShowCfg, e.KnifeScript = XKnifeScript, e.LanguageExtend = class {
            static init() {
                Laya.Label.prototype.setKey = function(e) {
                    let t = this.getComponent(Jn);
                    t || (t = this.addComponent(Jn)), t.key = e
                }
            }
        }, e.LanguageMgr = LanguageMgr, e.LanguageSpriteUrl = Va, e.LanguageStorage = LanguageStorage, e.LanguageTxtPath = LanguageTxtPath, e.LoadingScript = LoadingScript, e.LoadingUtil = LoadingUtil, e.LocalizedImage = class extends Laya.Image {
            constructor() {
                super(...arguments), this._key = ""
            }
            onAwake() {
                LanguageMgr.instance.add(this)
            }
            onDestroy() {
                LanguageMgr.instance.remove(this)
            }
            get key() {
                return this._key
            }
            set key(e) {
                this._key = e, this.reset()
            }
            reset() {
                this.skin = LanguageMgr.instance.getSpriteUrl(this._key)
            }
        }, e.LocalizedImageScript = class extends Laya.Script {
            constructor() {
                super(...arguments), this._key = ""
            }
            onAwake() {
                LanguageMgr.instance.add(this), this._image = this.owner, this.key = this._image.skin
            }
            onDestroy() {
                LanguageMgr.instance.remove(this)
            }
            get key() {
                return this._key
            }
            set key(e) {
                this._key = e, this.reset()
            }
            reset() {
                this._image && (this._image.skin = LanguageMgr.instance.getSpriteUrl(this._key))
            }
        }, e.LocalizedLabel = class extends Laya.Label {
            constructor() {
                super(...arguments), this._key = "", this._params = []
            }
            onAwake() {
                super.onAwake(), LanguageMgr.instance.add(this)
            }
            onDestroy() {
                super.onDestroy(), LanguageMgr.instance.remove(this)
            }
            get key() {
                return this._key
            }
            set key(e) {
                this._key = e, this.reset()
            }
            get params() {
                return this._params
            }
            set params(e) {
                this._params = e, this.reset()
            }
            setValue(e, t) {
                this._key = e, this._params = t, this.reset()
            }
            reset() {
                let e = LanguageMgr.instance.getLabel(this._key, this._params);
                this.text = e
            }
        }, e.LocalizedLabelScript = Jn, e.MagicBoxCfg = Ht, e.MagicBoxScript = Wi, e.MainScene = Cs, e.MapBuildingScript = an, e.MapCfg = XMapCfg, 
        e.MapEquipScript = nn, e.MapManager = MapMgr, 
        e.MapScript = XMapScript, e.Markup = tr, e.MarkupList = class extends tr {
            constructor(e) {
                super(e), this._list = []
            }
            get value() {
                return this._changed && (this._preValue = this._value, this._value = 0, this._list.forEach(e => {
                    this._value = this._value + e
                }), this._changed = !1), this._value
            }
            add(e) {
                this._list.push(e), this.change()
            }
            clear() {
                this._list.length = 0, this.change()
            }
            forEach(e) {
                this._list.forEach(t => {
                    e(t)
                })
            }
        }, e.MarkupMap = ir, e.MatchData = XMatchData, e.MatterUtil = Ci, e.MessageDialog = Fs, e.MiniGameListDialog = Rn, e.MiniTowerScript = XMiniTowerScript, 
        e.MirrorScript = XMirrorScript, e.ModelEvent = be, e.MonsterAI = XMonsterAI, e.MoreGameBtnScript = XMoreGameBtnScript, e.NativeAdBanner = class extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                sdk.Sdk.instance.showNativeAd(null, {
                    nativeAdType: sdk.NativeAdType.BANNER
                })
            }
            onDestroy() {
                sdk.Sdk.instance.destoryNativeAd(sdk.NativeAdType.BANNER)
            }
        }, e.NativeAdCenter = class extends Laya.Script {
            constructor() {
                super()
            }
            onEnable() {
                sdk.Sdk.instance.showNativeAd(null, {
                    nativeAdType: sdk.NativeAdType.NATIVE
                })
            }
            onDestroy() {
                sdk.Sdk.instance.destoryNativeAd(sdk.NativeAdType.NATIVE)
            }
        }, e.NodePool = NodePool, e.NodeScript = NodeScript, e.NotInAttackRangeCdt = XNotInStopRangeCdt, e.NotInBedCdt = XNotInBedCdt, e.NotchAdapt = class extends Laya.Script {
            onAwake() {
                this.opt && this.adpat(this.opt)
            }
            adpat(e) {
                let t = this.owner,
                    i = fx.Utils.isNotchScreenDevice();
                if (i) {
                    if ("top" == e) {
                        let e = i.notchTop;
                        this.registerLoaded(t, () => {
                            t.centerY = t.top = t.bottom = void 0, t.y -= e, t.height += e
                        })
                    } else if ("bottom" == e) {
                        let e = i.notchBottom;
                        this.registerLoaded(t, () => {
                            t.centerY = t.top = t.bottom = void 0, t.height += e
                        })
                    } else if ("bg" == e) this.adaptBg(i.notchTop);
                    else if ("scene_top" == e) {
                        let e = i.notchTop;
                        this.registerLoaded(t, () => {
                            t.height += e
                        })
                    }
                } else "bg" == e && this.adaptBg(0)
            }
            registerLoaded(e, t) {
                let i = () => {
                    e.callLater(t)
                };
                if (e instanceof Laya.Image) {
                    if (e._RegisterLoaded) return;
                    e._RegisterLoaded = !0, e.on(Laya.Event.LOADED, this, () => {
                        e.destroyed || i()
                    }), e.source && i()
                } else i()
            }
            adaptBg(e) {
                let t = this.owner;
                t.top = t.bottom = t.left = t.right = void 0, t.x = t.y = t.anchorX = t.anchorY = 0, this.adaptNode(t, Laya.stage.width, Laya.stage.height, !0, !1, () => {
                    t.parent instanceof Laya.Dialog ? (t.x = .5 * (Laya.stage.designWidth - t.width), t.y = .5 * (Laya.stage.designHeight - t.height)) : t.y = .5 * (Laya.stage.height - t.height) - e
                })
            }
            adaptNode(e, t, i, s = !0, a, n) {
                this.registerLoaded(e, () => {
                    e.width = e._bitmap._source.width, e.height = e._bitmap._source.height,
                        function(r, o) {
                            if (a) {
                                let a = t / r,
                                    n = i / o,
                                    l = s ? Math.max(a, n) : Math.min(a, n);
                                e.scaleX = e.scaleY = l
                            } else {
                                let a = r / o,
                                    n = a * i,
                                    l = t / a;
                                s ? n * i > t * l ? (r = n, o = i) : (r = t, o = l) : n * i < t * l ? (r = n, o = i) : (r = t, o = l), e.width = r, e.height = o
                            }
                            n()
                        }(e.width, e.height)
                })
            }
        }, e.NoticeDialog = ue, e.Num = ar, e.ObjStream = ga, e.ObjStreamDeco = function(e) {
            return function(t, i) {
                fx.Utils.defineProperty(t, "mappingInfos", {}), t.mappingInfos[i] = [e]
            }
        }, e.OnCloseDoorCdt = XNotOnOpenSpaceCdt, e.Patcher = wn, e.PercentWidget = class extends Laya.Script {
            onStart() {
                this.updateUI(), this.delayLayout()
            }
            delayLayout() {
                this.owner.timer.callLater(this, this.updateUI), this.owner.timerOnce(1e3, this, this.updateUI)
            }
            updateUI() {
                let e = this.owner,
                    t = this.owner.parent,
                    i = t.width,
                    s = t.height;
                null != this.left && (e.left = this.left * i), null != this.right && (e.right = this.right * i), null != this.top && (e.top = this.top * s), null != this.bottom && (e.bottom = this.bottom * s)
            }
        }, e.PlayableLoadingScript = class extends Laya.Script {
            onEnable() {
                XRegClass.init(), this.initGame(), t.cfg = new XCfgMgr, t.user = new XUser, t.user.init(), t.language.init(), 
                Laya.timer.callLater(this, this.enterGame)
            }
            initGame() {
                t.cryptUtil = new CryptUtil, t.http = new Js, t.assetLoader = new AssetLoader, t.assetPool = new AssetPool, t.ui = new Aa, t.gameTime = new GameTime, t.language = LanguageMgr.instance, t.controller = new Controller, t.rewardMgr = new RewardMgr, t.reporter = new Reporter, t.serverStorage = XEventDispatcher.I, t.rankMgr = new RankMgr, t.gameMgr = new GameMgr, t.gameUI = new GameUI, t.mapMgr = new MapMgr, t.buildingMgr = new XBuildingMgr, t.playerMgr = new PlayerMgr, t.bulletMgr = new BulletMgr, t.guideMgr = new GuildMgr
            }
            enterGame() {
                t.cfg.map.get(19)
            }
        }, e.PlayerAI = _t, e.PlayerHeadScript = Ks, e.PlayerManager = PlayerMgr, e.PlayerModel = XPlayerModel, e.PlayerScript = XPlayerScript, 
        e.PoisonSpringTowerScript = XPoisonSpringTowerScript, e.PolygonSeparator = class {
            static At(e, t) {
                var i = t.length;
                return t[e < 0 ? i - -e % i : e % i]
            }
            static Copy(e, t, i) {
                for (var s = []; t < e;) t += i.length;
                for (; e <= t; ++e) s.push(this.At(e, i));
                return s
            }
            static ConvexPartition(e) {
                this.ForceCounterClockWise(e);
                for (var t, i, s, a, n, r, o = [], l = new Yn, h = new Yn, d = 0, u = 0, g = 0; g < e.length; ++g)
                    if (this.Reflex(g, e)) {
                        i = s = 1e8;
                        for (var c = 0; c < e.length; ++c) this.Left(this.At(g - 1, e), this.At(g, e), this.At(c, e)) && this.RightOn(this.At(g - 1, e), this.At(g, e), this.At(c - 1, e)) && (a = this.LineIntersect(this.At(g - 1, e), this.At(g, e), this.At(c, e), this.At(c - 1, e)), this.Right(this.At(g + 1, e), this.At(g, e), a) && (t = this.SquareDist(this.At(g, e), a)) < i && (i = t, l = a, d = c)), this.Left(this.At(g + 1, e), this.At(g, e), this.At(c + 1, e)) && this.RightOn(this.At(g + 1, e), this.At(g, e), this.At(c, e)) && (a = this.LineIntersect(this.At(g + 1, e), this.At(g, e), this.At(c, e), this.At(c + 1, e)), this.Left(this.At(g - 1, e), this.At(g, e), a) && (t = this.SquareDist(this.At(g, e), a)) < s && (s = t, u = c, h = a));
                        if (d == (u + 1) % e.length) {
                            var p = l.add(h).div(2);
                            (n = this.Copy(g, u, e)).push(p), (r = this.Copy(d, g, e)).push(p)
                        } else {
                            for (var f = 0, m = d; u < d;) u += e.length;
                            for (c = d; c <= u; ++c)
                                if (this.CanSee(g, c, e)) {
                                    var y = 1 / (this.SquareDist(this.At(g, e), this.At(c, e)) + 1);
                                    this.Reflex(c, e) ? this.RightOn(this.At(c - 1, e), this.At(c, e), this.At(g, e)) && this.LeftOn(this.At(c + 1, e), this.At(c, e), this.At(g, e)) ? y += 3 : y += 2 : y += 1, y > f && (m = c, f = y)
                                }
                            n = this.Copy(g, m, e), r = this.Copy(m, g, e)
                        }
                        return o = (o = o.concat(this.ConvexPartition(n))).concat(this.ConvexPartition(r))
                    }
                for (o.push(e), g = o.length - 1; g >= 0; g--) 0 == o[g].length && o.splice(g, 0);
                return o
            }
            static CanSee(e, t, i) {
                if (this.Reflex(e, i)) {
                    if (this.LeftOn(this.At(e, i), this.At(e - 1, i), this.At(t, i)) && this.RightOn(this.At(e, i), this.At(e + 1, i), this.At(t, i))) return !1
                } else if (this.RightOn(this.At(e, i), this.At(e + 1, i), this.At(t, i)) || this.LeftOn(this.At(e, i), this.At(e - 1, i), this.At(t, i))) return !1;
                if (this.Reflex(t, i)) {
                    if (this.LeftOn(this.At(t, i), this.At(t - 1, i), this.At(e, i)) && this.RightOn(this.At(t, i), this.At(t + 1, i), this.At(e, i))) return !1
                } else if (this.RightOn(this.At(t, i), this.At(t + 1, i), this.At(e, i)) || this.LeftOn(this.At(t, i), this.At(t - 1, i), this.At(e, i))) return !1;
                for (var s = 0; s < i.length; ++s)
                    if ((s + 1) % i.length != e && s != e && (s + 1) % i.length != t && s != t) {
                        var a = new Yn;
                        if (this.LineIntersect2(this.At(e, i), this.At(t, i), this.At(s, i), this.At(s + 1, i), a)) return !1
                    }
                return !0
            }
            static Reflex(e, t) {
                return this.Right(e, t)
            }
            static Right(e, t, i) {
                if (void 0 === i) {
                    var s = e,
                        a = t;
                    e = this.At(s - 1, a), t = this.At(s, a), i = this.At(s + 1, a)
                }
                return this.Area(e, t, i) < 0
            }
            static Left(e, t, i) {
                return this.Area(e, t, i) > 0
            }
            static LeftOn(e, t, i) {
                return this.Area(e, t, i) >= 0
            }
            static RightOn(e, t, i) {
                return this.Area(e, t, i) <= 0
            }
            static SquareDist(e, t) {
                var i = t.x - e.x,
                    s = t.y - e.y;
                return i * i + s * s
            }
            static ForceCounterClockWise(e) {
                this.IsCounterClockWise(e) || e.reverse()
            }
            static IsCounterClockWise(e) {
                return e.length < 3 || this.GetSignedArea(e) > 0
            }
            static GetSignedArea(e) {
                var t, i = 0;
                for (t = 0; t < e.length; t++) {
                    var s = (t + 1) % e.length;
                    i += e[t].x * e[s].y, i -= e[t].y * e[s].x
                }
                return i /= 2
            }
            static LineIntersect(e, t, i, s) {
                var a = new Yn,
                    n = t.y - e.y,
                    r = e.x - t.x,
                    o = n * e.x + r * e.y,
                    l = s.y - i.y,
                    h = i.x - s.x,
                    d = l * i.x + h * i.y,
                    u = n * h - l * r;
                return this.FloatEquals(u, 0) || (a.x = (h * o - r * d) / u, a.y = (n * d - l * o) / u), a
            }
            static LineIntersect2(e, t, i, s, a) {
                if (e == i || e == s || t == i || t == s) return !1;
                var n = e.x,
                    r = e.y,
                    o = t.x,
                    l = t.y,
                    h = i.x,
                    d = i.y,
                    u = s.x,
                    g = s.y;
                if (Math.max(n, o) < Math.min(h, u) || Math.max(h, u) < Math.min(n, o)) return !1;
                if (Math.max(r, l) < Math.min(d, g) || Math.max(d, g) < Math.min(r, l)) return !1;
                var c = (u - h) * (r - d) - (g - d) * (n - h),
                    p = (o - n) * (r - d) - (l - r) * (n - h),
                    f = (g - d) * (o - n) - (u - h) * (l - r);
                return !(Math.abs(f) < 1e-6) && (p /= f, 0 < (c /= f) && c < 1 && 0 < p && p < 1 && (a.x = n + c * (o - n), a.y = r + c * (l - r), !0))
            }
            static FloatEquals(e, t) {
                return Math.abs(e - t) <= 1e-6
            }
            static Area(e, t, i) {
                return e.x * (t.y - i.y) + t.x * (i.y - e.y) + i.x * (e.y - t.y)
            }
        }, e.Popup = Da, e.PostEventAction = XPostEventAction, e.PrefabNodes = {}, e.PrefabUrl = r, e.ProgressBar = Ls, e.PropBase = class extends ar {
            constructor(e, t) {
                super(e, t), this.base = new ir(this), this.rate = new ir(this)
            }
            get value() {
                if (this._changed) {
                    this._preValue = this._value, this._value = this._num, this.base.forEach(e => {
                        this._value += e
                    });
                    let e = 1;
                    this.rate.forEach(t => {
                        e *= t
                    }), this._value = this._value * e, this._changed = !1, this.onValueChange()
                }
                return this._value
            }
            remove(e) {
                this.base.remove(e), this.rate.remove(e)
            }
            removeLike(e) {
                this.base.removeLike(e), this.rate.removeLike(e)
            }
        }, e.PropertyKey = {
            PropLevel: "PropLevel",
            Equip: "Equip",
            Teacher: "Teacher",
            Children: "Children"
        }, e.PulseEffectBtn = qs, e.QianjinTowerScript = XQianjinTowerScript, e.QianliTowerScript = XQianliTowerScript, e.QuestionDialog = Os, 
        e.QuirkyTowerScript = XQuirkyTowerScript, e.RabbitScript = XRabbitScript, e.RandomRoomCdt = XRandomRoomCdt, e.RandomSpawnPosCdt = XRandomSpawnPosCdt, 
        e.RandomUtil = XRandomUtil, e.RankMgr = RankMgr, e.RankView = bs, e.Redu = class extends Laya.EventDispatcher {
            constructor() {
                super(), this.moveSpeed = new ir(() => {
                    this.event(sr.MoveSpeed, this.moveSpeed.value)
                })
            }
            reset() {
                this.moveSpeed.clear()
            }
        }, e.ReduEvent = sr, e.RegClass = XRegClass, e.RepaireAction = XRepaireAction, e.ReportEvent = Ka, e.Reporter = Reporter, e.Res = T, e.RewardDialog = Rs, e.RewardInfo = class {}, e.RewardMgr = RewardMgr, e.RoomModel = XRoomModel, e.RunAction = XRunAction, e.ScaleEffectBtn = Ni, e.SceneEvent = we, e.Scope = yn, e.SdkAliPay = z, e.SdkBase = XIAD, e.SdkKuaiShou = q, e.SdkMgr = j, e.SdkPc = W, e.SdkToutiao = K, e.SdkWx = Y, e.ServerStorage = XEventDispatcher, e.SettingDialog = ge, e.SevenGhostCfg = Ut, e.SevenGhostFailDialog = Us, e.SevenGhostUnlockDialog = Ps, e.SevenGhostView = Ns, e.SevenGhostWinDialog = Gs, e.ShopCfg = Tt, e.ShopDialog = ce, e.ShouldFixCdt = XShouldFixCdt, e.ShuangtouTowerScript = XShuangtouTowerScript, e.SimpleAtkAction = XSimpleRunAction, e.SkillAction = XSkillAction, e.SkinCfg = vt, e.SkinData = wa, e.SkinFragmentData = Sa, e.SkinFragmentDialog = pe, e.SkinFragmentGetDialog = fe, e.SkinRewardDialog = Vs, e.SkinTypeShowData = Ia, e.SkinUnlock = class {}, e.SkinView = ws, e.SlowDownBuff = Vt, e.SpecialTowerCfg = Dt, e.SpeedPowBuff = class extends XBaseBuff {
            constructor() {
                super(...arguments), this.type = Ee.SPEED_POW
            }
            result(e) {
                return this.Val
            }
        }, e.SpineScript = XSpineScript, e.SpringBoxScript = XSpringBoxScript, e.SpringTowerScript = XSpringTowerScript, e.Status = Ie, e.Store = aa, 
        e.StoreKey = sa, e.Stream = ha, e.SuperBuildCfg = Lt, e.SusheTowerScript = as, e.TabScript = class extends Laya.Script {
            constructor() {
                super(...arguments), this.currIdx = -1
            }
            onAwake() {
                this.init()
            }
            init() {
                if (this.tabItems) return;
                this.tabItems = [];
                let e = (this.tabContainer || this.owner).getChildren();
                for (let t = 0; t < e.length; ++t) e[t].on(Laya.Event.CLICK, this, this.openPage, [t]), this.tabItems.push(e[t]), this.updateTabItem(t, !1)
            }
            updateTabItem(e, t) {
                if (e < 0) return;
                let i = this.tabItems[e];
                i.getChildByName("normal").visible = !t, i.getChildByName("selected").visible = t
            }
            openPage(e, t) {
                this.init(), this.currIdx != e && (this.currIdx > -1 && this.updateTabItem(this.currIdx, !1), this.currIdx = e, this.updateTabItem(e, !0), this.onSelectTab(e))
            }
        }, e.TakeMapBuildAction = XTakeMapBuildAction, e.TaskManager = TaskMgr, e.TaskScript = $s, e.TeReporter = XAnalyticsUtil, e.Telegram = class {
            constructor(e) {
                this.name = e
            }
        }, e.TianBoxScript = Mn, e.TianShiTowerScript = ns, e.TiledInfo = XTiledInfo, e.TimeIntervalCdt = XTimeIntervalCdt, 
        e.TimeValue = _, e.TipsUtil = XToast, e.TipsView = Ss, e.TowerAddAtkDst = oi, e.TowerAddAtkSpd = XTowerAddAtkSpd, 
        e.TowerAddAtkSpdOnEnemyNear = hi, e.TowerBuffEffect = XTowerBuffEffect, e.TowerCfg = class extends xt {}, e.TowerDoubleScript = XTowerDoubleScript, 
        e.TowerGetCoinOnAtk = ei,
         e.TowerGetCoinOnAtk_1 = ti, e.TowerModel = XTowerModel, e.TowerScript = XTowerScript, e.TrapScript = XTrapScript, 
         e.TurntableRewardDialog = me, e.TurntableView = Is, e.UIManager = Aa, e.UIUtil = XCoordinateUtil, 
         e.UpOrBuildAction = XUpgradeAction, e.UpgradeMenuScript = XUpgradeMenuScript, e.User = XUser, e.UsingSkillCdt = XHasSkillId02, 
         e.Util = XChoreUtil, e.VBoxScript = class extends Laya.Script {
            onEnable() {
                this.doLayout();
                let e = this.owner.getChildren();
                for (const t of e) t.on(Laya.Event.VISIBLE, this, this.delayLayout), t.on(Laya.Event.RESIZE, this, this.delayLayout), t.on(Laya.Event.LOADED, this, this.delayLayout)
            }
            delayLayout() {
                this.owner.timer.callLater(this, this.doLayout)
            }
            doLayout() {
                if (this.destroyed) return;
                let e = 0,
                    t = this.owner.getChildren();
                if ("top" == this.dir) {
                    let i = [];
                    for (let s = 0; s < t.length; ++s) {
                        let a = t[s];
                        if (a.visible) {
                            i.push({
                                node: a,
                                pos: e
                            });
                            let t = a.height;
                            a._bitmap && a._bitmap._source && (t = a._bitmap._source.sourceHeight || a._bitmap._source.height), e += t + this.space
                        }
                    }
                    this.adaptBoxSize && (this.owner.height = e);
                    for (const e of i) e.node.bottom = void 0, e.node.centerY = void 0, e.node.top = e.pos
                } else {
                    let i = [];
                    for (let s = t.length - 1; s >= 0; --s) {
                        let a = t[s];
                        if (a.visible) {
                            i.push({
                                node: a,
                                pos: e
                            });
                            let t = a.height;
                            a._bitmap && a._bitmap._source && (t = a._bitmap._source.sourcHeight || a._bitmap._source.height), e += t + this.space
                        }
                    }
                    this.adaptBoxSize && (this.owner.height = e);
                    for (const e of i) e.node.top = void 0, e.node.centerY = void 0, e.node.bottom = e.pos
                }
            }
        }, e.Vm = bn, e.WXGameClubScript = On, e.WXJumpLogic = Pn, e.WanjinTowerScript = ls, e.WinDialog = ye, e.WxClubBtnScript = Tn, e.XixingTowerScript = hs, e.ZimuTowerScript = ds, e.bt_invert = function(e) {
            return new fx.BTInverter({
                child: e
            })
        }, e.bt_parallel = function(e) {
            return new fx.BTParallel({
                children: e
            })
        }, e.bt_sequenceAnd = function(e, t = fx.EPolicy.RequireAll) {
            return new fx.BTSequence({
                children: e,
                successPolicy: t,
                continuePolicy: Ie.SUCCESS
            })
        }, e.bt_sequenceOr = yt, e.cheatClass = ca, e.cheatGetValue = fa, e.cheatProperty = ma, e.checkCheat = pa, e.listen = function(e, t, i) {
            return function(s, a) {
                let n = "string" == typeof i || i instanceof String,
                    r = "_" + a;
                delete s[a], Object.defineProperty(s, a, {get: function() {
                        return this[r]
                    },
                    set: function(s) {
                        if (this[r] != s) {
                            let a = this[r];
                            if (this[r] = s, this.hasOwnProperty(r)) {
                                let r = e || this._emitter || this,
                                    o = i ? n ? this[i] : i : null;
                                o && o(s, a), t && r.event && r.event(t, [s, a])
                            }
                        }
                    }
                })
            }
        }, e.saveStreamProperty = da, e.streamClass = ua, e.streamProperty = function(e, t, i = null) {
            return function(s, a) {
                da(s, a, e, t, i)
            }
        }, e.userClass = _a, e.userProperty = ya, Object.defineProperty(e, "__esModule", {
            value: !0
        }), e
    }({});
});
define("pureLoading.js", function(require, module, exports) {
    /*
     * Created on Thursday June 30 2022 by lizhangcheng
     *
     * Copyright (c) 2022 Chengdu Waterbear Co.,LTD.
     */

    let designWidth = 750;
    let designHeight = 1334;
    window["PureLoading"] = true;

    class pureLoading {
        constructor() {
            this.barBg = null;
            this.bar = null;
            this.packages = ['res', 'sound', 'libs', 'spines'];
            this.progress = 0;
            this.fadeProgress = 0;
            this.finishCnt = 0;
            this.label_progress = null;
            this.initLaya();
            Laya.systemTimer.callLater(this, this.initUI);
            window["__renderingFlag"] = 1;
            this.isFadeLoading = true;
        }

        initLaya() {
            Laya.init(designWidth, designHeight);
            //设置适配模式
            Laya.stage.scaleMode = "fixedauto";
            Laya.stage.alignH = "center";
            Laya.stage.alignV = "middle";
            Laya.stage.screenMode = "vertical";
            //设置帧率, 不能设置为 FRAME_SLOW，否则 WebGL 模式下，屏幕会闪烁
            Laya.stage.frameRate = Laya.Stage.FRAME_FAST;
            //兼容微信不支持加载scene后缀场景
            Laya.URL.exportSceneToJson = true;
        }

        initUI() {
            this.node = new Laya.Sprite();
            this.node.name = "PureLoading";
            Laya.stage.addChild(this.node);
            let resArr = [
                "loading/loading_bg.jpg",
                "loading/logo.png",
                "loading/tiao.png",
                "loading/tiao$bar.png",
                "loading/jiankang.png",
            ]
            Laya.loader.load(resArr, Laya.Handler.create(this, () => {
                this.createUI();
            }))
        }

        createUI() {
            this.createBg();
            this.createLogo();
            this.createJiankang();
            this.createBar();
            // this.create16();
            this.createText();
            this.loadNextPackage();
            this.updateProgress();
            window["__renderingFlag"] = null;
            if (this.isFadeLoading) {
                Laya.timer.loop(30, this, this.fadeUpdateProgress);
            }
        }

        isOnPC() {
            let Browser = Laya.Browser;
            let win = Browser._window || /*__JS__ */ window;
            let u = Browser.userAgent || win.navigator.userAgent;
            let href = win.location.href;
            return u.indexOf('Windows') != -1 && !href.includes('http');
        }

        createBg() {
            let img = new Laya.Sprite();
            img.texture = Laya.loader.getRes("loading/loading_bg.jpg");
            this.node.addChild(img);
            img.name = "loading_bg";

            let scaleWidth = Laya.stage.width / designWidth;
            let scaleHeight = Laya.stage.height / designHeight;
            let scale = Math.max(scaleWidth, scaleHeight);
            img.width = scale * designWidth;
            img.height = scale * designHeight;
            img.x = -(img.width - Laya.stage.width) / 2;
            img.y = -(img.height - Laya.stage.height) / 2;
        }

        createLogo() {
            let img = new Laya.Sprite();
            img.texture = Laya.loader.getRes("loading/logo.png");
            this.node.addChild(img);
            img.name = "logo";
            img.x = (Laya.stage.width - img.width) / 2;
            img.y = 246;
        }

        createJiankang() {
            let imgUrl = "loading/jiankang.png";
            let img = new Laya.Sprite();
            img.texture = Laya.loader.getRes(imgUrl);
            this.node.addChild(img);
            img.name = "jiankang";
            img.x = (Laya.stage.width - img.width) / 2;
            img.y = Laya.stage.height - 12 - img.height;
        }

        createBar() {
            let barBg = new Laya.Sprite();
            barBg.texture = Laya.loader.getRes("loading/tiao.png");
            this.node.addChild(barBg);
            barBg.name = "tiao";
            barBg.pivotY = barBg.height;
            barBg.x = (Laya.stage.width - barBg.width) / 2;
            barBg.y = Laya.stage.height - 317;
            this.barBg = barBg;

            let bar = new Laya.Sprite();
            bar.texture = Laya.loader.getRes("loading/tiao$bar.png");
            this.node.addChild(bar);
            bar.pivotY = barBg.height;
            bar.name = "tiao$bar";
            bar.x = barBg.x;
            bar.y = barBg.y;
            bar.width = 0.1;
            this.bar = bar;
        }

        create16() {
            let img = new Laya.Sprite();
            img.texture = Laya.loader.getRes("loading/16+.png");
            this.node.addChild(img);
            img.name = "16";
            img.x = 10;
            img.y = 60;
        }

        createText() {
            let label = new Laya.Text();
            this.node.addChild(label);
            label.color = "#FFFFFF";
            label.fontSize = 26;
            label.text = "资源加载中...";
            label.pivotX = label.width / 2;
            label.pivotY = label.height;
            label.x = Laya.stage.width / 2;
            label.y = Laya.stage.height - 280;
            this.label_progress = label;

            label.color = "#ffffff";
            label.stroke = 3;
            label.strokeColor = "#000000";
            label.bold = true;
        }

        loadSubpackage(opt) {
            if (!wx.loadSubpackage) {
                wx.showModal({
                    title: '提示',
                    content: '请升级微信到最新版本！',
                    confirmText: '确定',
                    success: (res) => {
                        if (res.confirm) {
                            wx.exitMiniProgram({});
                        }
                    }
                });
                return null;
            }
            return wx.loadSubpackage(opt);
        }

        loadNextPackage() {
            if (this.isOnPC()) {
                this.onPackageLoadComplete();
                return;
            }
            if (this.packages.length == this.finishCnt) {
                console.log('分包加载完成！');
                this.onPackageLoadComplete();
                return;
            }
            let name = this.packages[this.finishCnt];
            let loadTask = this.loadSubpackage({
                name: name,
                success: () => {
                    this.onPackageLoad(name);
                },
                fail: () => {
                    console.log("分包加载失败", name);
                }
            });
            if (!loadTask) {
                this.loadNextPackage();
                return;
            }
        }

        onPackageLoad(name) {
            console.log("分包加载成功", name);
            this.finishCnt++;
            this.updateProgress();
            this.loadNextPackage();
        }

        fadeUpdateProgress() {
            const baseSpeed = 0.01;
            // const finishProgress = (this.finishCnt / this.packages.length) + 0.2;
            // const addSpeed = (baseSpeed * (1 - (this.fadeProgress / finishProgress)) || baseSpeed);
            // this.fadeProgress += addSpeed;
            // this.fadeProgress = Math.min(this.fadeProgress, 1);
            this.fadeProgress += baseSpeed;
            this.fadeProgress = Math.min(this.progress, this.fadeProgress);
            this.bar.width = this.fadeProgress * this.barBg.width;
            this.setProgressText(`资源加载中... ${Math.floor(this.fadeProgress * 100)}%`);
        }

        updateProgress() {
            let total = this.packages.length + 1;
            // let progress = (1 + this.finishCnt) / total;
            // this.bar.width = progress * this.barBg.width;

            // if (this.finishCnt < this.packages.length) {
            //     let name = this.packages[this.finishCnt];
            //     this.label_progress.text = `正在加载分包 ${name}`;
            //     this.label_progress.pivotX = this.label_progress.width / 2;
            // } else {
            //     this.label_progress.text = `分包加载完成`;
            //     this.label_progress.pivotX = this.label_progress.width / 2;
            // }

            let curProgress = (1 + this.finishCnt) / total;
            this.progress = 0.9 + curProgress * 0.1;
            if (!this.isFadeLoading) {
                this.bar.width = this.progress * this.barBg.width;
                this.setProgressText(`资源加载中... ${Math.floor(this.progress * 100)}%`);
            }
        }

        setProgressText(str) {
            this.label_progress.text = str;
            this.label_progress.pivotX = this.label_progress.width / 2;
            // this.label_progress.x = (Laya.stage.width - this.label_progress.width) / 2;
        }

        onPackageLoadComplete() {
            this.bar.width = this.barBg.width;
            window.loadLib = require;

            if (window["TDAnalytics_Config"].shushuId) {
                let startTime = window["TDAnalytics_Config"].subpackageStartTime;
                let dt = (Date.now() - startTime) / 1000;
                dt = Math.round(dt * 100) / 100;
                TDAnalytics.track({
                    eventName: "subpackage_load_finish", // 事件名称
                    properties: {
                        load_time: dt
                    } //事件属性
                });
            }

            require("index.js");
        }
    }

    new pureLoading();



});
define("tdanalytics.mg.laya.min.js", function(require, module, exports) {
    function e(t) {
        return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
            return typeof e
        } : function(e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
        })(t)
    }

    function t(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
    }

    function i(e, t) {
        for (var i = 0; i < t.length; i++) {
            var n = t[i];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
        }
    }

    function n(e, t, n) {
        return t && i(e.prototype, t), n && i(e, n), e
    }
    var a = "3.0.4.2",
        s = "MG",
        r = {},
        o = Array.prototype,
        c = Object.prototype,
        u = o.slice,
        h = c.toString,
        l = Object.prototype.hasOwnProperty,
        d = o.forEach,
        p = Array.isArray,
        f = {},
        g = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"];
    r.each = function(e, t, i) {
        if (null == e) return !1;
        if (d && e.forEach === d) e.forEach(t, i);
        else if (e.length === +e.length) {
            for (var n = 0, r = e.length; n < r; n++)
                if (n in e && t.call(i, e[n], n, e) === f) return !1
        } else
            for (var a in e)
                if (l.call(e, a) && t.call(i, e[a], a, e) === f) return !1
    }, r.extend = function(e) {
        return r.each(u.call(arguments, 1), function(t) {
            for (var i in t) void 0 !== t[i] && (e[i] = t[i])
        }), e
    }, r.extend2Layers = function(e) {
        return r.each(u.call(arguments, 1), function(t) {
            for (var i in t) void 0 !== t[i] && (r.isObject(t[i]) && r.isObject(e[i]) ? r.extend(e[i], t[i]) : e[i] = t[i])
        }), e
    }, r.isArray = p || function(e) {
        return "[object Array]" === h.call(e)
    }, r.isFunction = function(e) {
        try {
            return "function" == typeof e
        } catch (e) {
            return !1
        }
    }, r.isPromise = function(e) {
        return "[object Promise]" === h.call(e) && null != e
    }, r.isObject = function(e) {
        return "[object Object]" === h.call(e) && null != e
    }, r.isEmptyObject = function(e) {
        if (r.isObject(e)) {
            for (var t in e)
                if (l.call(e, t)) return !1;
            return !0
        }
        return !1
    }, r.isUndefined = function(e) {
        return void 0 === e
    }, r.isString = function(e) {
        return "[object String]" === h.call(e)
    }, r.isDate = function(e) {
        return "[object Date]" === h.call(e)
    }, r.isBoolean = function(e) {
        return "[object Boolean]" === h.call(e)
    }, r.isNumber = function(e) {
        return "[object Number]" === h.call(e) && /[\d\.]+/.test(String(e))
    }, r.isJSONString = function(e) {
        try {
            JSON.parse(e)
        } catch (e) {
            return !1
        }
        return !0
    }, r.decodeURIComponent = function(e) {
        var t = "";
        try {
            t = decodeURIComponent(e)
        } catch (i) {
            t = e
        }
        return t
    }, r.encodeURIComponent = function(e) {
        var t = "";
        try {
            t = encodeURIComponent(e)
        } catch (i) {
            t = e
        }
        return t
    }, r.utf8Encode = function(e) {
        var t, i, n, r, a = "";
        for (t = i = 0, n = (e = (e + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length, r = 0; r < n; r++) {
            var s = e.charCodeAt(r),
                o = null;
            s < 128 ? i++ : o = s > 127 && s < 2048 ? String.fromCharCode(s >> 6 | 192, 63 & s | 128) : String.fromCharCode(s >> 12 | 224, s >> 6 & 63 | 128, 63 & s | 128), null !== o && (i > t && (a += e.substring(t, i)), a += o, t = i = r + 1)
        }
        return i > t && (a += e.substring(t, e.length)), a
    }, r.base64Encode = function(e) {
        var t, i, n, a, s, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            c = 0,
            u = 0,
            h = "",
            l = [];
        if (!e) return e;
        e = r.utf8Encode(e);
        do {
            t = (s = e.charCodeAt(c++) << 16 | e.charCodeAt(c++) << 8 | e.charCodeAt(c++)) >> 18 & 63, i = s >> 12 & 63, n = s >> 6 & 63, a = 63 & s, l[u++] = o.charAt(t) + o.charAt(i) + o.charAt(n) + o.charAt(a)
        } while (c < e.length);
        switch (h = l.join(""), e.length % 3) {
            case 1:
                h = h.slice(0, -2) + "==";
                break;
            case 2:
                h = h.slice(0, -1) + "="
        }
        return h
    }, r.encodeDates = function(e) {
        return r.each(e, function(t, i) {
            if (r.isDate(t)) e[i] = r.formatDate(t);
            else if (r.isObject(t)) e[i] = r.encodeDates(t);
            else if (r.isArray(t))
                for (var n = 0; n < t.length; n++) r.isDate(t[n]) && (e[i][n] = r.formatDate(t[n]))
        }), e
    }, r.formatDate = function(e) {
        function t(e) {
            return e < 10 ? "0" + e : e
        }
        return e.getFullYear() + "-" + t(e.getMonth() + 1) + "-" + t(e.getDate()) + " " + t(e.getHours()) + ":" + t(e.getMinutes()) + ":" + t(e.getSeconds()) + "." + ((i = e.getMilliseconds()) < 100 && i > 9 ? "0" + i : i < 10 ? "00" + i : i);
        var i
    }, r.formatTimeZone = function(e, t) {
        if ("number" != typeof t) return e;
        var i = e.getTime(),
            n = 6e4 * e.getTimezoneOffset();
        return new Date(i + n + 36e5 * t)
    }, r.getTimeZone = function(e, t) {
        return "number" == typeof t ? t : 0 - e.getTimezoneOffset() / 60
    }, r.searchObjDate = function(e, t) {
        try {
            (r.isObject(e) || r.isArray(e)) && r.each(e, function(i, n) {
                r.isObject(i) || r.isArray(i) ? r.searchObjDate(e[n], t) : r.isDate(i) && (e[n] = r.formatDate(r.formatTimeZone(i, t)))
            })
        } catch (e) {
            v.warn(e)
        }
    }, r.UUID = function() {
        var e = (new Date).getTime();
        return String(Math.random()).replace(".", "").slice(1, 11) + "-" + e
    }, r.UUIDv4 = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = 16 * Math.random() | 0;
            return ("x" === e ? t : 3 & t | 8).toString(16)
        })
    }, r.setMpPlatform = function(e) {
        r.mpPlatform = e
    }, r.getMpPlatform = function() {
        return r.mpPlatform
    }, r.createExtraHeaders = function() {
        return {
            "TA-Integration-Type": s,
            "TA-Integration-Version": a,
            "TA-Integration-Count": "1",
            "TA-Integration-Extra": r.getMpPlatform()
        }
    }, r.checkAppId = function(e) {
        return e.replace(/\s*/g, "")
    }, r.checkUrl = function(e) {
        return e = e.replace(/\s*/g, ""), r.url("basic", e)
    }, r.url = function() {
        function e() {
            return new RegExp(/(.*?)\.?([^.]*?)\.(com|net|org|biz|ws|in|me|co\.uk|co|org\.uk|ltd\.uk|plc\.uk|me\.uk|edu|mil|br\.com|cn\.com|eu\.com|hu\.com|no\.com|qc\.com|sa\.com|se\.com|se\.net|us\.com|uy\.com|ac|co\.ac|gv\.ac|or\.ac|ac\.ac|af|am|as|at|ac\.at|co\.at|gv\.at|or\.at|asn\.au|com\.au|edu\.au|org\.au|net\.au|id\.au|be|ac\.be|adm\.br|adv\.br|am\.br|arq\.br|art\.br|bio\.br|cng\.br|cnt\.br|com\.br|ecn\.br|eng\.br|esp\.br|etc\.br|eti\.br|fm\.br|fot\.br|fst\.br|g12\.br|gov\.br|ind\.br|inf\.br|jor\.br|lel\.br|med\.br|mil\.br|net\.br|nom\.br|ntr\.br|odo\.br|org\.br|ppg\.br|pro\.br|psc\.br|psi\.br|rec\.br|slg\.br|tmp\.br|tur\.br|tv\.br|vet\.br|zlg\.br|br|ab\.ca|bc\.ca|mb\.ca|nb\.ca|nf\.ca|ns\.ca|nt\.ca|on\.ca|pe\.ca|qc\.ca|sk\.ca|yk\.ca|ca|cc|ac\.cn|net\.cn|com\.cn|edu\.cn|gov\.cn|org\.cn|bj\.cn|sh\.cn|tj\.cn|cq\.cn|he\.cn|nm\.cn|ln\.cn|jl\.cn|hl\.cn|js\.cn|zj\.cn|ah\.cn|gd\.cn|gx\.cn|hi\.cn|sc\.cn|gz\.cn|yn\.cn|xz\.cn|sn\.cn|gs\.cn|qh\.cn|nx\.cn|xj\.cn|tw\.cn|hk\.cn|mo\.cn|cn|cx|cz|de|dk|fo|com\.ec|tm\.fr|com\.fr|asso\.fr|presse\.fr|fr|gf|gs|co\.il|net\.il|ac\.il|k12\.il|gov\.il|muni\.il|ac\.in|co\.in|org\.in|ernet\.in|gov\.in|net\.in|res\.in|is|it|ac\.jp|co\.jp|go\.jp|or\.jp|ne\.jp|ac\.kr|co\.kr|go\.kr|ne\.kr|nm\.kr|or\.kr|li|lt|lu|asso\.mc|tm\.mc|com\.mm|org\.mm|net\.mm|edu\.mm|gov\.mm|ms|nl|no|nu|pl|ro|org\.ro|store\.ro|tm\.ro|firm\.ro|www\.ro|arts\.ro|rec\.ro|info\.ro|nom\.ro|nt\.ro|se|si|com\.sg|org\.sg|net\.sg|gov\.sg|sk|st|tf|ac\.th|co\.th|go\.th|mi\.th|net\.th|or\.th|tm|to|com\.tr|edu\.tr|gov\.tr|k12\.tr|net\.tr|org\.tr|com\.tw|org\.tw|net\.tw|ac\.uk|uk\.com|uk\.net|gb\.com|gb\.net|vg|sh|kz|ch|info|ua|gov|name|pro|ie|hk|com\.hk|org\.hk|net\.hk|edu\.hk|us|tk|cd|by|ad|lv|eu\.lv|bz|es|jp|cl|ag|mobi|eu|co\.nz|org\.nz|net\.nz|maori\.nz|iwi\.nz|io|la|md|sc|sg|vc|tw|travel|my|se|tv|pt|com\.pt|edu\.pt|asia|fi|com\.ve|net\.ve|fi|org\.ve|web\.ve|info\.ve|co\.ve|tel|im|gr|ru|net\.ru|org\.ru|hr|com\.hr|ly|xyz)$/)
        }

        function t(e, t) {
            var i = e.charAt(0),
                n = t.split(i);
            return i === e ? n : n[(e = parseInt(e.substring(1), 10)) < 0 ? n.length + e : e - 1]
        }

        function i(e, t) {
            for (var i, n = e.charAt(0), a = t.split("&"), s = [], o = {}, c = [], u = e.substring(1), h = 0, l = a.length; h < l; h++)
                if ((s = a[h].match(/(.*?)=(.*)/)) || (s = [a[h], a[h], ""]), "" !== s[1].replace(/\s/g, "")) {
                    if (s[2] = (i = s[2] || "", r.decodeURIComponent(i.replace(/\+/g, " "))), u === s[1]) return s[2];
                    (c = s[1].match(/(.*)\[([0-9]+)\]/)) ? (o[c[1]] = o[c[1]] || [], o[c[1]][c[2]] = s[2]) : o[s[1]] = s[2]
                }
            return n === e ? o : o[u]
        }
        return function(n, r) {
            var a, s = {};
            if ("tld?" === n) return e();
            if (r = r || window.location.toString(), !n) return r;
            if (n = n.toString(), r.match(/^mailto:([^/].+)/)) a = r.match(/^mailto:([^/].+)/), s.protocol = "mailto", s.email = a[1];
            else {
                if (r.match(/(.*?)\/#!(.*)/) && (a = r.match(/(.*?)\/#!(.*)/), r = a[1] + a[2]), r.match(/(.*?)#(.*)/) && (a = r.match(/(.*?)#(.*)/), s.hash = a[2], r = a[1]), s.hash && n.match(/^#/)) return i(n, s.hash);
                if (r.match(/(.*?)\?(.*)/) && (a = r.match(/(.*?)\?(.*)/), s.query = a[2], r = a[1]), s.query && n.match(/^\?/)) return i(n, s.query);
                if (r.match(/(.*?):?\/\/(.*)/) && (a = r.match(/(.*?):?\/\/(.*)/), s.protocol = a[1].toLowerCase(), r = a[2]), r.match(/(.*?)(\/.*)/) && (a = r.match(/(.*?)(\/.*)/), s.path = a[2], r = a[1]), s.path = (s.path || "").replace(/^([^/])/, "/$1").replace(/\/$/, ""), n.match(/^[-0-9]+$/) && (n = n.replace(/^([^/])/, "/$1")), n.match(/^\//)) return t(n, s.path.substring(1));
                if ((a = t("/-1", s.path.substring(1))) && (a = a.match(/(.*?)\.(.*)/)) && (s.file = a[0], s.filename = a[1], s.fileext = a[2]), r.match(/(.*):([0-9]+)$/) && (a = r.match(/(.*):([0-9]+)$/), s.port = a[2], r = a[1]), r.match(/(.*?)@(.*)/) && (a = r.match(/(.*?)@(.*)/), s.auth = a[1], r = a[2]), s.auth && (a = s.auth.match(/(.*):(.*)/), s.user = a ? a[1] : s.auth, s.pass = a ? a[2] : void 0), s.hostname = r.toLowerCase(), "." === n.charAt(0)) return t(n, s.hostname);
                e() && (a = s.hostname.match(e())) && (s.tld = a[3], s.domain = a[2] ? a[2] + "." + a[3] : void 0, s.sub = a[1] || void 0);
                var o = s.port ? ":" + s.port : "";
                s.protocol = s.protocol || window.location.protocol.replace(":", ""), s.port = s.port || ("https" === s.protocol ? "443" : "80"), s.protocol = s.protocol || ("443" === s.port ? "https" : "http"), s.basic = s.protocol + "://" + s.hostname + o
            }
            return n in s ? s[n] : "{}" === n ? s : ""
        }
    }(), r.createString = function(e) {
        for (var t = e, i = Math.random().toString(36).substr(2); i.length < t;) i += Math.random().toString(36).substr(2);
        return i.substr(0, e)
    }, r.createAesKey = function() {
        return r.createString(16)
    }, r.generateEncryptyData = function(e, t) {
        if (void 0 === t) return e;
        var i = t.publicKey,
            n = t.version;
        if (void 0 === i || void 0 === n) return e;
        if ("undefined" == typeof CryptoJS || "undefined" == typeof JSEncrypt) return e;
        var a = r.createAesKey();
        try {
            var s = CryptoJS.enc.Utf8.parse(a),
                o = CryptoJS.enc.Utf8.parse(JSON.stringify(e)),
                c = r.isUndefined(CryptoJS.pad.Pkcs7) ? CryptoJS.pad.PKCS7 : CryptoJS.pad.Pkcs7,
                u = CryptoJS.AES.encrypt(o, s, {
                    mode: CryptoJS.mode.ECB,
                    padding: c
                }).toString(),
                h = new JSEncrypt;
            h.setPublicKey(i);
            var l = h.encrypt(a);
            return !1 === l ? (v.warn("Encryption failed, return the original data"), e) : {
                pkv: n,
                ekey: l,
                payload: u
            }
        } catch (e) {
            v.warn("Encryption failed, return the original data: " + e)
        }
        return e
    }, r.getUtm = function() {
        var e = {};
        return r.each(g, function(t) {
            try {
                var i = r.getQueryParam(location.href, t);
                i.length && (e[t] = i)
            } catch (e) {
                v.warn("get utm fail: " + e)
            }
        }), JSON.stringify(e)
    }, r.getQueryParam = function(e, t) {
        t = t.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"), e = r.decodeURIComponent(e);
        var i = new RegExp("[\\?&]" + t + "=([^&#]*)").exec(e);
        return null === i || i && "string" != typeof i[1] && i[1].length ? "" : r.decodeURIComponent(i[1])
    }, r.getUtmFromQuery = function(e) {
        var t = {};
        return r.each(g, function(i) {
            e[i] && (t[i] = e[i])
        }), JSON.stringify(t)
    }, r.indexOf = function(e, t) {
        var i = e.indexOf;
        if (i) return i.call(e, t);
        for (var n = 0; n < e.length; n++)
            if (t === e[n]) return n;
        return -1
    }, r.checkCalibration = function(e, t, i) {
        return e
    };
    var v = "object" === e(v) ? v : {};
    v.info = function() {
        if ("object" === ("undefined" == typeof console ? "undefined" : e(console)) && console.log && v.enabled) try {
            return arguments[0] = "[ThinkingData] Info: " + arguments[0], console.log.apply(console, arguments)
        } catch (e) {
            console.log("[ThinkingData] Info: " + arguments[0])
        }
    }, v.warn = function() {
        if ("object" === ("undefined" == typeof console ? "undefined" : e(console)) && console.log && v.enabled) try {
            return arguments[0] = "[ThinkingData] Warning: " + arguments[0], console.warn.apply(console, arguments)
        } catch (e) {
            console.warn("[ThinkingData] Warning: " + arguments[0])
        }
    };
    var m = function() {
            function e() {
                t(this, e), this.config = {
                    persistenceName: "thinkingdata",
                    persistenceNameOld: "thinkingdata_mg"
                }
            }
            return n(e, [{
                key: "initSdkConfig",
                value: function(e) {
                    this.initConfig = e
                }
            }, {
                key: "getConfig",
                value: function() {
                    return this.config
                }
            }, {
                key: "getStorage",
                value: function(e, t, i) {
                    var n = localStorage.getItem(e);
                    if (!t) return r.isJSONString(n) ? JSON.parse(n) : {};
                    r.isJSONString(n) ? i(JSON.parse(n)) : i({})
                }
            }, {
                key: "setStorage",
                value: function(e, t) {
                    localStorage.setItem(e, t)
                }
            }, {
                key: "removeStorage",
                value: function(e) {
                    localStorage.removeItem(e)
                }
            }, {
                key: "_setSystemProxy",
                value: function(e) {
                    this._sysCallback = e
                }
            }, {
                key: "getSystemInfo",
                value: function(e) {
                    var t = {
                        mp_platform: "web",
                        system: this._getOs(),
                        screenWidth: window.screen.width,
                        screenHeight: window.screen.height,
                        systemLanguage: navigator.language
                    };
                    this._sysCallback && (t = r.extend(t, this._sysCallback(e))), e.success(t), e.complete()
                }
            }, {
                key: "_getOs",
                value: function() {
                    var e = navigator.userAgent;
                    return /Windows/i.test(e) ? /Phone/.test(e) || /WPDesktop/.test(e) ? "Windows Phone" : "Windows" : /(iPhone|iPad|iPod)/.test(e) ? "iOS" : /Android/.test(e) ? "Android" : /(BlackBerry|PlayBook|BB10)/i.test(e) ? "BlackBerry" : /Mac/i.test(e) ? "MacOS" : /Linux/.test(e) ? "Linux" : /CrOS/.test(e) ? "ChromeOS" : ""
                }
            }, {
                key: "getNetworkType",
                value: function(e) {
                    e.complete()
                }
            }, {
                key: "onNetworkStatusChange",
                value: function() {}
            }, {
                key: "request",
                value: function(e) {
                    var t = {},
                        i = new XMLHttpRequest;
                    if (i.open(e.method, e.url), e.header)
                        for (var n in e.header) i.setRequestHeader(n, e.header[n]);
                    return i.onreadystatechange = function() {
                        4 === i.readyState && 200 === i.status ? (t.statusCode = 200, r.isJSONString(i.responseText) && (t.data = JSON.parse(i.responseText)), e.success(t)) : 200 !== i.status && (t.errMsg = "network error", e.fail(t))
                    }, i.ontimeout = function() {
                        t.errMsg = "timeout", e.fail(t)
                    }, i.send(e.data), i
                }
            }, {
                key: "initAutoTrackInstance",
                value: function(e, t) {
                    this.instance = e, this.autoTrack = t.autoTrack;
                    var i = this;
                    i.onPageShow(), i.autoTrack.appHide && i.instance.timeEvent("ta_page_hide"), "onvisibilitychange" in document && (document.onvisibilitychange = function() {
                        document.hidden ? i.onPageHide(!0) : (i.onPageShow(), i.autoTrack.appHide && i.instance.timeEvent("ta_page_hide"))
                    })
                }
            }, {
                key: "setGlobal",
                value: function(e, t) {
                    window[t] = e
                }
            }, {
                key: "getAppOptions",
                value: function() {}
            }, {
                key: "showToast",
                value: function() {}
            }, {
                key: "onPageShow",
                value: function() {
                    if (this.autoTrack.appShow) {
                        var e = {};
                        r.extend(e, this.autoTrack.properties), r.isFunction(this.autoTrack.callback) && r.extend(e, this.autoTrack.callback("appShow")), this.instance._internalTrack("ta_page_show", e)
                    }
                }
            }, {
                key: "onPageHide",
                value: function(e) {
                    if (this.autoTrack.appHide) {
                        var t = {};
                        r.extend(t, this.autoTrack.properties), r.isFunction(this.autoTrack.callback) && r.extend(t, this.autoTrack.callback("appHide")), this.instance._internalTrack("ta_page_hide", t, new Date, null, e)
                    }
                }
            }], [{
                key: "createInstance",
                value: function() {
                    return new e
                }
            }]), e
        }(),
        y = function() {
            function e(i, n) {
                if (t(this, e), this.taInstance = i, this.config = n || {}, this.referrer = "Directly open", this.config.isPlugin) i.App = function() {
                    App.apply(this, arguments)
                }, inension(i.Page);
                else {
                    var r = App;
                    App = this._initAppExtention(r);
                    var a = Page;
                    Page = this._initPageExtension(a)
                }
            }
            return n(e, [{
                key: "_initPageExtension",
                value: function(e) {
                    var t = this;
                    return function(i) {
                        var n = i.onShow,
                            r = i.onShareAppMessage;
                        return i.onShow = function(e) {
                            t.onPageShow(), "function" == typeof n && n.call(this, e)
                        }, "function" == typeof r && (i.onShareAppMessage = function(e) {
                            var i = r.call(this, e);
                            return t.onPageShare(i)
                        }), e(i)
                    }
                }
            }, {
                key: "_initAppExtention",
                value: function(e) {
                    var t = this;
                    return function(i) {
                        var n = i.onLaunch,
                            r = i.onShow,
                            a = i.onHide;
                        return i.onLaunch = function(e) {
                            t.onAppLaunch(e, this), "function" == typeof n && n.call(this, e)
                        }, i.onShow = function(e) {
                            t.onAppShow(e), "function" == typeof r && r.call(this, e)
                        }, i.onHide = function() {
                            t.onAppHide(), "function" == typeof a && a.call(this)
                        }, e(i)
                    }
                }
            }, {
                key: "onAppLaunch",
                value: function(e, t) {
                    if (this._setAutoTrackProperties(e), r.isUndefined(t) || (t[this.taInstance.name] = this.taInstance), this.config.appLaunch) {
                        var i = {};
                        e && e.path && (i["#url_path"] = this._getPath(e.path)), e && e.query && (i["#utm"] = r.getUtmFromQuery(e.query)), this.taInstance._internalTrack("ta_mp_launch", i)
                    }
                }
            }, {
                key: "onAppShow",
                value: function(e) {
                    if (this.config.appHide && this.taInstance.timeEvent("ta_mp_hide"), this._setAutoTrackProperties(e), this.config.appShow) {
                        var t = {};
                        e && e.path && (t["#url_path"] = this._getPath(e.path)), e && e.query && (t["#utm"] = r.getUtmFromQuery(e.query)), r.extend(t, this.config.properties), r.isFunction(this.config.callback) && r.extend(t, this.config.callback("appShow")), this.taInstance._internalTrack("ta_mp_show", t)
                    }
                }
            }, {
                key: "onAppHide",
                value: function() {
                    if (this.config.appHide) {
                        var e = {
                            "#url_path": this._getCurrentPath()
                        };
                        r.extend(e, this.config.properties), r.isFunction(this.config.callback) && r.extend(e, this.config.callback("appHide")), this.taInstance._internalTrack("ta_mp_hide", e), this.taInstance.flush()
                    }
                }
            }, {
                key: "_getCurrentPath",
                value: function() {
                    var e = "Not to get";
                    try {
                        var t = getCurrentPages();
                        e = t[t.length - 1].route
                    } catch (e) {
                        v.info(e)
                    }
                    return e
                }
            }, {
                key: "_setAutoTrackProperties",
                value: function(e) {
                    var t = {
                        "#scene": e.scene
                    };
                    this.taInstance._setAutoTrackProperties(t)
                }
            }, {
                key: "_getPath",
                value: function(e) {
                    return "string" == typeof e ? e.replace(/^\//, "") : "Abnormal values"
                }
            }, {
                key: "onPageShare",
                value: function(e) {
                    return this.config.pageShare && this.taInstance._internalTrack("ta_mp_share", {
                        "#url_path": this._getCurrentPath()
                    }), r.isObject(e) ? e : {}
                }
            }, {
                key: "onPageShow",
                value: function() {
                    if (this.config.pageShow) {
                        var e = this._getCurrentPath(),
                            t = {
                                "#url_path": e || "The system did not get a value",
                                "#referrer": this.referrer
                            };
                        this.referrer = e, this.taInstance._internalTrack("ta_mp_view", t)
                    }
                }
            }]), e
        }(),
        k = function() {
            function e(i, n, a) {
                var s = this;
                t(this, e), this.taInstance = i, this.config = n || {};
                var o = a.getLaunchOptionsSync();
                this._onLaunch(o), this._onShow(o), this.startTracked = !0, a.onShow(function(e) {
                    s._onShow(e)
                }), a.onHide(function() {
                    if (s.startTracked = !1, s.config.appHide) {
                        var e = {};
                        r.extend(e, s.config.properties), r.isFunction(s.config.callback) && r.extend(e, s.config.callback("appHide")), s.taInstance._internalTrack("ta_mg_hide", e), s.taInstance.flush()
                    }
                })
            }
            return n(e, [{
                key: "_onLaunch",
                value: function(e) {
                    if (this.config.appLaunch) {
                        var t = {};
                        r.extend(t, this.config.properties), r.isFunction(this.config.callback) && r.extend(t, this.config.callback("appLaunch")), this.taInstance._internalTrack("ta_mg_launch", t)
                    }
                }
            }, {
                key: "_onShow",
                value: function(e) {
                    if (!this.startTracked && (this.config.appHide && this.taInstance.timeEvent("ta_mg_hide"), e && e.scene && this.taInstance._setAutoTrackProperties({
                            "#scene": e.scene
                        }), this.config.appShow)) {
                        var t = {};
                        r.extend(t, this.config.properties), r.isFunction(this.config.callback) && r.extend(t, this.config.callback("appShow")), this.taInstance._internalTrack("ta_mg_show", t)
                    }
                }
            }]), e
        }(),
        _ = function() {
            function e(i, n, r) {
                t(this, e), this.api = i, this.config = n, this._config = r
            }
            return n(e, [{
                key: "initSdkConfig",
                value: function(e) {}
            }, {
                key: "getConfig",
                value: function() {
                    return this.config
                }
            }, {
                key: "getStorage",
                value: function(e, t, i) {
                    if (t) this.api.getStorage({
                        key: e,
                        success: function(e) {
                            var t = r.isJSONString(e.data) ? JSON.parse(e.data) : {};
                            i(t)
                        },
                        fail: function() {
                            v.warn("getStorage faild"), i({})
                        }
                    });
                    else try {
                        if ("dd_mp" === this._config.platform || "ali_mp" === this._config.platform || "ali_mg" === this._config.platform) {
                            var n = this.api.getStorageSync({
                                key: e
                            });
                            return r.isJSONString(n.data) ? JSON.parse(n.data) : {}
                        }
                        var a = this.api.getStorageSync(e);
                        return r.isJSONString(a) ? JSON.parse(a) : {}
                    } catch (e) {
                        return {}
                    }
                }
            }, {
                key: "setStorage",
                value: function(e, t) {
                    try {
                        "ali_mp" === this._config.platform || "tb_mp" === this._config.platform || "dd_mp" === this._config.platform || "ali_mg" === this._config.platform ? this.api.setStorageSync({
                            key: e,
                            data: t
                        }) : this.api.setStorageSync(e, t)
                    } catch (e) {}
                }
            }, {
                key: "removeStorage",
                value: function(e) {
                    try {
                        r.isFunction(this.api.removeStorage) ? this.api.removeStorage({
                            key: e
                        }) : r.isFunction(this.api.deleteStorage) && this.api.deleteStorage({
                            key: e
                        })
                    } catch (e) {}
                }
            }, {
                key: "_getPlatform",
                value: function() {
                    return ""
                }
            }, {
                key: "getSystemInfo",
                value: function(e) {
                    var t = this._config.mpPlatform,
                        i = this;
                    this.api.getSystemInfo({
                        success: function(n) {
                            r.isFunction(t) ? n.mp_platform = t(n) : n.mp_platform = t, "ali_mp" !== i._config.platform && "ali_mg" !== i._config.platform || (n.system = n.platform + " " + n.system), e.success(n), "wechat" === t && e.complete()
                        },
                        complete: function() {
                            e.complete()
                        }
                    })
                }
            }, {
                key: "getNetworkType",
                value: function(e) {
                    r.isFunction(this.api.getNetworkType) ? this.api.getNetworkType({
                        success: function(t) {
                            e.success(t)
                        },
                        complete: function() {
                            e.complete()
                        }
                    }) : (e.success({}), e.complete())
                }
            }, {
                key: "onNetworkStatusChange",
                value: function(e) {
                    r.isFunction(this.api.onNetworkStatusChange) ? this.api.onNetworkStatusChange(e) : e({})
                }
            }, {
                key: "request",
                value: function(e) {
                    if ("ali_mp" === this._config.platform || "dd_mp" === this._config.platform || "ali_mg" === this._config.platform) {
                        var t = r.extend({}, e);
                        return t.headers = e.header, t.header = void 0, t.success = function(t) {
                            t.statusCode = t.status, e.success(t)
                        }, t.fail = function(t) {
                            t.errMsg = t.errorMessage, e.fail(t)
                        }, "dd_mp" === this._config.platform ? this.api.httpRequest(t) : this.api.request(t)
                    }
                    return this.api.request(e)
                }
            }, {
                key: "initAutoTrackInstance",
                value: function(e, t) {
                    return r.isObject(t.autoTrack) && (t.autoTrack.isPlugin = t.is_plugin), this._config.mp ? new y(e, t.autoTrack, this.api) : new k(e, t.autoTrack, this.api)
                }
            }, {
                key: "setGlobal",
                value: function(e, t) {
                    this._config.mp ? v.warn("ThinkingAnalytics: we do not set global name for TA instance when you do not enable auto track.") : "ali_mg" !== this._config.platform && (GameGlobal[t] = e)
                }
            }, {
                key: "getAppOptions",
                value: function(e) {
                    var t = {};
                    try {
                        t = this.api.getLaunchOptionsSync()
                    } catch (e) {
                        v.warn("Cannot get launch options.")
                    }
                    if (r.isFunction(e)) try {
                        this._config.mp ? this.api.onAppShow(e) : this.api.onShow(e)
                    } catch (e) {
                        v.warn("Cannot register onShow callback.")
                    }
                    return t
                }
            }, {
                key: "showToast",
                value: function(e) {
                    if (r.isFunction(this.api.showToast)) {
                        var t = {
                            title: e
                        };
                        "dd_mp" !== this._config.platform && "ali_mp" !== this._config.platform || (t.content = e), this.api.showToast(t)
                    }
                }
            }], [{
                key: "createInstance",
                value: function() {
                    return this._createInstance("R_CURRENT_PLATFORM")
                }
            }, {
                key: "_createInstance",
                value: function(t) {
                    switch (t) {
                        case "wechat_mp":
                            return new e(wx, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_wechat",
                                plat: "wx"
                            }, {
                                mpPlatform: "wechat",
                                mp: !0,
                                platform: t
                            });
                        case "wechat_mg":
                            return new e(wx, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_wechat_game",
                                plat: "wx"
                            }, {
                                mpPlatform: "wechat",
                                platform: t
                            });
                        case "qq_mp":
                            return new e(qq, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qq"
                            }, {
                                mpPlatform: "qq",
                                mp: !0,
                                platform: t
                            });
                        case "qq_mg":
                            return new e(qq, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qq_game"
                            }, {
                                mpPlatform: "qq",
                                platform: t
                            });
                        case "baidu_mp":
                            return new e(swan, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_swan"
                            }, {
                                mpPlatform: function(e) {
                                    return e.host
                                },
                                mp: !0,
                                platform: t
                            });
                        case "baidu_mg":
                            return new e(swan, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_swan_game"
                            }, {
                                mpPlatform: function(e) {
                                    return e.host
                                },
                                platform: t
                            });
                        case "tt_mg":
                            return new e(tt, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_tt_game"
                            }, {
                                mpPlatform: function(e) {
                                    return e.appName
                                },
                                platform: t
                            });
                        case "tt_mp":
                            return new e(tt, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_tt"
                            }, {
                                mpPlatform: function(e) {
                                    return e.appName
                                },
                                mp: !0,
                                platform: t
                            });
                        case "ali_mp":
                            return new e(my, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_ali"
                            }, {
                                mpPlatform: function(e) {
                                    return e.app
                                },
                                mp: !0,
                                platform: t
                            });
                        case "ali_mg":
                            return new e(my, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_ali_game"
                            }, {
                                mpPlatform: function(e) {
                                    return e.app
                                },
                                platform: t
                            });
                        case "dd_mp":
                            return new e(dd, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_dd"
                            }, {
                                mpPlatform: "dingding",
                                mp: !0,
                                platform: t
                            });
                        case "bl_mg":
                            return new e(bl, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_mg"
                            }, {
                                mpPlatform: "bilibili",
                                platform: t
                            });
                        case "kuaishou_mp":
                            return new e(ks, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_kuaishou"
                            }, {
                                mpPlatform: "kuaishou",
                                mp: !0,
                                platform: t
                            });
                        case "kuaishou_mg":
                            return new e(ks, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_kuaishou"
                            }, {
                                mpPlatform: "kuaishou",
                                platform: t
                            });
                        case "qh360_mg":
                            return new e(qh, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qh360"
                            }, {
                                mpPlatform: "qh360",
                                platform: t
                            });
                        case "tb_mp":
                            return new e(my, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_tb"
                            }, {
                                mpPlatform: "tb",
                                mp: !0,
                                platform: t
                            });
                        case "jd_mp":
                            return new e(jd, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_jd"
                            }, {
                                mpPlatform: "jd",
                                mp: !0,
                                platform: t
                            });
                        case "qh360_mp":
                            return new e(qh, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qh360"
                            }, {
                                mpPlatform: "qh360",
                                mp: !0,
                                platform: t
                            });
                        case "WEB":
                            return new m.createInstance
                    }
                }
            }]), e
        }(),
        b = function e(i, n) {
            var a = this;
            t(this, e), this.taInstance = i, this.config = n || {}, this.config.appShow && this.taInstance._internalTrack("ta_mg_show"), this.config.appHide && this.taInstance.timeEvent("ta_mg_hide"), qg.onShow(function() {
                if (a.config.appHide && a.taInstance.timeEvent("ta_mg_hide"), a.config.appShow) {
                    var e = {};
                    r.extend(e, a.config.properties), r.isFunction(a.config.callback) && r.extend(e, a.config.callback("appShow")), a.taInstance._internalTrack("ta_mg_show")
                }
            }), qg.onHide(function() {
                if (a.config.appHide) {
                    var e = {};
                    r.extend(e, a.config.properties), r.isFunction(a.config.callback) && r.extend(e, a.config.callback("appHide")), a.taInstance._internalTrack("ta_mg_hide")
                }
            })
        },
        S = function() {
            function e() {
                t(this, e), this.config = {
                    persistenceName: "thinkingdata",
                    persistenceNameOld: "thinkingdata_qg_vivo_game",
                    asyncPersistence: !0
                }
            }
            return n(e, [{
                key: "initSdkConfig",
                value: function(e) {
                    this.initConfig = e
                }
            }, {
                key: "getConfig",
                value: function() {
                    return this.config || {}
                }
            }, {
                key: "getStorage",
                value: function(e, t, i) {
                    if (!t) {
                        var n = qg.getStorageSync({
                            key: e
                        });
                        return r.isJSONString(n) ? JSON.parse(n) : {}
                    }
                    qg.getStorage({
                        key: e,
                        success: function(e) {
                            var t = r.isJSONString(e) ? JSON.parse(e) : {};
                            i(t)
                        },
                        fail: function() {
                            i({})
                        }
                    })
                }
            }, {
                key: "setStorage",
                value: function(e, t) {
                    qg.setStorage({
                        key: e,
                        value: t
                    })
                }
            }, {
                key: "removeStorage",
                value: function(e) {
                    qg.deleteStorage({
                        key: e
                    })
                }
            }, {
                key: "getSystemInfo",
                value: function(e) {
                    qg.getSystemInfo({
                        success: function(t) {
                            var i = t,
                                n = [t.osType, t.osVersionName].join(" ");
                            i.brand = t.manufacturer, i.system = n, i.mp_platform = "vivo_qg", e.success(i)
                        },
                        complete: function() {
                            e.complete()
                        }
                    })
                }
            }, {
                key: "getNetworkType",
                value: function(e) {
                    qg.getNetworkType({
                        success: function(t) {
                            var i = t;
                            i.networkType = t.type, e.success(i)
                        },
                        complete: function() {
                            e.complete()
                        }
                    })
                }
            }, {
                key: "onNetworkStatusChange",
                value: function(e) {
                    qg.subscribeNetworkStatus({
                        callback: function(t) {
                            var i = t;
                            i.networkType = t.type, e(i)
                        }
                    })
                }
            }, {
                key: "request",
                value: function(e) {
                    return qg.request({
                        url: e.url,
                        data: e.data,
                        method: e.method,
                        header: e.header,
                        success: function(t) {
                            e.success(t)
                        },
                        fail: function(t) {
                            e.fail(t)
                        }
                    })
                }
            }, {
                key: "initAutoTrackInstance",
                value: function(e, t) {
                    return new b(e, t.autoTrack)
                }
            }, {
                key: "setGlobal",
                value: function(e, t) {
                    globalThis[t] = e
                }
            }, {
                key: "getAppOptions",
                value: function() {
                    return {}
                }
            }, {
                key: "showToast",
                value: function(e) {
                    qg.showToast({
                        message: e,
                        duration: 0
                    })
                }
            }], [{
                key: "createInstance",
                value: function() {
                    return new e
                }
            }]), e
        }(),
        I = function e(i, n, a) {
            var s = this;
            if (t(this, e), this.taInstance = i, this.config = n || {}, this.config.appShow) {
                var o = {};
                r.extend(o, this.config.properties), r.isFunction(this.config.callback) && r.extend(o, this.config.callback("appShow")), this.taInstance._internalTrack("ta_mg_show", o)
            }
            this.config.appHide && this.taInstance.timeEvent("ta_mg_hide"), a.onShow(function() {
                if (s.config.appHide && s.taInstance.timeEvent("ta_mg_hide"), s.config.appShow) {
                    var e = {};
                    r.extend(e, s.config.properties), r.isFunction(s.config.callback) && r.extend(e, s.config.callback("appShow")), s.taInstance._internalTrack("ta_mg_show", e)
                }
            }), a.onHide(function() {
                if (s.config.appHide) {
                    var e = {};
                    r.extend(e, s.config.properties), r.isFunction(s.config.callback) && r.extend(e, s.config.callback("appHide")), s.taInstance._internalTrack("ta_mg_hide", e)
                }
            })
        },
        P = function() {
            function e(i, n, r) {
                t(this, e), this.api = i, this.config = n, this._config = r
            }
            return n(e, [{
                key: "initSdkConfig",
                value: function(e) {
                    this.initConfig = e
                }
            }, {
                key: "getConfig",
                value: function() {
                    return this.config || {}
                }
            }, {
                key: "getStorage",
                value: function(e, t, i) {
                    var n = localStorage.getItem(e);
                    if (!t) return r.isJSONString(n) ? JSON.parse(n) : {};
                    r.isJSONString(n) ? i(JSON.parse(n)) : i({})
                }
            }, {
                key: "setStorage",
                value: function(e, t) {
                    localStorage.setItem(e, t)
                }
            }, {
                key: "removeStorage",
                value: function(e) {
                    localStorage.removeItem(e)
                }
            }, {
                key: "getSystemInfo",
                value: function(e) {
                    var t = this._config.mpPlatform;
                    this.api.getSystemInfo({
                        success: function(i) {
                            i.mp_platform = t, e.success(i)
                        },
                        complete: function() {
                            e.complete()
                        }
                    })
                }
            }, {
                key: "getNetworkType",
                value: function(e) {
                    this.api.getNetworkType({
                        success: function(t) {
                            e.success(t)
                        },
                        complete: function() {
                            e.complete()
                        }
                    })
                }
            }, {
                key: "onNetworkStatusChange",
                value: function(e) {
                    this.api.onNetworkStatusChange({
                        callback: function(t) {
                            e(t)
                        }
                    })
                }
            }, {
                key: "request",
                value: function(e) {
                    var t = {},
                        i = new XMLHttpRequest;
                    if (i.open(e.method, e.url), e.header)
                        for (var n in e.header) i.setRequestHeader(n, e.header[n]);
                    return i.onreadystatechange = function() {
                        4 === i.readyState && 200 === i.status ? (t.statusCode = 200, r.isJSONString(i.responseText) && (t.data = JSON.parse(i.responseText)), e.success(t)) : 200 !== i.status && (t.errMsg = "network error", e.fail(t))
                    }, i.ontimeout = function() {
                        t.errMsg = "timeout", e.fail(t)
                    }, i.send(e.data), i
                }
            }, {
                key: "initAutoTrackInstance",
                value: function(e, t) {
                    return new I(e, t.autoTrack, this.api)
                }
            }, {
                key: "setGlobal",
                value: function(e, t) {
                    globalThis[t] = e
                }
            }, {
                key: "getAppOptions",
                value: function() {
                    return this.api.getLaunchOptionsSync()
                }
            }, {
                key: "showToast",
                value: function(e) {
                    this.api.showToast({
                        title: e,
                        icon: "none",
                        duration: 2e3
                    })
                }
            }], [{
                key: "createInstance",
                value: function() {
                    return this._createInstance("R_CURRENT_PLATFORM")
                }
            }, {
                key: "_createInstance",
                value: function(t) {
                    switch (t) {
                        case "oppo":
                            return new e(qg, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qg_oppo_game"
                            }, {
                                mpPlatform: "oppo_qg"
                            });
                        case "huawei":
                            return new e(hbs, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qg_huawei_game"
                            }, {
                                mpPlatform: "huawei_qg"
                            });
                        case "mz":
                            return new e(qg, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qg_mz_game"
                            }, {
                                mpPlatform: "mz"
                            });
                        case "xiaomi":
                            return new e(qg, {
                                persistenceName: "thinkingdata",
                                persistenceNameOld: "thinkingdata_qg"
                            }, {
                                mpPlatform: "xiaomi"
                            })
                    }
                }
            }]), e
        }(),
        w = function() {
            function e() {
                t(this, e)
            }
            return n(e, null, [{
                key: "createInstance",
                value: function() {
                    var e = window.TDAnalytics_Config.platform;
                    return "wx" == e || "kuaishou" == e ? _._createInstance("wechat_mg") : "alipay" == e ? _._createInstance("ali_mg") : void 0
                }
            }]), e
        }(),
        T = function() {
            function e() {
                t(this, e)
            }
            return n(e, null, [{
                key: "_getCurrentPlatform",
                value: function() {
                    return this.currentPlatform || (this.currentPlatform = w.createInstance())
                }
            }, {
                key: "initConfig",
                value: function(e) {
                    this._getCurrentPlatform().initSdkConfig(e)
                }
            }, {
                key: "getConfig",
                value: function() {
                    return this._getCurrentPlatform().getConfig()
                }
            }, {
                key: "isWxPlat",
                value: function() {
                    return "wx" === this.getConfig().plat
                }
            }, {
                key: "getStorage",
                value: function(e, t, i) {
                    return this._getCurrentPlatform().getStorage(e, t, i)
                }
            }, {
                key: "setStorage",
                value: function(e, t) {
                    return this._getCurrentPlatform().setStorage(e, t)
                }
            }, {
                key: "removeStorage",
                value: function(e) {
                    return this._getCurrentPlatform().removeStorage(e)
                }
            }, {
                key: "getSystemInfo",
                value: function(e) {
                    return this._getCurrentPlatform().getSystemInfo(e)
                }
            }, {
                key: "getNetworkType",
                value: function(e) {
                    return this._getCurrentPlatform().getNetworkType(e)
                }
            }, {
                key: "onNetworkStatusChange",
                value: function(e) {
                    this._getCurrentPlatform().onNetworkStatusChange(e)
                }
            }, {
                key: "request",
                value: function(e) {
                    return this._getCurrentPlatform().request(e)
                }
            }, {
                key: "initAutoTrackInstance",
                value: function(e, t) {
                    return this._getCurrentPlatform().initAutoTrackInstance(e, t)
                }
            }, {
                key: "setGlobal",
                value: function(e, t) {
                    e && t && this._getCurrentPlatform().setGlobal(e, t)
                }
            }, {
                key: "getAppOptions",
                value: function(e) {
                    return this._getCurrentPlatform().getAppOptions(e)
                }
            }, {
                key: "showDebugToast",
                value: function(e) {
                    this._getCurrentPlatform().showToast(e)
                }
            }]), e
        }(),
        N = /^[a-zA-Z][a-zA-Z0-9_]{0,49}$/,
        O = function() {
            function e() {
                t(this, e)
            }
            return n(e, null, [{
                key: "stripProperties",
                value: function(e) {
                    return r.isObject(e) ? (r.each(e, function(e, t) {
                        r.isString(e) || r.isNumber(e) || r.isDate(e) || r.isBoolean(e) || r.isArray(e) || r.isObject(e) || v.warn("Your data -", t, e, "- format does not meet requirements and may not be stored correctly. Attribute values only support String, Number, Date, Boolean, Array, Object")
                    }), e) : e
                }
            }, {
                key: "_checkPropertiesKey",
                value: function(e) {
                    var t = !0;
                    return r.each(e, function(e, i) {
                        N.test(i) || (v.warn("Invalid KEY: " + i), t = !1)
                    }), t
                }
            }, {
                key: "event",
                value: function(e) {
                    return !(!r.isString(e) || !N.test(e)) || (v.warn("Check the parameter format. The eventName must start with an English letter and contain no more than 50 characters including letters, digits, and underscores: " + e), !1)
                }
            }, {
                key: "propertyName",
                value: function(e) {
                    return !(!r.isString(e) || !N.test(e)) || (v.warn("Check the parameter format. PropertyName must start with a letter and contain letters, digits, and underscores (_). The value is a string of no more than 50 characters: " + e), !1)
                }
            }, {
                key: "properties",
                value: function(e) {
                    return this.stripProperties(e), !(e && (r.isObject(e) ? !this._checkPropertiesKey(e) && (v.warn("Check the parameter format. The properties key must start with a letter, contain digits, letters, and underscores (_), and contain a maximum of 50 characters"), 1) : (v.warn("properties can be none, but it must be an object"), 1)))
                }
            }, {
                key: "propertiesMust",
                value: function(e) {
                    return this.stripProperties(e), void 0 === e || !r.isObject(e) || r.isEmptyObject(e) ? (v.warn("properties must be an object with a value"), !1) : !!this._checkPropertiesKey(e) || (v.warn("Check the parameter format. The properties key must start with a letter, contain digits, letters, and underscores (_), and contain a maximum of 50 characters"), !1)
                }
            }, {
                key: "userId",
                value: function(e) {
                    return !(!r.isString(e) || !/^.{1,64}$/.test(e)) || (v.warn("The user ID must be a string of less than 64 characters and cannot be null"), !1)
                }
            }, {
                key: "userAddProperties",
                value: function(e) {
                    if (!this.propertiesMust(e)) return !1;
                    for (var t in e)
                        if (!r.isNumber(e[t])) return v.warn("The attributes of userAdd need to be Number"), !1;
                    return !0
                }
            }, {
                key: "userAppendProperties",
                value: function(e) {
                    if (!this.propertiesMust(e)) return !1;
                    for (var t in e)
                        if (!r.isArray(e[t])) return v.warn("The attribute of userAppend must be Array"), !1;
                    return !0
                }
            }]), e
        }(),
        x = function() {
            function e(i, n, a, s, o) {
                t(this, e), this.data = i, this.serverUrl = n, this.callback = o, this.tryCount = r.isNumber(a) ? a : 1, this.timeout = r.isNumber(s) ? s : 3e3, this.taClassName = "HttpTask"
            }
            return n(e, [{
                key: "run",
                value: function() {
                    var e = this,
                        t = r.createExtraHeaders();
                    t["content-type"] = "application/json", this.runTime = new Date, T.request({
                        url: this.serverUrl,
                        method: "POST",
                        data: this.data,
                        header: t,
                        success: function(t) {
                            e.onSuccess(t)
                        },
                        fail: function(t) {
                            e.onFailed(t)
                        }
                    })
                }
            }, {
                key: "onSuccess",
                value: function(e) {
                    if (!this.sendTimeout())
                        if (r.isObject(e) && 200 === e.statusCode) {
                            var t;
                            switch ((r.isUndefined(e.data) || r.isUndefined(e.data.code)) && (e.data = {
                                code: 0
                            }), e.data.code) {
                                case 0:
                                    t = "success";
                                    break;
                                case -1:
                                    t = "invalid data";
                                    break;
                                case -2:
                                    t = "invalid APP ID";
                                    break;
                                default:
                                    t = "Unknown return code"
                            }
                            this.callback({
                                code: e.data.code,
                                msg: t
                            })
                        } else this.callback({
                            code: -3,
                            msg: r.isObject(e) ? e.statusCode : "Unknown error"
                        })
                }
            }, {
                key: "onFailed",
                value: function(e) {
                    this.sendTimeout() || (--this.tryCount > 0 ? this.run() : this.callback({
                        code: -3,
                        msg: r.isObject(e) ? e.errMsg : "Unknown error"
                    }))
                }
            }, {
                key: "sendTimeout",
                value: function() {
                    return (new Date).getTime() - this.runTime.getTime() > this.timeout
                }
            }]), e
        }(),
        D = function() {
            function e(i, n, a, s, o, c, u) {
                t(this, e), this.data = i, this.serverDebugUrl = n, this.callback = u, this.tryCount = r.isNumber(a) ? a : 1, this.timeout = r.isNumber(s) ? s : 3e3, this.dryrun = o, this.deviceId = c, this.taClassName = "HttpTaskDebug"
            }
            return n(e, [{
                key: "run",
                value: function() {
                    var e = this,
                        t = "appid=" + this.data["#app_id"] + "&source=client&dryRun=" + this.dryrun + "&deviceId=" + this.deviceId + "&data=" + encodeURIComponent(JSON.stringify(this.data.data[0])),
                        i = r.createExtraHeaders();
                    i["content-type"] = "application/x-www-form-urlencoded";
                    var n = T.request({
                            url: this.serverDebugUrl,
                            method: "POST",
                            data: t,
                            header: i,
                            success: function(t) {
                                e.onSuccess(t), clearTimeout(a)
                            },
                            fail: function(t) {
                                e.onFailed(t), clearTimeout(a)
                            }
                        }),
                        a = setTimeout(function() {
                            (r.isObject(n) || r.isPromise(n)) && r.isFunction(n.abort) && n.abort()
                        }, this.timeout)
                }
            }, {
                key: "onSuccess",
                value: function(e) {
                    if (r.isObject(e) && 200 === e.statusCode) {
                        var t;
                        if ((r.isUndefined(e.data) || r.isUndefined(e.data.errorLevel)) && (e.data = {
                                errorLevel: 0
                            }), 0 === e.data.errorLevel) t = "Verify data success.";
                        else if (1 === e.data.errorLevel) {
                            for (var i = e.data.errorProperties, n = "", a = 0; a < i.length; a++) {
                                var s = i[a].errorReason;
                                n = n + " propertyName:" + i[a].propertyName + " errorReasons:" + s + "\n"
                            }
                            t = "Debug data error. errorLevel:" + e.data.errorLevel + " reason:" + n
                        } else 2 !== e.data.errorLevel && -1 !== e.data.errorLevel || (t = "Debug data error. errorLevel:" + e.data.errorLevel + " reason:" + e.data.errorReasons);
                        v.info(t), this.callback({
                            code: e.data.errorLevel,
                            msg: t
                        })
                    } else this.callback({
                        code: -3,
                        msg: r.isObject(e) ? e.statusCode : "Unknown error"
                    })
                }
            }, {
                key: "onFailed",
                value: function(e) {
                    --this.tryCount > 0 ? this.run() : this.callback({
                        code: -3,
                        msg: r.isObject(e) ? e.errMsg : "Unknown error"
                    })
                }
            }]), e
        }(),
        A = new(function() {
            function e() {
                t(this, e), this.items = [], this.isRunning = !1, this.showDebug = !1
            }
            return n(e, [{
                key: "enqueue",
                value: function(e, t, i) {
                    var n, a = this,
                        s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                        o = this;
                    n = "debug" === i.debugMode ? new D(e, t, i.maxRetries, i.sendTimeout, 0, i.deviceId, function(e) {
                        o.isRunning = !1, delete a.runTime, r.isFunction(i.callback) && i.callback(e), o._runNext(), !1 === o.showDebug && (0 !== e.code && 1 !== e.code && 2 !== e.code || (o.showDebug = !0, r.isFunction(T.showDebugToast) && T.showDebugToast("The current mode is Debug")))
                    }) : "debugOnly" === i.debugMode ? new D(e, t, i.maxRetries, i.sendTimeout, 1, i.deviceId, function(e) {
                        o.isRunning = !1, delete a.runTime, r.isFunction(i.callback) && i.callback(e), o._runNext(), !1 === o.showDebug && (0 !== e.code && 1 !== e.code && 2 !== e.code || (o.showDebug = !0, r.isFunction(T.showDebugToast) && T.showDebugToast("The current mode is debugOnly")))
                    }) : new x(JSON.stringify(e), t, i.maxRetries, i.sendTimeout, function(e) {
                        o.isRunning = !1, delete a.runTime, r.isFunction(i.callback) && i.callback(e), o._runNext()
                    }), !0 === s ? (this.items.push(n), this._runNext()) : n.run()
                }
            }, {
                key: "_dequeue",
                value: function() {
                    return this.items.shift()
                }
            }, {
                key: "_runNext",
                value: function() {
                    if (this.items.length > 0 && !this.isRunning)
                        if (this.isRunning = !0, this.runTime = new Date, "HttpTask" !== this.items[0].taClassName) this._dequeue().run();
                        else {
                            var e = this.items.splice(0, this.items.length),
                                t = e[0],
                                i = JSON.parse(t.data),
                                n = i["#app_id"],
                                r = [];
                            r.push(t.callback);
                            for (var a = 1; a < e.length; a++) {
                                var s = e[a],
                                    o = JSON.parse(s.data);
                                o["#app_id"] === n && t.serverUrl === s.serverUrl ? (i.data = i.data.concat(o.data), r.push(s.callback)) : this.items.push(s)
                            }
                            var c = (new Date).getTime();
                            i["#flush_time"] = c, new x(JSON.stringify(i), t.serverUrl, t.tryCount, t.timeout, function(e) {
                                for (var t in r) Object.hasOwnProperty.call(r, t) && (0, r[t])(e)
                            }).run()
                        }
                }
            }, {
                key: "runTimeout",
                value: function(e) {
                    return !!(r.isDate(this.runTime) && (new Date).getTime() - this.runTime.getTime() > e)
                }
            }, {
                key: "resetTimeout",
                value: function() {
                    this.isRunning = !1, delete this.runTime
                }
            }]), e
        }()),
        C = {
            name: "thinkingdata",
            is_plugin: !1,
            maxRetries: 3,
            sendTimeout: 3e3,
            enablePersistence: !0,
            asyncPersistence: !1,
            enableLog: !0,
            strict: !1,
            debugMode: "none",
            enableCalibrationTime: !1,
            enableBatch: !1,
            cloudEnv: "online",
            reportingToTencentSdk: 3
        },
        U = {
            properties: {
                "#lib": s,
                "#lib_version": a
            },
            initDeviceId: function(e) {
                r.isString(e) && (this.properties["#device_id"] = e)
            },
            getSystemInfo: function(e) {
                var t = this;
                T.onNetworkStatusChange(function(e) {
                    t.properties["#network_type"] = e.networkType
                }), T.getNetworkType({
                    success: function(e) {
                        t.properties["#network_type"] = e.networkType
                    },
                    complete: function() {
                        T.getSystemInfo({
                            success: function(e) {
                                var i = e.system ? e.system.replace(/\s+/g, " ").split(" ") : [],
                                    n = {
                                        "#manufacturer": e.brand,
                                        "#device_model": e.model,
                                        "#screen_width": Number(e.screenWidth),
                                        "#screen_height": Number(e.screenHeight),
                                        "#os": i[0],
                                        "#os_version": i[1],
                                        "#mp_platform": e.mp_platform,
                                        "#system_language": e.systemLanguage
                                    };
                                r.extend(t.properties, n), r.setMpPlatform(e.mp_platform)
                            },
                            complete: function() {
                                e()
                            }
                        })
                    }
                })
            }
        },
        F = function() {
            function i(e, n) {
                var a = this;
                t(this, i), this.enabled = e.enablePersistence, this.enabled ? (e.isChildInstance ? (this.name = e.persistenceName + "_" + e.name, this.nameOld = e.persistenceNameOld + "_" + e.name) : (this.name = e.persistenceName, this.nameOld = e.persistenceNameOld), e.asyncPersistence ? (this._state = {}, T.getStorage(this.name, !0, function(t) {
                    r.isEmptyObject(t) ? T.getStorage(a.nameOld, !0, function(t) {
                        a._state = r.extend2Layers({}, t, a._state), a._init(e, n), a._save()
                    }) : (a._state = r.extend2Layers({}, t, a._state), a._init(e, n), a._save())
                })) : (this._state = T.getStorage(this.name) || {}, r.isEmptyObject(this._state) && (this._state = T.getStorage(this.nameOld) || {}), this._init(e, n))) : (this._state = {}, this._init(e, n))
            }
            return n(i, [{
                key: "_init",
                value: function(e, t) {
                    this.getDistinctId() || this.setDistinctId(r.UUID()), e.isChildInstance || (this.getDeviceId() || this._setDeviceId(r.UUID()), U.initDeviceId(this.getDeviceId())), this.initComplete = !0, "function" == typeof t && t(), this._save()
                }
            }, {
                key: "_save",
                value: function() {
                    this.enabled && this.initComplete && T.setStorage(this.name, JSON.stringify(this._state))
                }
            }, {
                key: "_set",
                value: function(t, i) {
                    var n, a = this;
                    "string" == typeof t ? (n = {})[t] = i : "object" === e(t) && (n = t), r.each(n, function(e, t) {
                        a._state[t] = e
                    }), this._save()
                }
            }, {
                key: "_get",
                value: function(e) {
                    return this._state[e]
                }
            }, {
                key: "setEventTimer",
                value: function(e, t) {
                    var i = this._state.event_timers || {};
                    i[e] = t, this._set("event_timers", i)
                }
            }, {
                key: "removeEventTimer",
                value: function(e) {
                    var t = (this._state.event_timers || {})[e];
                    return r.isUndefined(t) || (delete this._state.event_timers[e], this._save()), t
                }
            }, {
                key: "getDeviceId",
                value: function() {
                    return this._state.device_id
                }
            }, {
                key: "_setDeviceId",
                value: function(e) {
                    this.getDeviceId() ? v.warn("cannot modify the device id.") : this._set("device_id", e)
                }
            }, {
                key: "getDistinctId",
                value: function() {
                    return this._state.distinct_id
                }
            }, {
                key: "setDistinctId",
                value: function(e) {
                    this._set("distinct_id", e)
                }
            }, {
                key: "getAccountId",
                value: function() {
                    return this._state.account_id
                }
            }, {
                key: "setAccountId",
                value: function(e) {
                    this._set("account_id", e)
                }
            }, {
                key: "getSuperProperties",
                value: function() {
                    return this._state.props || {}
                }
            }, {
                key: "setSuperProperties",
                value: function(e, t) {
                    var i = t ? e : r.extend(this.getSuperProperties(), e);
                    this._set("props", i)
                }
            }]), i
        }(),
        q = function() {
            function e(i, n) {
                t(this, e), this.config = i, this.ta = n, this.timer = null, this.batchConfig = r.extend({
                    size: 6,
                    interval: 6e3,
                    maxLimit: 500
                }, this.config.batchConfig), this.batchConfig.size < 1 && (this.batchConfig.size = 1), this.batchConfig.size > 30 && (this.batchConfig.size = 30), this.storageKey = "ta_mpsdk_" + this.config.appId, this.maxLimit = this.batchConfig.maxLimit, this.batchList = [];
                var a = T.getStorage(this.storageKey);
                r.isArray(a) && (this.batchList = a);
                var s = "tab_tampsdk_" + this.config.appId,
                    o = T.getStorage(s);
                if (r.isArray(o)) {
                    for (var c = 0; c < o.length; c++) {
                        var u = T.getStorage(o[c]);
                        this.batchList.push(u), T.removeStorage(o[c])
                    }
                    T.removeStorage(s)
                }
                this.dataHasChange = !1, this.dataSendTimeStamp = 0
            }
            return n(e, [{
                key: "batchInterval",
                value: function() {
                    this.loopWrite(), this.loopSend()
                }
            }, {
                key: "loopWrite",
                value: function() {
                    var e = this;
                    setTimeout(function() {
                        e.batchWrite(), e.loopWrite()
                    }, 500)
                }
            }, {
                key: "batchWrite",
                value: function() {
                    this.dataHasChange && (this.dataHasChange = !1, T.setStorage(this.storageKey, JSON.stringify(this.batchList)))
                }
            }, {
                key: "loopSend",
                value: function() {
                    var e = this;
                    e.timer = setTimeout(function() {
                        e.batchSend(), clearTimeout(e.timer), e.loopSend()
                    }, this.batchConfig.interval)
                }
            }, {
                key: "add",
                value: function(e) {
                    this.batchList.length > this.maxLimit && this.batchList.shift(), this.batchList.push(e), this.dataHasChange = !0, this.batchList.length > this.batchConfig.size && this.batchSend()
                }
            }, {
                key: "flush",
                value: function() {
                    clearTimeout(this.timer), this.batchSend(), this.loopSend()
                }
            }, {
                key: "batchSend",
                value: function() {
                    var e = new Date;
                    if (!(0 !== this.dataSendTimeStamp && e.getTime() - this.dataSendTimeStamp < this.config.sendTimeout + 500)) {
                        var t;
                        this.dataSendTimeStamp = e.getTime();
                        var i = (t = this.batchList.length > 30 ? this.batchList.slice(0, 30) : this.batchList).length;
                        if (i > 0) {
                            var n = {};
                            n.data = t, n["#app_id"] = this.config.appId, n["#flush_time"] = (new Date).getTime();
                            var r = this;
                            A.enqueue(n, this.ta.serverUrl, {
                                maxRetries: 1,
                                sendTimeout: this.config.sendTimeout,
                                callback: function(e) {
                                    0 === e.code && (v.info("Flush success: " + JSON.stringify(n, null, 4)), r.batchRemove(i))
                                },
                                debugMode: this.config.debugMode,
                                deviceId: this.ta.getDeviceId()
                            }, !1)
                        }
                    }
                }
            }, {
                key: "batchRemove",
                value: function(e) {
                    this.dataSendTimeStamp = 0, this.batchList.splice(0, e), this.dataHasChange = !0, this.batchWrite()
                }
            }]), e
        }(),
        J = function() {
            function e(i) {
                if (t(this, e), i) {
                    if (T.isWxPlat() && (1 === i.reportingToTencentSdk || 2 === i.reportingToTencentSdk)) {
                        var n = i.tgaInitParams.tgaSDK;
                        i.tgaInitParams && n && ("debug" !== i.debugMode && "debugOnly" !== i.debugMode || n.setDebug(!0), this.wxSdk = new n({
                            user_action_set_id: i.tgaInitParams.user_action_set_id,
                            secret_key: i.tgaInitParams.secret_key,
                            appid: i.tgaInitParams.appid
                        }), i.tgaInitParams.openId ? this.wxSdk.setOpenId(i.tgaInitParams.openId) : i.tgaInitParams.unionId && this.wxSdk.setUnionId(i.tgaInitParams.unionId))
                    }
                    this.isTADisable = 1 === i.reportingToTencentSdk, i.appId = i.appId ? r.checkAppId(i.appId) : r.checkAppId(i.appid), i.serverUrl = i.serverUrl ? r.checkUrl(i.serverUrl) : r.checkUrl(i.server_url);
                    var a = r.extend({}, C, T.getConfig());
                    r.isObject(i) ? this.config = r.extend(a, i) : this.config = a, this._init(this.config)
                }
            }
            return n(e, [{
                key: "_init",
                value: function(e) {
                    var t = this;
                    this.name = e.name, this.appId = e.appId || e.appid;
                    var i = e.serverUrl || e.server_url;
                    this.serverUrl = i + "/sync_xcx", this.serverDebugUrl = i + "/data_debug", this.configUrl = i + "/config", this.autoTrackProperties = {}, T.initConfig(e), this._queue = [], this.updateConfig(this.configUrl, this.appId), e.isChildInstance ? this._state = {} : (v.enabled = e.enableLog, this.instances = [], this._state = {
                        getSystemInfo: !1,
                        initComplete: !1
                    }, T.setGlobal(this, this.name)), this.store = new F(e, function() {
                        t.config.asyncPersistence && r.isFunction(t.config.persistenceComplete) && t.config.persistenceComplete(t), t._updateState()
                    }), this.enabled = !r.isBoolean(this.store._get("ta_enabled")) || this.store._get("ta_enabled"), this.isOptOut = !!r.isBoolean(this.store._get("ta_isOptOut")) && this.store._get("ta_isOptOut"), !e.isChildInstance && e.autoTrack && (this.autoTrack = T.initAutoTrackInstance(this, e)), void 0 !== this.config.enableBatch && !1 !== this.config.enableBatch && (this.batchConsumer = new q(this.config, this), this.batchConsumer.batchInterval())
                }
            }, {
                key: "initSystemInfo",
                value: function() {
                    var e = this;
                    this.config.isChildInstance || U.getSystemInfo(function() {
                        e._updateState({
                            getSystemInfo: !0
                        })
                    })
                }
            }, {
                key: "updateConfig",
                value: function(e, t) {
                    var i = this,
                        n = r.createExtraHeaders();
                    n["content-type"] = "application/json";
                    var a = T.request({
                        url: e + "?appid=" + t,
                        method: "GET",
                        header: n,
                        success: function(e) {
                            if (!(r.isUndefined(e) || r.isUndefined(e.data) || (v.info("Get remote config success(" + t + ") :" + JSON.stringify(e.data)), r.isUndefined(e.data.data) || (i.config.syncBatchSize = e.data.data.sync_batch_size, i.config.syncInterval = e.data.data.sync_interval, i.config.disableEventList = e.data.data.disable_event_list, r.isUndefined(e.data.data.secret_key))))) {
                                var n = e.data.data.secret_key;
                                i.config.secretKey = {
                                    publicKey: n.key,
                                    version: n.version
                                }
                            }
                        },
                        fail: function(e) {
                            v.info("Get remote config fail(" + t + ") :" + e.errMsg)
                        }
                    });
                    setTimeout(function() {
                        (r.isObject(a) || r.isPromise(a)) && r.isFunction(a.abort) && a.abort()
                    }, 3e3)
                }
            }, {
                key: "initInstance",
                value: function(t, i) {
                    if (!T.isWxPlat() || !this.isTADisable)
                        if (this.config.isChildInstance) v.warn("initInstance() cannot be called on child instance");
                        else {
                            if (r.isString(t) && t !== this.name && r.isUndefined(this[t])) {
                                var n = new e(r.extend({}, this.config, {
                                    enablePersistence: !1,
                                    isChildInstance: !0,
                                    name: t
                                }, i));
                                return this[t] = n, this.instances.push(t), this[t]._state = this._state, n
                            }
                            v.warn("initInstance() failed due to the name is invalid: " + t)
                        }
                }
            }, {
                key: "lightInstance",
                value: function(e) {
                    if (!T.isWxPlat() || !this.isTADisable) return this[e]
                }
            }, {
                key: "_setAutoTrackProperties",
                value: function(e) {
                    r.extend(this.autoTrackProperties, e)
                }
            }, {
                key: "init",
                value: function() {
                    if (!T.isWxPlat() || !this.isTADisable) {
                        if (this.initSystemInfo(), this._state.initComplete) return !1;
                        this._updateState({
                            initComplete: !0
                        }), v.info("TDAnalytics SDK initialize success, AppId = " + this.config.appId + ", ServerUrl = " + this.config.serverUrl + ", Mode = " + this.config.model + ", DeviceId = " + this.getDeviceId() + ", Lib = " + s + ", LibVersion = " + a)
                    }
                }
            }, {
                key: "_isReady",
                value: function() {
                    return this._state.getSystemInfo && this._state.initComplete && this.store.initComplete && this.getDeviceId()
                }
            }, {
                key: "_updateState",
                value: function(e) {
                    var t = this;
                    r.isObject(e) && r.extend(this._state, e), this._onStateChange(), r.each(this.instances, function(e) {
                        t[e]._onStateChange()
                    })
                }
            }, {
                key: "_onStateChange",
                value: function() {
                    var e = this;
                    this._isReady() && this._queue && this._queue.length > 0 && (r.each(this._queue, function(t) {
                        e[t[0]].apply(e, u.call(t[1]))
                    }), this._queue = [])
                }
            }, {
                key: "_hasDisabled",
                value: function() {
                    var e = !this.enabled || this.isOptOut;
                    return e && v.info("SDK is Pause or Stop!"), e
                }
            }, {
                key: "_sendRequest",
                value: function(e, t, i) {
                    if (!this._hasDisabled())
                        if (r.isUndefined(this.config.disableEventList) || !this.config.disableEventList.includes(e.eventName)) {
                            t = r.isDate(t) ? t : new Date;
                            var n = {
                                data: [{
                                    "#type": e.type,
                                    "#time": r.formatDate(r.formatTimeZone(t, this.config.zoneOffset)),
                                    "#distinct_id": this.store.getDistinctId()
                                }]
                            };
                            if (this.store.getAccountId() && (n.data[0]["#account_id"] = this.store.getAccountId()), "track" === e.type || "track_update" === e.type || "track_overwrite" === e.type) {
                                n.data[0]["#event_name"] = e.eventName, "track_update" === e.type || "track_overwrite" === e.type ? n.data[0]["#event_id"] = e.extraId : e.firstCheckId && (n.data[0]["#first_check_id"] = e.firstCheckId), n.data[0].properties = r.extend({
                                    "#zone_offset": r.getTimeZone(t, this.config.zoneOffset)
                                }, U.properties, this.autoTrackProperties, this.store.getSuperProperties(), this.dynamicProperties ? this.dynamicProperties() : {});
                                var a = this.store.removeEventTimer(e.eventName);
                                if (!r.isUndefined(a)) {
                                    var s = (new Date).getTime() - a,
                                        o = parseFloat((s / 1e3).toFixed(3));
                                    o > 86400 ? o = 86400 : o < 0 && (o = 0), n.data[0].properties["#duration"] = o
                                }
                            } else n.data[0].properties = {};
                            r.isObject(e.properties) && !r.isEmptyObject(e.properties) && r.extend(n.data[0].properties, e.properties), r.searchObjDate(n.data[0], this.config.zoneOffset), this.config.maxRetries > 1 && (n.data[0]["#uuid"] = r.UUIDv4()), n["#app_id"] = this.appId, v.info("Tracking data, " + JSON.stringify(n, null, 4));
                            var c = "debug" === this.config.debugMode || "debugOnly" === this.config.debugMode ? this.serverDebugUrl : this.serverUrl;
                            if (r.isBoolean(this.config.enableEncrypt) && !0 === this.config.enableEncrypt && (n.data[0] = r.generateEncryptyData(n.data[0], this.config.secretKey)), this.batchConsumer && "none" === this.config.debugMode && !i) return this.batchConsumer.add(n.data[0]), void(r.isFunction(e.onComplete) && e.onComplete({
                                code: 0,
                                msg: "success"
                            }));
                            if (i) {
                                var u = new FormData;
                                if ("debug" === this.config.debugMode || "debugOnly" === this.config.debugMode) u.append("source", "client"), u.append("appid", this.appId), u.append("dryRun", "debugOnly" === this.config.debugMode ? 1 : 0), u.append("deviceId", this.getDeviceId()), u.append("data", JSON.stringify(n.data[0])), navigator.sendBeacon(c, u);
                                else {
                                    var h = (new Date).getTime();
                                    n["#flush_time"] = h, navigator.sendBeacon(c, JSON.stringify(n))
                                }
                                r.isFunction(e.onComplete) && e.onComplete({
                                    statusCode: 200
                                })
                            } else A.runTimeout(this.config.sendTimeout) && A.resetTimeout(), A.enqueue(n, c, {
                                maxRetries: this.config.maxRetries,
                                sendTimeout: this.config.sendTimeout,
                                callback: e.onComplete,
                                debugMode: this.config.debugMode,
                                deviceId: this.getDeviceId()
                            })
                        } else v.info("Disabled Event : " + e.eventName)
                }
            }, {
                key: "_isObjectParams",
                value: function(e) {
                    return r.isObject(e) && r.isFunction(e.onComplete)
                }
            }, {
                key: "track",
                value: function(e, t, i, n) {
                    if (!(T.isWxPlat() && (this.wxSdk && (t || (t = {}), this.wxSdk.track(e, t)), this.isTADisable) || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var a = e;
                            e = a.eventName, t = a.properties, i = a.time, n = a.onComplete
                        }
                        O.event(e) && O.properties(t) || !this.config.strict ? this._internalTrack(e, t, i, n, !1, !0) : r.isFunction(n) && n({
                            code: -1,
                            msg: "invalid parameters"
                        })
                    }
                }
            }, {
                key: "trackUpdate",
                value: function(e) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled()))
                        if (e && e.eventId && (O.event(e.eventName) && O.properties(e.properties) || !this.config.strict))
                            if (this._isReady()) {
                                var t = r.checkCalibration(e.properties, e.time, this.config.enableCalibrationTime),
                                    i = r.isDate(e.time) ? e.time : new Date;
                                this._sendRequest({
                                    type: "track_update",
                                    eventName: e.eventName,
                                    properties: t,
                                    onComplete: e.onComplete,
                                    extraId: e.eventId
                                }, i)
                            } else this._queue.push(["trackUpdate", [e]]);
                    else v.warn("Invalide parameter for trackUpdate: you should pass an object contains eventId to trackUpdate()"), r.isFunction(e.onComplete) && e.onComplete({
                        code: -1,
                        msg: "invalid parameters"
                    })
                }
            }, {
                key: "trackOverwrite",
                value: function(e) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled()))
                        if (e && e.eventId && (O.event(e.eventName) && O.properties(e.properties) || !this.config.strict))
                            if (this._isReady()) {
                                var t = r.checkCalibration(e.properties, e.time, this.config.enableCalibrationTime),
                                    i = r.isDate(e.time) ? e.time : new Date;
                                this._sendRequest({
                                    type: "track_overwrite",
                                    eventName: e.eventName,
                                    properties: t,
                                    onComplete: e.onComplete,
                                    extraId: e.eventId
                                }, i)
                            } else this._queue.push(["trackOverwrite", [e]]);
                    else v.warn("Invalide parameter for trackOverwrite: you should pass an object contains eventId to trackOverwrite()"), r.isFunction(e.onComplete) && e.onComplete({
                        code: -1,
                        msg: "invalid parameters"
                    })
                }
            }, {
                key: "trackFirstEvent",
                value: function(e) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled()))
                        if (e && e.eventName && (O.event(e.eventName) && O.properties(e.properties) || !this.config.strict))
                            if (this._isReady()) {
                                var t = r.checkCalibration(e.properties, e.time, this.config.enableCalibrationTime),
                                    i = r.isDate(e.time) ? e.time : new Date;
                                this._sendRequest({
                                    type: "track",
                                    eventName: e.eventName,
                                    properties: t,
                                    onComplete: e.onComplete,
                                    firstCheckId: e.firstCheckId ? e.firstCheckId : this.getDeviceId()
                                }, i)
                            } else this._queue.push(["trackFirstEvent", [e]]);
                    else v.warn("Invalide parameter for trackFirstEvent: you should pass an object contains eventName to trackFirstEvent()"), r.isFunction(e.onComplete) && e.onComplete({
                        code: -1,
                        msg: "invalid parameters"
                    })
                }
            }, {
                key: "_internalTrack",
                value: function(e, t, i, n, a, s) {
                    if ((s || (this.wxSdk && (t || (t = {}), t.trackBy = "ThinkingData", this.wxSdk.track(e, t)), !this.isTADisable)) && !this._hasDisabled()) {
                        var o = r.checkCalibration(t, i, this.config.enableCalibrationTime);
                        i = r.isDate(i) ? i : new Date, this._isReady() ? this._sendRequest({
                            type: "track",
                            eventName: e,
                            properties: o,
                            onComplete: n
                        }, i, a) : this._queue.push(["_internalTrack", [e, t, i, n, a, !0]])
                    }
                }
            }, {
                key: "userSet",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var n = e;
                            e = n.properties, t = n.time, i = n.onComplete
                        }
                        O.propertiesMust(e) || !this.config.strict ? (t = r.isDate(t) ? t : new Date, this._isReady() ? this._sendRequest({
                            type: "user_set",
                            properties: e,
                            onComplete: i
                        }, t) : this._queue.push(["userSet", [e, t, i]])) : (v.warn("calling userSet failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        }))
                    }
                }
            }, {
                key: "userSetOnce",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var n = e;
                            e = n.properties, t = n.time, i = n.onComplete
                        }
                        O.propertiesMust(e) || !this.config.strict ? (t = r.isDate(t) ? t : new Date, this._isReady() ? this._sendRequest({
                            type: "user_setOnce",
                            properties: e,
                            onComplete: i
                        }, t) : this._queue.push(["userSetOnce", [e, t, i]])) : (v.warn("calling userSetOnce failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        }))
                    }
                }
            }, {
                key: "userUnset",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(a)) {
                            var n = a;
                            e = n.property, t = n.time, i = n.onComplete
                        }
                        if (O.propertyName(e) || !this.config.strict)
                            if (t = r.isDate(t) ? t : new Date, this._isReady()) {
                                var a = {};
                                a[e] = 0, this._sendRequest({
                                    type: "user_unset",
                                    properties: a,
                                    onComplete: i
                                }, t)
                            } else this._queue.push(["userUnset", [e, i, t]]);
                        else v.warn("calling userUnset failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        })
                    }
                }
            }, {
                key: "userDel",
                value: function(e, t) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var i = e;
                            e = i.time, t = i.onComplete
                        }
                        e = r.isDate(e) ? e : new Date, this._isReady() ? this._sendRequest({
                            type: "user_del",
                            onComplete: t
                        }, e) : this._queue.push(["userDel", [e, t]])
                    }
                }
            }, {
                key: "userAdd",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var n = e;
                            e = n.properties, t = n.time, i = n.onComplete
                        }
                        O.userAddProperties(e) || !this.config.strict ? (t = r.isDate(t) ? t : new Date, this._isReady() ? this._sendRequest({
                            type: "user_add",
                            properties: e,
                            onComplete: i
                        }, t) : this._queue.push(["userAdd", [e, t, i]])) : (v.warn("calling userAdd failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        }))
                    }
                }
            }, {
                key: "userAppend",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var n = e;
                            e = n.properties, t = n.time, i = n.onComplete
                        }
                        O.userAppendProperties(e) || !this.config.strict ? (t = r.isDate(t) ? t : new Date, this._isReady() ? this._sendRequest({
                            type: "user_append",
                            properties: e,
                            onComplete: i
                        }, t) : this._queue.push(["userAppend", [e, t, i]])) : (v.warn("calling userAppend failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        }))
                    }
                }
            }, {
                key: "userUniqAppend",
                value: function(e, t, i) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if (this._isObjectParams(e)) {
                            var n = e;
                            e = n.properties, t = n.time, i = n.onComplete
                        }
                        O.userAppendProperties(e) || !this.config.strict ? (t = r.isDate(t) ? t : new Date, this._isReady() ? this._sendRequest({
                            type: "user_uniq_append",
                            properties: e,
                            onComplete: i
                        }, t) : this._queue.push(["userUniqAppend", [e, t, i]])) : (v.warn("calling userAppend failed due to invalid arguments"), r.isFunction(i) && i({
                            code: -1,
                            msg: "invalid parameters"
                        }))
                    }
                }
            }, {
                key: "flush",
                value: function() {
                    T.isWxPlat() && this.isTADisable || this.batchConsumer && "none" === this.config.debugMode && this.batchConsumer.flush()
                }
            }, {
                key: "authorizeOpenID",
                value: function(e) {
                    this.identify(e)
                }
            }, {
                key: "identify",
                value: function(e) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if ("number" == typeof e) e = String(e);
                        else if ("string" != typeof e) return !1;
                        this.store.setDistinctId(e), v.info("Setting distinct ID, DistinctId = " + e)
                    }
                }
            }, {
                key: "getDistinctId",
                value: function() {
                    return T.isWxPlat() && this.isTADisable ? "" : this.store.getDistinctId()
                }
            }, {
                key: "login",
                value: function(e) {
                    if (!(T.isWxPlat() && this.isTADisable || this._hasDisabled())) {
                        if ("number" == typeof e) e = String(e);
                        else if ("string" != typeof e) return !1;
                        this.store.setAccountId(e), v.info("Login SDK, AccountId = " + e)
                    }
                }
            }, {
                key: "getAccountId",
                value: function() {
                    return T.isWxPlat() && this.isTADisable ? "" : this.store.getAccountId()
                }
            }, {
                key: "logout",
                value: function() {
                    T.isWxPlat() && this.isTADisable || this._hasDisabled() || (this.store.setAccountId(null), v.info("Logout SDK"))
                }
            }, {
                key: "setSuperProperties",
                value: function(e) {
                    T.isWxPlat() && this.isTADisable || this._hasDisabled() || (O.propertiesMust(e) || !this.config.strict ? this.store.setSuperProperties(e) : v.warn("setSuperProperties parameter must be a valid property value"))
                }
            }, {
                key: "clearSuperProperties",
                value: function() {
                    T.isWxPlat() && this.isTADisable || this._hasDisabled() || this.store.setSuperProperties({}, !0)
                }
            }, {
                key: "unsetSuperProperty",
                value: function(e) {
                    if ((!T.isWxPlat() || !this.isTADisable) && !this._hasDisabled() && r.isString(e)) {
                        var t = this.getSuperProperties();
                        delete t[e], this.store.setSuperProperties(t, !0)
                    }
                }
            }, {
                key: "getSuperProperties",
                value: function() {
                    return T.isWxPlat() && this.isTADisable ? {} : this.store.getSuperProperties()
                }
            }, {
                key: "getPresetProperties",
                value: function() {
                    if (T.isWxPlat() && this.isTADisable) return {};
                    var e = U.properties,
                        t = {},
                        i = e["#os"];
                    t.os = r.isUndefined(i) ? "" : i;
                    var n = e["#screen_width"];
                    t.screenWidth = r.isUndefined(n) ? 0 : n;
                    var a = e["#screen_height"];
                    t.screenHeight = r.isUndefined(a) ? 0 : a;
                    var s = e["#network_type"];
                    t.networkType = r.isUndefined(s) ? "" : s;
                    var o = e["#device_model"];
                    t.deviceModel = r.isUndefined(o) ? "" : o;
                    var c = e["#os_version"];
                    t.osVersion = r.isUndefined(c) ? "" : c, t.deviceId = this.getDeviceId();
                    var u = r.getTimeZone(new Date, this.config.zoneOffset);
                    t.zoneOffset = u;
                    var h = e["#manufacturer"];
                    return t.manufacturer = r.isUndefined(h) ? "" : h, t.toEventPresetProperties = function() {
                        return {
                            "#device_model": t.deviceModel,
                            "#device_id": t.deviceId,
                            "#screen_width": t.screenWidth,
                            "#screen_height": t.screenHeight,
                            "#os": t.os,
                            "#os_version": t.osVersion,
                            "#network_type": t.networkType,
                            "#zone_offset": u,
                            "#manufacturer": t.manufacturer
                        }
                    }, t
                }
            }, {
                key: "setDynamicSuperProperties",
                value: function(e) {
                    if (T.isWxPlat() && this.isTADisable) return {};
                    this._hasDisabled() || ("function" == typeof e ? O.properties(e()) || !this.config.strict ? this.dynamicProperties = e : v.warn("A dynamic public property must return a valid property value") : v.warn("setDynamicSuperProperties parameter must be a function type"))
                }
            }, {
                key: "timeEvent",
                value: function(e, t) {
                    if (T.isWxPlat() && this.isTADisable) return {};
                    this._hasDisabled() || (t = r.isDate(t) ? t : new Date, this._isReady() ? O.event(e) || !this.config.strict ? this.store.setEventTimer(e, t.getTime()) : v.warn("calling timeEvent failed due to invalid eventName: " + e) : this._queue.push(["timeEvent", [e, t]]))
                }
            }, {
                key: "getDeviceId",
                value: function() {
                    return T.isWxPlat() && this.isTADisable ? "" : U.properties["#device_id"]
                }
            }, {
                key: "enableTracking",
                value: function(e) {
                    T.isWxPlat() && this.isTADisable || (this.enabled = e, this.store._set("ta_enabled", e))
                }
            }, {
                key: "optOutTracking",
                value: function() {
                    T.isWxPlat() && this.isTADisable || (this.store.setSuperProperties({}, !0), this.store.setDistinctId(r.UUID()), this.store.setAccountId(null), this._queue.splice(0, this._queue.length), this.isOptOut = !0, this.store._set("ta_isOptOut", !0))
                }
            }, {
                key: "optOutTrackingAndDeleteUser",
                value: function() {
                    if (!T.isWxPlat() || !this.isTADisable) {
                        var e = new Date;
                        this._sendRequest({
                            type: "user_del"
                        }, e), this.optOutTracking()
                    }
                }
            }, {
                key: "optInTracking",
                value: function() {
                    T.isWxPlat() && this.isTADisable || (this.isOptOut = !1, this.store._set("ta_isOptOut", !1))
                }
            }, {
                key: "setTrackStatus",
                value: function(e) {
                    if (!T.isWxPlat() || !this.isTADisable) {
                        switch (e) {
                            case "PAUSE":
                                this.eventSaveOnly = !1, this.optInTracking(), this.enableTracking(!1);
                                break;
                            case "STOP":
                                this.eventSaveOnly = !1, this.optOutTracking(!0);
                                break;
                            case "SAVE_ONLY":
                                break;
                            case "NORMAL":
                            default:
                                this.eventSaveOnly = !1, this.optInTracking(), this.enableTracking(!0)
                        }
                        v.info("Change Status to " + e)
                    }
                }
            }]), e
        }(),
        j = {
            name: "thinkingdata",
            enableLog: !0,
            enableNative: !1
        },
        E = function() {
            function e(i) {
                t(this, e), i.appId = i.appId ? r.checkAppId(i.appId) : r.checkAppId(i.appid), i.serverUrl = i.serverUrl ? r.checkUrl(i.serverUrl) : r.checkUrl(i.server_url);
                var n = r.extend({}, j);
                r.isObject(i) ? this.config = r.extend(n, i) : this.config = n, this._init(this.config)
            }
            return n(e, [{
                key: "_isNativePlatform",
                value: function() {
                    return !(r.isUndefined(this.nativeProxy) || !this._isIOS() && !this._isAndroid() || !this.config.enableNative)
                }
            }, {
                key: "_isIOS",
                value: function() {
                    return "Conch-ios" === conchConfig.getOS()
                }
            }, {
                key: "_isAndroid",
                value: function() {
                    return "Conch-android" === conchConfig.getOS()
                }
            }, {
                key: "_init",
                value: function(e) {
                    this.name = e.name, this.appId = e.appId || e.appid;
                    try {
                        this._isIOS() ? this.nativeProxy = PlatformClass.createClass("LayaProxyApi") : this._isAndroid() && (this.nativeProxy = PlatformClass.createClass("demo.LayaProxyApi"))
                    } catch (e) {
                        console.log("[laya log] native createClass failed, err = " + e)
                    } finally {
                        this._isNativePlatform() ? (this.initInstanceForNative(this.name, e, this.appId), this._readStorage(e)) : this.taJs = new ThinkingAnalyticsAPIForJS(e)
                    }
                }
            }, {
                key: "_readStorage",
                value: function(e) {
                    var t = this,
                        i = e.persistenceName,
                        n = e.persistenceNameOld;
                    e.isChildInstance && (i = e.persistenceName + "_" + e.name, n = e.persistenceNameOld + "_" + e.name), this._state = T.getStorage(i) || {}, r.isEmptyObject(this._state) && (this._state = T.getStorage(n) || {}), r.isEmptyObject(this._state) ? T.getStorage(i, !0, function(e) {
                        r.isEmptyObject(e) ? T.getStorage(n, !0, function(e) {
                            t._state = r.extend2Layers({}, e, t._state)
                        }) : t._state = r.extend2Layers({}, e, t._state), t._state.distinct_id && t.identifyForNative(t._state.distinct_id), t._state.account_id && t.loginForNative(t._state.account_id)
                    }) : (this._state.distinct_id && this.identifyForNative(this._state.distinct_id), this._state.account_id && this.loginForNative(this._state.account_id))
                }
            }, {
                key: "initInstance",
                value: function(e, t) {
                    return this._isNativePlatform() ? (r.isUndefined(t) ? this[e] = new ThinkingAnalyticsAPI(this.config) : this[e] = new ThinkingAnalyticsAPI(t), this[e]) : (this[e] = this.taJs.initInstance(e, t), this[e])
                }
            }, {
                key: "lightInstance",
                value: function(e) {
                    return this[e]
                }
            }, {
                key: "init",
                value: function() {
                    if (this._isNativePlatform()) {
                        var e = window,
                            t = this;
                        return e.__autoTrackCallback = function(e) {
                            if (r.isFunction(t.config.autoTrack.callback)) {
                                var i = t.config.autoTrack.callback(e);
                                return JSON.stringify(i)
                            }
                            return "{}"
                        }, void this.startThinkingAnalyticsForNative(this.appId)
                    }
                    this.taJs.init()
                }
            }, {
                key: "track",
                value: function(e, t, i, n) {
                    this._isNativePlatform() ? this.trackForNative(e, t, i, this.appId) : this.taJs.track(e, t, i, n)
                }
            }, {
                key: "trackUpdate",
                value: function(e) {
                    this._isNativePlatform() ? this.trackUpdateForNative(e, this.appId) : this.taJs.trackUpdate(e)
                }
            }, {
                key: "trackOverwrite",
                value: function(e) {
                    this._isNativePlatform() ? this.trackOverwriteForNative(e, this.appId) : this.taJs.trackOverwrite(e)
                }
            }, {
                key: "trackFirstEvent",
                value: function(e) {
                    this._isNativePlatform() ? this.trackFirstEventForNative(e, this.appId) : this.taJs.trackFirstEvent(e)
                }
            }, {
                key: "userSet",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userSetForNative(e, this.appId) : this.taJs.userSet(e, t, i)
                }
            }, {
                key: "userSetOnce",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userSetOnceForNative(e, this.appId) : this.taJs.userSetOnce(e, t, i)
                }
            }, {
                key: "userUnset",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userUnsetForNative(e, this.appId) : this.taJs.userUnset(e, t, i)
                }
            }, {
                key: "userDel",
                value: function(e, t) {
                    this._isNativePlatform() ? this.userDelForNative(this.appId) : this.taJs.userDel(e, t)
                }
            }, {
                key: "userAdd",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userAddForNative(e, this.appId) : this.taJs.userAdd(e, t, i)
                }
            }, {
                key: "userAppend",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userAppendForNative(e, this.appId) : this.taJs.userAppend(e, t, i)
                }
            }, {
                key: "userUniqAppend",
                value: function(e, t, i) {
                    this._isNativePlatform() ? this.userUniqAppendForNative(e, this.appId) : this.taJs.userUniqAppend(e, t, i)
                }
            }, {
                key: "flush",
                value: function() {
                    this._isNativePlatform() ? this.flushForNative(this.appId) : this.taJs.flush()
                }
            }, {
                key: "authorizeOpenID",
                value: function(e) {
                    this.identify(e)
                }
            }, {
                key: "identify",
                value: function(e) {
                    this._isNativePlatform() ? this.identifyForNative(e, this.appId) : this.taJs.identify(e)
                }
            }, {
                key: "getDistinctId",
                value: function(e) {
                    if (!r.isUndefined(e)) {
                        if (this._isNativePlatform()) return void this.getDistinctIdForNative(e, this.appId);
                        e(this.taJs.getDistinctId())
                    }
                    return this.taJs.getDistinctId()
                }
            }, {
                key: "login",
                value: function(e) {
                    this._isNativePlatform() ? this.loginForNative(e, this.appId) : this.taJs.login(e)
                }
            }, {
                key: "getAccountId",
                value: function(e) {
                    if (!r.isUndefined(e)) {
                        if (this._isNativePlatform()) return void this.getAccountIdForNative(e, this.appId);
                        e(this.taJs.getAccountId())
                    }
                    return this.taJs.getAccountId()
                }
            }, {
                key: "logout",
                value: function() {
                    this._isNativePlatform() ? this.logoutForNative(this.appId) : this.taJs.logout()
                }
            }, {
                key: "setSuperProperties",
                value: function(e) {
                    this._isNativePlatform() ? this.setSuperPropertiesForNative(e, this.appId) : this.taJs.setSuperProperties(e)
                }
            }, {
                key: "clearSuperProperties",
                value: function() {
                    this._isNativePlatform() ? this.clearSuperPropertiesForNative(this.appId) : this.taJs.clearSuperProperties()
                }
            }, {
                key: "unsetSuperProperty",
                value: function(e) {
                    this._isNativePlatform() ? this.unsetSuperPropertyForNative(e, this.appId) : this.taJs.unsetSuperProperty(e)
                }
            }, {
                key: "getSuperProperties",
                value: function(e) {
                    if (!r.isUndefined(e)) {
                        if (this._isNativePlatform()) return void this.getSuperPropertiesForNative(e, this.appId);
                        e(this.taJs.getSuperProperties())
                    }
                    return this.taJs.getSuperProperties()
                }
            }, {
                key: "getPresetProperties",
                value: function(e) {
                    if (!r.isUndefined(e)) {
                        if (this._isNativePlatform()) return void this.getPresetPropertiesForNative(e, this.appId);
                        e(this.taJs.getPresetProperties())
                    }
                    return this.taJs.getPresetProperties()
                }
            }, {
                key: "setDynamicSuperProperties",
                value: function(e) {
                    this._isNativePlatform() ? "function" == typeof e ? this.dynamicProperties = e : v.warn("setDynamicSuperProperties parameter must be a function type") : this.taJs.setDynamicSuperProperties(e)
                }
            }, {
                key: "timeEvent",
                value: function(e, t) {
                    return this._isNativePlatform() ? this.timeEventForNative(e, this.appId) : this.taJs.timeEvent(e, t)
                }
            }, {
                key: "getDeviceId",
                value: function(e) {
                    if (!r.isUndefined(e)) {
                        if (this._isNativePlatform()) return void this.getDeviceIdForNative(e, this.appId);
                        e(this.taJs.getDeviceId())
                    }
                    return this.taJs.getDeviceId()
                }
            }, {
                key: "enableTracking",
                value: function(e) {
                    this._isNativePlatform() ? this.enableTrackingForNative(e, this.appId) : this.taJs.enableTracking(e)
                }
            }, {
                key: "optOutTracking",
                value: function() {
                    this._isNativePlatform() ? this.optOutTrackingForNative(this.appId) : this.taJs.optOutTracking()
                }
            }, {
                key: "optOutTrackingAndDeleteUser",
                value: function() {
                    this._isNativePlatform() ? this.optOutTrackingAndDeleteUserForNative(this.appId) : this.taJs.optOutTrackingAndDeleteUser()
                }
            }, {
                key: "optInTracking",
                value: function() {
                    this._isNativePlatform() ? this.optInTrackingForNative(this.appId) : this.taJs.optInTracking()
                }
            }, {
                key: "setTrackStatus",
                value: function(e) {
                    this._isNativePlatform() ? this.setTrackStatusForNative(e, this.appId) : this.taJs.setTrackStatus(e)
                }
            }, {
                key: "trackForNative",
                value: function(e, t, i, n) {
                    var a = r.isDate(i) ? r.formatDate(i) : "";
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? {} : t, a = r.isUndefined(a) ? "" : a, n = r.isUndefined(n) ? "" : n;
                    var s = r.extend(t, this.dynamicProperties ? this.dynamicProperties() : {});
                    s = r.encodeDates(s), this._isIOS() ? this.nativeProxy.call("track:properties:time:appId:", e, JSON.stringify(s), a, n) : this._isAndroid() && this.nativeProxy.call("track", e, JSON.stringify(s), a, n)
                }
            }, {
                key: "trackUpdateForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e.properties = r.extend(r.isUndefined(e.properties) ? {} : e.properties, this.dynamicProperties ? this.dynamicProperties() : {}), e.properties = r.encodeDates(e.properties), this._isIOS() ? this.nativeProxy.call("trackUpdate:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("trackUpdate", JSON.stringify(e), t)
                }
            }, {
                key: "trackFirstEventForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e.properties = r.extend(r.isUndefined(e.properties) ? {} : e.properties, this.dynamicProperties ? this.dynamicProperties() : {}), e.properties = r.encodeDates(e.properties), this._isIOS() ? this.nativeProxy.call("trackFirstEvent:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("trackFirstEvent", JSON.stringify(e), t)
                }
            }, {
                key: "trackOverwriteForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e.properties = r.extend(r.isUndefined(e.properties) ? {} : e.properties, this.dynamicProperties ? this.dynamicProperties() : {}), e.properties = r.encodeDates(e.properties), this._isIOS() ? this.nativeProxy.call("trackOverwrite:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("trackOverwrite", JSON.stringify(e), t)
                }
            }, {
                key: "timeEventForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("timeEvent:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("timeEvent", e, t)
                }
            }, {
                key: "loginForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("login:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("login", e, t)
                }
            }, {
                key: "logoutForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("logout:", e) : this._isAndroid() && this.nativeProxy.call("logout", e)
                }
            }, {
                key: "setSuperPropertiesForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("setSuperProperties:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("setSuperProperties", JSON.stringify(e), t)
                }
            }, {
                key: "getSuperPropertiesForNative",
                value: function(e, t) {
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(function(t) {
                        e(JSON.parse(t))
                    }, "getSuperProperties:", t) : this._isAndroid() && this.nativeProxy.callWithBack(function(t) {
                        e(JSON.parse(t))
                    }, "getSuperProperties", t)
                }
            }, {
                key: "unsetSuperPropertyForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("unsetSuperProperty:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("unsetSuperProperty", e, t)
                }
            }, {
                key: "clearSuperPropertiesForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("clearSuperProperties:", e) : this._isAndroid() && this.nativeProxy.call("clearSuperProperties", e)
                }
            }, {
                key: "userSetForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("userSet:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("userSet", JSON.stringify(e), t)
                }
            }, {
                key: "userSetOnceForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("userSetOnce:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("userSetOnce", JSON.stringify(e), t)
                }
            }, {
                key: "userAppendForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("userAppend:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("userAppend", JSON.stringify(e), t)
                }
            }, {
                key: "userUniqAppendForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("userUniqAppend:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("userUniqAppend", JSON.stringify(e), t)
                }
            }, {
                key: "userAddForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? {} : e, t = r.isUndefined(t) ? "" : t, e = r.encodeDates(e), this._isIOS() ? this.nativeProxy.call("userAdd:appId:", JSON.stringify(e), t) : this._isAndroid() && this.nativeProxy.call("userAdd", JSON.stringify(e), t)
                }
            }, {
                key: "userUnsetForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("userUnset:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("userUnset", e, t)
                }
            }, {
                key: "userDelForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("userDel:", e) : this._isAndroid() && this.nativeProxy.call("userDel", e)
                }
            }, {
                key: "flushForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("flush:", e) : this._isAndroid() && this.nativeProxy.call("flush", e)
                }
            }, {
                key: "authorizeOpenIDForNative",
                value: function(e, t) {
                    this.identifyForNative(e, t)
                }
            }, {
                key: "identifyForNative",
                value: function(e, t) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("identify:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("identify", e, t)
                }
            }, {
                key: "initInstanceForNative",
                value: function(e, t, i) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? {} : t, i = r.isUndefined(i) ? "" : i, this._isIOS() ? (this.nativeProxy.call("setCustomerLibInfoWithLibName:libVersion:", s, a), this.nativeProxy.call("initWithConfig:", JSON.stringify(t))) : this._isAndroid() && (this.nativeProxy.call("setCustomerLibInfo", s, a), this.nativeProxy.call("initWithConfig", JSON.stringify(t)))
                }
            }, {
                key: "lightInstanceForNative",
                value: function(e, t, i) {
                    e = r.isUndefined(e) ? "" : e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(function(e) {
                        i(e)
                    }, "lightInstance:appId:", e, t) : this._isAndroid() && this.nativeProxy.callWithBack(function(e) {
                        i(e)
                    }, "lightInstance", e, t)
                }
            }, {
                key: "startThinkingAnalyticsForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("startThinkingAnalytics:", e) : this._isAndroid() && this.nativeProxy.call("startThinkingAnalytics", e)
                }
            }, {
                key: "getDeviceIdForNative",
                value: function(e, t) {
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getDeviceId:", t) : this._isAndroid() && this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getDeviceId", t)
                }
            }, {
                key: "getDistinctIdForNative",
                value: function(e, t) {
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getDistinctId:", t) : this._isAndroid() && this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getDistinctId", t)
                }
            }, {
                key: "getAccountIdForNative",
                value: function(e, t) {
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getAccountId:", t) : this._isAndroid() && this.nativeProxy.callWithBack(function(t) {
                        e(t)
                    }, "getAccountId", t)
                }
            }, {
                key: "getPresetPropertiesForNative",
                value: function(e, t) {
                    function i(t) {
                        var i = JSON.parse(t),
                            n = {},
                            a = i["#os"];
                        n.os = r.isUndefined(a) ? "" : a;
                        var s = i["#screen_width"];
                        n.screenWidth = r.isUndefined(s) ? 0 : s;
                        var o = i["#screen_height"];
                        n.screenHeight = r.isUndefined(o) ? 0 : o;
                        var c = i["#network_type"];
                        n.networkType = r.isUndefined(c) ? "" : c;
                        var u = i["#device_model"];
                        n.deviceModel = r.isUndefined(u) ? "" : u;
                        var h = i["#os_version"];
                        n.osVersion = r.isUndefined(h) ? "" : h;
                        var l = i["#device_id"];
                        n.deviceId = r.isUndefined(l) ? "" : l;
                        var d = i["#zone_offset"];
                        n.zoneOffset = r.isUndefined(d) ? "" : d;
                        var p = i["#manufacturer"];
                        n.manufacturer = r.isUndefined(p) ? "" : p, n.toEventPresetProperties = function() {
                            return {
                                "#device_model": n.deviceModel,
                                "#device_id": n.deviceId,
                                "#screen_width": n.screenWidth,
                                "#screen_height": n.screenHeight,
                                "#os": n.os,
                                "#os_version": n.osVersion,
                                "#network_type": n.networkType,
                                "#zone_offset": n.zoneOffset,
                                "#manufacturer": n.manufacturer
                            }
                        }, e(n)
                    }
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.callWithBack(i, "getPresetProperties:", t) : this._isAndroid() && this.nativeProxy.callWithBack(i, "getPresetProperties", t)
                }
            }, {
                key: "enableTrackingForNative",
                value: function(e, t) {
                    e = !r.isUndefined(e) && e, t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("enableTracking:appId:", e.toString(), t) : this._isAndroid() && this.nativeProxy.call("enableTracking", e.toString(), t)
                }
            }, {
                key: "optOutTrackingForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("optOutTracking:", e) : this._isAndroid() && this.nativeProxy.call("optOutTracking", e)
                }
            }, {
                key: "optOutTrackingAndDeleteUserForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("optOutTrackingAndDeleteUser:", e) : this._isAndroid() && this.nativeProxy.call("optOutTrackingAndDeleteUser", e)
                }
            }, {
                key: "optInTrackingForNative",
                value: function(e) {
                    e = r.isUndefined(e) ? "" : e, this._isIOS() ? this.nativeProxy.call("optInTracking:", e) : this._isAndroid() && this.nativeProxy.call("optInTracking", e)
                }
            }, {
                key: "setTrackStatusForNative",
                value: function(e, t) {
                    t = r.isUndefined(t) ? "" : t, this._isIOS() ? this.nativeProxy.call("setTrackStatus:appId:", e, t) : this._isAndroid() && this.nativeProxy.call("setTrackStatus", e, t)
                }
            }]), e
        }();
    window.ThinkingAnalyticsAPI = E, window.ThinkingAnalyticsAPIForJS = J;
    var L = function() {
        function e() {
            t(this, e)
        }
        return n(e, null, [{
            key: "_shareInstance",
            value: function(e) {
                return void 0 !== this._instanceMaps[e] ? this._instanceMaps[e] : void 0 !== this._defaultInstance ? this._defaultInstance : void 0
            }
        }, {
            key: "init",
            value: function(e) {
                var t = new E(e);
                t.init(), void 0 !== t && (void 0 === this._defaultInstance && (this._defaultInstance = t, this._instanceMaps = {}), this._instanceMaps[e.appId] = t)
            }
        }, {
            key: "lightInstance",
            value: function(e) {
                return this._shareInstance(e).lightInstance()
            }
        }, {
            key: "track",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).track(e.eventName, e.properties, e.time, e.onComplete)
            }
        }, {
            key: "trackFirst",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).trackFirstEvent(e)
            }
        }, {
            key: "trackUpdate",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).trackUpdate(e)
            }
        }, {
            key: "trackOverwrite",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).trackOverwrite(e)
            }
        }, {
            key: "timeEvent",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).timeEvent(e.eventName, e.time)
            }
        }, {
            key: "userSet",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userSet(e.properties, e.time, e.onComplete)
            }
        }, {
            key: "userSetOnce",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userSetOnce(e.properties, e.time, e.onComplete)
            }
        }, {
            key: "userUnset",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userUnset(e.property, e.time, e.onComplete)
            }
        }, {
            key: "userAdd",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userAdd(e.properties, e.time, e.onComplete)
            }
        }, {
            key: "userAppend",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userAppend(e.properties, e.time, e.onComplete)
            }
        }, {
            key: "userUniqAppend",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userUniqAppend(e.properties, e.time, e.onComplete)
            }
        }, {
            key: "userDelete",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).userDel(e.time, e.onComplete)
            }
        }, {
            key: "setSuperProperties",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).setSuperProperties(e)
            }
        }, {
            key: "unsetSuperProperty",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).unsetSuperProperty(e)
            }
        }, {
            key: "clearSuperProperties",
            value: function(e) {
                this._shareInstance(e).clearSuperProperties()
            }
        }, {
            key: "getSuperProperties",
            value: function(e) {
                return this._shareInstance(e).getSuperProperties()
            }
        }, {
            key: "getSuperPropertiesAsync",
            value: function(e, t) {
                this._shareInstance(t).getSuperProperties(e)
            }
        }, {
            key: "setDynamicSuperProperties",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).setDynamicSuperProperties(e)
            }
        }, {
            key: "getPresetProperties",
            value: function(e) {
                return this._shareInstance(e).getPresetProperties()
            }
        }, {
            key: "getPresetPropertiesAsync",
            value: function(e, t) {
                this._shareInstance(t).getPresetProperties(e)
            }
        }, {
            key: "login",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).login(e)
            }
        }, {
            key: "logout",
            value: function(e) {
                this._shareInstance(e).logout()
            }
        }, {
            key: "getAccountId",
            value: function(e) {
                return this._shareInstance(e).getAccountId()
            }
        }, {
            key: "getAccountIdAsync",
            value: function(e, t) {
                this._shareInstance(t).getAccountId(e)
            }
        }, {
            key: "setDistinctId",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).identify(e)
            }
        }, {
            key: "getDistinctId",
            value: function(e) {
                return this._shareInstance(e).getDistinctId()
            }
        }, {
            key: "getDistinctIdAsync",
            value: function(e, t) {
                this._shareInstance(t).getDistinctId(e)
            }
        }, {
            key: "getSDKVersion",
            value: function() {
                return "1.0.0"
            }
        }, {
            key: "getDeviceId",
            value: function(e) {
                return this._shareInstance(e).getDeviceId()
            }
        }, {
            key: "getDeviceIdAsync",
            value: function(e, t) {
                this._shareInstance(t).getDeviceId(e)
            }
        }, {
            key: "flush",
            value: function(e) {
                this._shareInstance(e).flush()
            }
        }, {
            key: "setTrackStatus",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this._shareInstance(t).setTrackStatus(e)
            }
        }, {
            key: "ThinkingDataAPI",
            value: function() {
                return E
            }
        }]), e
    }();
    window.TDAnalytics = L;
});
define("weapp-adapter.js", function(require, module, exports) {
    ! function(e) {
        var t = {};

        function __webpack_require__(n) {
            if (t[n]) return t[n].exports;
            var o = t[n] = {
                exports: {},
                id: n,
                loaded: !1
            };
            return e[n].call(o.exports, o, o.exports, __webpack_require__), o.loaded = !0, o.exports
        }
        __webpack_require__.m = e, __webpack_require__.c = t, __webpack_require__.p = "", __webpack_require__(0)
    }([function(e, t, n) {
        "use strict";
        var o, r = function(e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                    for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                return t.default = e, t
            }(n(1)),
            i = n(4),
            a = (o = i) && o.__esModule ? o : {
                default: o
            };
        var u = GameGlobal;
        GameGlobal.__isAdapterInjected || (GameGlobal.__isAdapterInjected = !0, function() {
            r.addEventListener = function(e, t) {
                r.document.addEventListener(e, t)
            }, r.removeEventListener = function(e, t) {
                r.document.removeEventListener(e, t)
            }, r.canvas && (r.canvas.addEventListener = r.addEventListener, r.canvas.removeEventListener = r.removeEventListener), u.sharedCanvas && (sharedCanvas.__proto__.__proto__ = new a.default("canvas"), sharedCanvas.addEventListener = r.addEventListener, sharedCanvas.removeEventListener = r.removeEventListener);
            var e = wx.getSystemInfoSync().platform;
            if ("undefined" == typeof __devtoolssubcontext && "devtools" === e) {
                for (var t in r) {
                    var n = Object.getOwnPropertyDescriptor(u, t);
                    n && !0 !== n.configurable || Object.defineProperty(window, t, {
                        value: r[t]
                    })
                }
                for (var o in r.document) {
                    var i = Object.getOwnPropertyDescriptor(u.document, o);
                    i && !0 !== i.configurable || Object.defineProperty(u.document, o, {
                        value: r.document[o]
                    })
                }
                window.parent = window
            } else {
                for (var s in r) u[s] = r[s];
                u.window = r, window = u, window.top = window.parent = window
            }
        }())
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.cancelAnimationFrame = t.requestAnimationFrame = t.clearInterval = t.clearTimeout = t.setInterval = t.setTimeout = t.canvas = t.location = t.localStorage = t.HTMLElement = t.FileReader = t.Audio = t.Image = t.WebSocket = t.XMLHttpRequest = t.navigator = t.document = void 0;
        var o = n(2);
        Object.keys(o).forEach(function(e) {
            "default" !== e && "__esModule" !== e && Object.defineProperty(t, e, {
                enumerable: !0,
                get: function() {
                    return o[e]
                }
            })
        });
        var r = n(3);
        Object.keys(r).forEach(function(e) {
            "default" !== e && "__esModule" !== e && Object.defineProperty(t, e, {
                enumerable: !0,
                get: function() {
                    return r[e]
                }
            })
        });
        var i = _interopRequireDefault(n(9)),
            a = n(17),
            u = _interopRequireDefault(n(10)),
            s = _interopRequireDefault(n(18)),
            c = _interopRequireDefault(n(19)),
            l = _interopRequireDefault(n(20)),
            f = _interopRequireDefault(n(11)),
            d = _interopRequireDefault(n(12)),
            p = _interopRequireDefault(n(21)),
            h = _interopRequireDefault(n(4)),
            y = _interopRequireDefault(n(22)),
            v = _interopRequireDefault(n(23));

        function _interopRequireDefault(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        t.document = u.default, t.navigator = s.default, t.XMLHttpRequest = c.default, t.WebSocket = l.default, t.Image = f.default, t.Audio = d.default, t.FileReader = p.default, t.HTMLElement = h.default, t.localStorage = y.default, t.location = v.default;
        var _ = (0, a.isSubContext)() ? void 0 : new i.default;
        t.canvas = _, t.setTimeout = setTimeout, t.setInterval = setInterval, t.clearTimeout = clearTimeout, t.clearInterval = clearInterval, t.requestAnimationFrame = requestAnimationFrame, t.cancelAnimationFrame = cancelAnimationFrame
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = wx.getSystemInfoSync(),
            o = n.screenWidth,
            r = n.screenHeight,
            i = n.devicePixelRatio,
            a = t.innerWidth = o,
            u = t.innerHeight = r;
        t.devicePixelRatio = i;
        t.screen = {
            availWidth: a,
            availHeight: u
        }, t.performance = {
            now: function() {
                return Date.now() / 1e3
            }
        }, t.ontouchstart = null, t.ontouchmove = null, t.ontouchend = null
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.HTMLCanvasElement = t.HTMLImageElement = void 0;
        var o, r = n(4),
            i = (o = r) && o.__esModule ? o : {
                default: o
            };

        function _classCallCheck(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function _possibleConstructorReturn(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
        }

        function _inherits(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
                constructor: {
                    value: e,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
        }
        t.HTMLImageElement = function(e) {
            function HTMLImageElement() {
                return _classCallCheck(this, HTMLImageElement), _possibleConstructorReturn(this, (HTMLImageElement.__proto__ || Object.getPrototypeOf(HTMLImageElement)).call(this, "img"))
            }
            return _inherits(HTMLImageElement, i.default), HTMLImageElement
        }(), t.HTMLCanvasElement = function(e) {
            function HTMLCanvasElement() {
                return _classCallCheck(this, HTMLCanvasElement), _possibleConstructorReturn(this, (HTMLCanvasElement.__proto__ || Object.getPrototypeOf(HTMLCanvasElement)).call(this, "canvas"))
            }
            return _inherits(HTMLCanvasElement, i.default), HTMLCanvasElement
        }()
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            i = n(5),
            a = (o = i) && o.__esModule ? o : {
                default: o
            },
            u = n(8),
            s = n(2);
        var c = function(e) {
            function HTMLElement() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                ! function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, HTMLElement);
                var t = function(e, t) {
                    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return !t || "object" != typeof t && "function" != typeof t ? e : t
                }(this, (HTMLElement.__proto__ || Object.getPrototypeOf(HTMLElement)).call(this));
                return t.className = "", t.childern = [], t.style = {
                    width: s.innerWidth + "px",
                    height: s.innerHeight + "px"
                }, t.insertBefore = u.noop, t.innerHTML = "", t.tagName = e.toUpperCase(), t
            }
            return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
            }(HTMLElement, a.default), r(HTMLElement, [{
                key: "setAttribute",
                value: function(e, t) {
                    this[e] = t
                }
            }, {
                key: "getAttribute",
                value: function(e) {
                    return this[e]
                }
            }, {
                key: "getBoundingClientRect",
                value: function() {
                    return {
                        top: 0,
                        left: 0,
                        width: s.innerWidth,
                        height: s.innerHeight
                    }
                }
            }, {
                key: "focus",
                value: function() {}
            }, {
                key: "clientWidth",
                get: function() {
                    var e = parseInt(this.style.fontSize, 10) * this.innerHTML.length;
                    return Number.isNaN(e) ? 0 : e
                }
            }, {
                key: "clientHeight",
                get: function() {
                    var e = parseInt(this.style.fontSize, 10);
                    return Number.isNaN(e) ? 0 : e
                }
            }]), HTMLElement
        }();
        t.default = c
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = n(6),
            i = (o = r) && o.__esModule ? o : {
                default: o
            };
        var a = function(e) {
            function ELement() {
                ! function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, ELement);
                var e = function(e, t) {
                    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return !t || "object" != typeof t && "function" != typeof t ? e : t
                }(this, (ELement.__proto__ || Object.getPrototypeOf(ELement)).call(this));
                return e.className = "", e.children = [], e
            }
            return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
            }(ELement, i.default), ELement
        }();
        t.default = a
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            i = n(7),
            a = (o = i) && o.__esModule ? o : {
                default: o
            };
        var u = function(e) {
            function Node() {
                ! function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, Node);
                var e = function(e, t) {
                    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return !t || "object" != typeof t && "function" != typeof t ? e : t
                }(this, (Node.__proto__ || Object.getPrototypeOf(Node)).call(this));
                return e.childNodes = [], e
            }
            return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
            }(Node, a.default), r(Node, [{
                key: "appendChild",
                value: function(e) {
                    if (!(e instanceof Node)) throw new TypeError("Failed to executed 'appendChild' on 'Node': parameter 1 is not of type 'Node'.");
                    this.childNodes.push(e)
                }
            }, {
                key: "cloneNode",
                value: function() {
                    var e = Object.create(this);
                    return Object.assign(e, this), e
                }
            }, {
                key: "removeChild",
                value: function(e) {
                    var t = this.childNodes.findIndex(function(t) {
                        return t === e
                    });
                    return t > -1 ? this.childNodes.splice(t, 1) : null
                }
            }]), Node
        }();
        t.default = u
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = function() {
            function defineProperties(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var o = t[n];
                    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                }
            }
            return function(e, t, n) {
                return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
            }
        }();
        var o = new WeakMap,
            r = function() {
                function EventTarget() {
                    ! function(e, t) {
                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                    }(this, EventTarget), o.set(this, {})
                }
                return n(EventTarget, [{
                    key: "addEventListener",
                    value: function(e, t) {
                        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                            r = o.get(this);
                        r || (r = {}, o.set(this, r)), r[e] || (r[e] = []), r[e].push(t), n.capture && console.warn("EventTarget.addEventListener: options.capture is not implemented."), n.once && console.warn("EventTarget.addEventListener: options.once is not implemented."), n.passive && console.warn("EventTarget.addEventListener: options.passive is not implemented.")
                    }
                }, {
                    key: "removeEventListener",
                    value: function(e, t) {
                        var n = o.get(this)[e];
                        if (n && n.length > 0)
                            for (var r = n.length; r--; r > 0)
                                if (n[r] === t) {
                                    n.splice(r, 1);
                                    break
                                }
                    }
                }, {
                    key: "dispatchEvent",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            t = o.get(this)[e.type];
                        if (t)
                            for (var n = 0; n < t.length; n++) t[n](e)
                    }
                }]), EventTarget
            }();
        t.default = r
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.noop = function() {}, t.isSubContext = function() {
            return "undefined" != typeof GameGlobal && !0 === GameGlobal.__isSubContext
        }
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.default = function() {
            var e = wx.createCanvas();
            e.type = "canvas", e.__proto__.__proto__ = new o.default("canvas");
            e.getContext;
            return e.getBoundingClientRect = function() {
                return {
                    top: 0,
                    left: 0,
                    width: window.innerWidth,
                    height: window.innerHeight
                }
            }, e
        };
        n(3);
        var o = _interopRequireDefault(n(4));
        _interopRequireDefault(n(10));

        function _interopRequireDefault(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o = function(e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                    for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                return t.default = e, t
            }(n(1)),
            r = _interopRequireDefault(n(4)),
            i = _interopRequireDefault(n(11)),
            a = _interopRequireDefault(n(12)),
            u = _interopRequireDefault(n(9));

        function _interopRequireDefault(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        n(15);
        var s = {},
            c = {
                readyState: "complete",
                visibilityState: "visible",
                documentElement: o,
                hidden: !1,
                style: {},
                location: o.location,
                ontouchstart: null,
                ontouchmove: null,
                ontouchend: null,
                head: new r.default("head"),
                body: new r.default("body"),
                createElement: function(e) {
                    return "canvas" === e ? new u.default : "audio" === e ? new a.default : "img" === e ? new i.default : new r.default(e)
                },
                getElementById: function(e) {
                    return e === o.canvas.id ? o.canvas : null
                },
                getElementsByTagName: function(e) {
                    return "head" === e ? [c.head] : "body" === e ? [c.body] : "canvas" === e ? [o.canvas] : []
                },
                querySelector: function(e) {
                    return "head" === e ? c.head : "body" === e ? c.body : "canvas" === e ? o.canvas : e === "#" + o.canvas.id ? o.canvas : null
                },
                querySelectorAll: function(e) {
                    return "head" === e ? [c.head] : "body" === e ? [c.body] : "canvas" === e ? [o.canvas] : []
                },
                addEventListener: function(e, t) {
                    s[e] || (s[e] = []), s[e].push(t)
                },
                removeEventListener: function(e, t) {
                    var n = s[e];
                    if (n && n.length > 0)
                        for (var o = n.length; o--; o > 0)
                            if (n[o] === t) {
                                n.splice(o, 1);
                                break
                            }
                },
                dispatchEvent: function(e) {
                    var t = s[e.type];
                    if (t)
                        for (var n = 0; n < t.length; n++) t[n](e)
                }
            };
        t.default = c
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.default = function() {
            return wx.createImage()
        }
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            i = n(13),
            a = (o = i) && o.__esModule ? o : {
                default: o
            },
            u = n(8);

        function _possibleConstructorReturn(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
        }
        var s = 0,
            c = 1,
            l = 2,
            f = 3,
            d = 4,
            p = new WeakMap,
            h = new WeakMap,
            y = (new WeakMap, new WeakMap, function(e) {
                function Audio(e) {
                    ! function(e, t) {
                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                    }(this, Audio);
                    var t = _possibleConstructorReturn(this, (Audio.__proto__ || Object.getPrototypeOf(Audio)).call(this));
                    if (t.HAVE_NOTHING = s, t.HAVE_METADATA = c, t.HAVE_CURRENT_DATA = l, t.HAVE_FUTURE_DATA = f, t.HAVE_ENOUGH_DATA = d, t.readyState = s, (0, u.isSubContext)()) return console.warn("HTMLAudioElement is not supported in SubContext."), _possibleConstructorReturn(t);
                    h.set(t, "");
                    var n = wx.createInnerAudioContext();
                    return p.set(t, n), n.onCanplay(function() {
                        t.dispatchEvent({
                            type: "load"
                        }), t.dispatchEvent({
                            type: "loadend"
                        }), t.dispatchEvent({
                            type: "canplay"
                        }), t.dispatchEvent({
                            type: "canplaythrough"
                        }), t.dispatchEvent({
                            type: "loadedmetadata"
                        }), t.readyState = l
                    }), n.onPlay(function() {
                        t.dispatchEvent({
                            type: "play"
                        })
                    }), n.onPause(function() {
                        t.dispatchEvent({
                            type: "pause"
                        })
                    }), n.onEnded(function() {
                        t.dispatchEvent({
                            type: "ended"
                        }), t.readyState = d
                    }), n.onError(function() {
                        t.dispatchEvent({
                            type: "error"
                        })
                    }), e && (p.get(t).src = e), t
                }
                return function(e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
                }(Audio, a.default), r(Audio, [{
                    key: "load",
                    value: function() {
                        console.warn("HTMLAudioElement.load() is not implemented.")
                    }
                }, {
                    key: "play",
                    value: function() {
                        (0, u.isSubContext)() || p.get(this).play()
                    }
                }, {
                    key: "pause",
                    value: function() {
                        (0, u.isSubContext)() || p.get(this).pause()
                    }
                }, {
                    key: "canPlayType",
                    value: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                        return "string" != typeof e ? "" : e.indexOf("audio/mpeg") > -1 || e.indexOf("audio/mp4") ? "probably" : ""
                    }
                }, {
                    key: "cloneNode",
                    value: function() {
                        var e = new Audio;
                        return (0, u.isSubContext)() || (e.loop = p.get(this).loop, e.autoplay = p.get(this).loop, e.src = this.src), e
                    }
                }, {
                    key: "currentTime",
                    get: function() {
                        return (0, u.isSubContext)() ? 0 : p.get(this).currentTime
                    },
                    set: function(e) {
                        (0, u.isSubContext)() || p.get(this).seek(e)
                    }
                }, {
                    key: "src",
                    get: function() {
                        return h.get(this)
                    },
                    set: function(e) {
                        h.set(this, e), (0, u.isSubContext)() || (p.get(this).src = e)
                    }
                }, {
                    key: "loop",
                    get: function() {
                        return !(0, u.isSubContext)() && p.get(this).loop
                    },
                    set: function(e) {
                        (0, u.isSubContext)() || (p.get(this).loop = e)
                    }
                }, {
                    key: "autoplay",
                    get: function() {
                        return !(0, u.isSubContext)() && p.get(this).autoplay
                    },
                    set: function(e) {
                        (0, u.isSubContext)() || (p.get(this).autoplay = e)
                    }
                }, {
                    key: "paused",
                    get: function() {
                        return !(0, u.isSubContext)() && p.get(this).paused
                    }
                }]), Audio
            }());
        t.default = y
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = n(14),
            i = (o = r) && o.__esModule ? o : {
                default: o
            };
        var a = function(e) {
            function HTMLAudioElement() {
                return function(e, t) {
                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                    }(this, HTMLAudioElement),
                    function(e, t) {
                        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return !t || "object" != typeof t && "function" != typeof t ? e : t
                    }(this, (HTMLAudioElement.__proto__ || Object.getPrototypeOf(HTMLAudioElement)).call(this, "audio"))
            }
            return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
            }(HTMLAudioElement, i.default), HTMLAudioElement
        }();
        t.default = a
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, r = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            i = n(4),
            a = (o = i) && o.__esModule ? o : {
                default: o
            };
        var u = function(e) {
            function HTMLMediaElement(e) {
                return function(e, t) {
                        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                    }(this, HTMLMediaElement),
                    function(e, t) {
                        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return !t || "object" != typeof t && "function" != typeof t ? e : t
                    }(this, (HTMLMediaElement.__proto__ || Object.getPrototypeOf(HTMLMediaElement)).call(this, e))
            }
            return function(e, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
            }(HTMLMediaElement, a.default), r(HTMLMediaElement, [{
                key: "addTextTrack",
                value: function() {}
            }, {
                key: "captureStream",
                value: function() {}
            }, {
                key: "fastSeek",
                value: function() {}
            }, {
                key: "load",
                value: function() {}
            }, {
                key: "pause",
                value: function() {}
            }, {
                key: "play",
                value: function() {}
            }]), HTMLMediaElement
        }();
        t.default = u
    }, function(e, t, n) {
        "use strict";
        n(16)
    }, function(e, t, n) {
        "use strict";
        var o, r = function(e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                    for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                return t.default = e, t
            }(n(1)),
            i = n(10),
            a = (o = i) && o.__esModule ? o : {
                default: o
            },
            u = n(8);
        var s = function TouchEvent(e) {
            ! function(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
            }(this, TouchEvent), this.target = r.canvas, this.currentTarget = r.canvas, this.touches = [], this.targetTouches = [], this.changedTouches = [], this.preventDefault = u.noop, this.stopPropagation = u.noop, this.type = e
        };

        function touchEventHandlerFactory(e) {
            return function(t) {
                var n = new s(e);
                n.touches = t.touches, n.targetTouches = Array.prototype.slice.call(t.touches), n.changedTouches = t.changedTouches, n.timeStamp = t.timeStamp, a.default.dispatchEvent(n)
            }
        }
        wx.onTouchStart(touchEventHandlerFactory("touchstart")), wx.onTouchMove(touchEventHandlerFactory("touchmove")), wx.onTouchEnd(touchEventHandlerFactory("touchend")), wx.onTouchCancel(touchEventHandlerFactory("touchcancel"))
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.noop = function() {}, t.isSubContext = function() {
            return "undefined" != typeof GameGlobal && !0 === GameGlobal.__isSubContext
        }
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o = n(8),
            r = {
                platform: wx.getSystemInfoSync().platform,
                language: "zh-cn",
                appVersion: "5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1",
                userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Mobile/14E8301 MicroMessenger/6.6.0 MiniGame NetType/WIFI Language/zh_CN",
                onLine: !0,
                geolocation: {
                    getCurrentPosition: o.noop,
                    watchPosition: o.noop,
                    clearWatch: o.noop
                }
            };
        t.default = r
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = function() {
            function defineProperties(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var o = t[n];
                    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                }
            }
            return function(e, t, n) {
                return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
            }
        }();
        var o = new WeakMap,
            r = new WeakMap,
            i = new WeakMap,
            a = new WeakMap,
            u = new WeakMap;

        function _triggerEvent(e) {
            if ("function" == typeof this["on" + e]) {
                for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) n[o - 1] = arguments[o];
                this["on" + e].apply(this, n)
            }
        }

        function _changeReadyState(e) {
            this.readyState = e, _triggerEvent.call(this, "readystatechange")
        }
        var s = function() {
            function XMLHttpRequest() {
                ! function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, XMLHttpRequest), this.onabort = null, this.onerror = null, this.onload = null, this.onloadstart = null, this.onprogress = null, this.ontimeout = null, this.onloadend = null, this.onreadystatechange = null, this.readyState = 0, this.response = null, this.responseText = null, this.responseType = "", this.responseXML = null, this.status = 0, this.statusText = "", this.upload = {}, this.withCredentials = !1, i.set(this, {
                    "content-type": "application/x-www-form-urlencoded"
                }), a.set(this, {})
            }
            return n(XMLHttpRequest, [{
                key: "abort",
                value: function() {
                    var e = u.get(this);
                    e && e.abort()
                }
            }, {
                key: "getAllResponseHeaders",
                value: function() {
                    var e = a.get(this);
                    return Object.keys(e).map(function(t) {
                        return t + ": " + e[t]
                    }).join("\n")
                }
            }, {
                key: "getResponseHeader",
                value: function(e) {
                    return a.get(this)[e]
                }
            }, {
                key: "open",
                value: function(e, t) {
                    r.set(this, e), o.set(this, t), _changeReadyState.call(this, XMLHttpRequest.OPENED)
                }
            }, {
                key: "overrideMimeType",
                value: function() {}
            }, {
                key: "send",
                value: function() {
                    var e = this,
                        t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                    if (this.readyState !== XMLHttpRequest.OPENED) throw new Error("Failed to execute 'send' on 'XMLHttpRequest': The object's state must be OPENED.");
                    wx.request({
                        data: t,
                        url: o.get(this),
                        method: r.get(this),
                        header: i.get(this),
                        responseType: this.responseType,
                        success: function(t) {
                            var n = t.data,
                                o = t.statusCode,
                                r = t.header;
                            if ("string" != typeof n && !(n instanceof ArrayBuffer)) try {
                                n = JSON.stringify(n)
                            } catch (e) {
                                n = n
                            }
                            if (e.status = o, a.set(e, r), _triggerEvent.call(e, "loadstart"), _changeReadyState.call(e, XMLHttpRequest.HEADERS_RECEIVED), _changeReadyState.call(e, XMLHttpRequest.LOADING), e.response = n, n instanceof ArrayBuffer) {
                                e.responseText = "";
                                for (var i = new Uint8Array(n), u = i.byteLength, s = 0; s < u; s++) e.responseText += String.fromCharCode(i[s])
                            } else e.responseText = n;
                            _changeReadyState.call(e, XMLHttpRequest.DONE), _triggerEvent.call(e, "load"), _triggerEvent.call(e, "loadend")
                        },
                        fail: function(t) {
                            var n = t.errMsg; - 1 !== n.indexOf("abort") ? _triggerEvent.call(e, "abort") : _triggerEvent.call(e, "error", n), _triggerEvent.call(e, "loadend")
                        }
                    })
                }
            }, {
                key: "setRequestHeader",
                value: function(e, t) {
                    var n = i.get(this);
                    n[e] = t, i.set(this, n)
                }
            }]), XMLHttpRequest
        }();
        s.UNSEND = 0, s.OPENED = 1, s.HEADERS_RECEIVED = 2, s.LOADING = 3, s.DONE = 4, t.default = s
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            r = n(8);
        var i = new WeakMap,
            a = function() {
                function WebSocket(e) {
                    var t = this,
                        n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                    if (function(e, t) {
                            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                        }(this, WebSocket), this.binaryType = "", this.bufferedAmount = 0, this.extensions = "", this.onclose = null, this.onerror = null, this.onmessage = null, this.onopen = null, this.protocol = "", this.readyState = 3, (0, r.isSubContext)()) throw new Error("WebSocket is not supported in SubContext.");
                    if ("string" != typeof e || !/(^ws:\/\/)|(^wss:\/\/)/.test(e)) throw new TypeError("Failed to construct 'WebSocket': The URL '" + e + "' is invalid");
                    this.url = e, this.readyState = WebSocket.CONNECTING;
                    var o = wx.connectSocket({
                        url: e,
                        protocols: Array.isArray(n) ? n : [n]
                    });
                    return i.set(this, o), o.onClose(function(e) {
                        t.readyState = WebSocket.CLOSED, "function" == typeof t.onclose && t.onclose(e)
                    }), o.onMessage(function(e) {
                        "function" == typeof t.onmessage && t.onmessage(e)
                    }), o.onOpen(function() {
                        t.readyState = WebSocket.OPEN, "function" == typeof t.onopen && t.onopen()
                    }), o.onError(function(e) {
                        "function" == typeof t.onerror && t.onerror(new Error(e.errMsg))
                    }), this
                }
                return o(WebSocket, [{
                    key: "close",
                    value: function(e, t) {
                        this.readyState = WebSocket.CLOSING, i.get(this).close({
                            code: e,
                            reason: t
                        })
                    }
                }, {
                    key: "send",
                    value: function(e) {
                        if (e instanceof Uint8Array && (e = e.slice().buffer), "string" != typeof e && !(e instanceof ArrayBuffer)) throw new TypeError("Failed to send message: The data " + e + " is invalid");
                        i.get(this).send({
                            data: e
                        })
                    }
                }]), WebSocket
            }();
        a.CONNECTING = 0, a.OPEN = 1, a.CLOSING = 2, a.CLOSED = 3, t.default = a
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o = function() {
                function defineProperties(e, t) {
                    for (var n = 0; n < t.length; n++) {
                        var o = t[n];
                        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o)
                    }
                }
                return function(e, t, n) {
                    return t && defineProperties(e.prototype, t), n && defineProperties(e, n), e
                }
            }(),
            r = n(8);
        var i = function() {
            function FileReader() {
                ! function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, FileReader)
            }
            return o(FileReader, [{
                key: "construct",
                value: function() {
                    if ((0, r.isSubContext)()) throw new Error("FileReader is not supported in SubContext.")
                }
            }]), FileReader
        }();
        t.default = i
    }, function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o = n(8),
            r = {get length() {
                    return wx.getStorageInfoSync().keys.length
                },
                key: function(e) {
                    return wx.getStorageInfoSync().keys[e]
                },
                getItem: function(e) {
                    return wx.getStorageSync(e)
                },
                setItem: function(e, t) {
                    return wx.setStorageSync(e, t)
                },
                removeItem: function(e) {
                    wx.removeStorageSync(e)
                },
                clear: function() {
                    wx.clearStorageSync()
                }
            },
            i = {},
            a = {get length() {
                    return Object.keys(i).length
                },
                key: function(e) {
                    return Object.keys(i)[e]
                },
                getItem: function(e) {
                    return i[e]
                },
                setItem: function(e, t) {
                    i[e] = t
                },
                removeItem: function(e) {
                    delete i[e]
                },
                clear: function() {
                    i = {}
                }
            },
            u = (0, o.isSubContext)() ? a : r;
        t.default = u
    }, function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        t.default = {
            href: "game.js",
            reload: function() {}
        }
    }]);
});
var global = (function() {
    return this
})();
if (!global && typeof GameGlobal !== 'undefined') global = GameGlobal;
var pluginInfoMap = {};;
global.requirePlugin = global.requirePlugin || function(path) {
    var position = path.indexOf('/');
    var alias = '';
    var pagePath = '';
    if (position !== -1) {
        alias = path.substr(0, position);
        pagePath = path.substr(position + 1, path.length);
    } else {
        alias = path;
    }
    if (pluginInfoMap.hasOwnProperty(alias)) {
        var realPath = '';
        if (pagePath.length === 0) {
            realPath = '__plugin__/' + pluginInfoMap[alias].appid;
            return require(realPath);
        } else {
            realPath = '__plugin__/' + pluginInfoMap[alias].appid + '/' + pagePath;
            return require(realPath);
        }
    } else {
        console.error('not found alias: ', alias);
        throw new Error('Plugin ' + alias + ' is not defined.')
    }
};
define("game.js", function(require, module, exports) {
    "use strict";

    function getWebGLContext(canvas) {
        var Config = {
            useWebGL2: true,
            isStencil: true,
            isAlpha: false,
            isAntialias: true,
            premultipliedAlpha: true,
            preserveDrawingBuffer: false
        }

        var gl;
        var names = ["webgl2", "webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
        if (!Config.useWebGL2) {
            names.shift();
        }
        for (var i = 0; i < names.length; i++) {
            try {
                gl = canvas.getContext(names[i], {
                    stencil: Config.isStencil,
                    alpha: Config.isAlpha,
                    antialias: Config.isAntialias,
                    premultipliedAlpha: Config.premultipliedAlpha,
                    preserveDrawingBuffer: Config.preserveDrawingBuffer
                });
            } catch (e) {}
            if (gl) {
                (names[i] === 'webgl2') && (window._isWebGL2 = true);
                return gl;
            }
        }
        return null;
    }

    require("weapp-adapter.js");
    var FIRSTRENDER = true;
    var render = function render() {
        if (FIRSTRENDER) {
            first_scene.drawImg("loading_bg.jpg", gl);
            FIRSTRENDER = false;
            requestAnimationFrame(render);
        }
    };

    function httpSend(url, method, data) {
        try {
            let http = new XMLHttpRequest();
            http.open(method, url, true);
            http.setRequestHeader("Content-Type", "application/json");
            http.onerror = function(e) {
                let s = http.status + " text:" + http.statusText;
                console.log(s);
            };
            http.onload = function(e) {
                let status = http.status !== undefined ? http.status : 200;
                if (status === 200 || status === 204 || status === 0) {
                    console.log(JSON.parse(http.responseText));
                } else {
                    let s = "[" + http.status + "]" + http.statusText + ":" + http.responseURL;
                    console.log(s);
                }
            };
            http.send(JSON.stringify(data));
        } catch (error) {

        }
    }

    var first_scene = require("./first-screen.js");
    var gl = getWebGLContext(window.canvas);
    window.__first_canvas_gl = gl;
    requestAnimationFrame(render);
    render();

    ///////////////////////////////////////////////////////////////
    // 数数
    // 数数参数，通过GameCfg.ts中配置，发布的时候，这里会自动修改
    window["TDAnalytics_Config"] = {
        platform: "wx",
        gameID: "tangpingmengjing",
        shushuId: "18c8add6caf4476e8958d9430676d511",
        subpackageStartTime: Date.now(),
        appId: "wx5b1a2c62d994ea51"
    }

    function formatTimestamp(timestamp) {
        const date = new Date(timestamp);

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始
        const day = String(date.getDate()).padStart(2, '0');

        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }
    if (window["TDAnalytics_Config"].shushuId) {
        require("tdanalytics.mg.laya.min.js");
        // TE SDK 配置对象
        var config = {
            appId: window["TDAnalytics_Config"].shushuId, // 项目 APP ID
            serverUrl: "https://ta-receiver.cdwaterbear.cn", // 上报地址
            autoTrack: {
                appLaunch: true,
                appShow: true, // 自动采集 ta_mg_show
                appHide: true // 自动采集 ta_mg_hide
            }
        };
        // 初始化
        TDAnalytics.init(config);
        TDAnalytics.setSuperProperties({
                platform: window["TDAnalytics_Config"].platform,
                event_game_id: window["TDAnalytics_Config"].gameID
            })
            // 获取广告id
        let aid = 0
        if (window["TDAnalytics_Config"].platform == "wx") {
            let launchParams = wx.getLaunchOptionsSync();
            let query = launchParams && launchParams.query;
            if (query && query.weixinadinfo) {
                let weixinadinfoArr = query.weixinadinfo.split(".");
                if (weixinadinfoArr && weixinadinfoArr[0]) {
                    aid = weixinadinfoArr[0];
                }
            }
        }
        TDAnalytics.userSetOnce({
            properties: {
                platform: window["TDAnalytics_Config"].platform,
                user_game_id: window["TDAnalytics_Config"].gameID,
                first_open_time: formatTimestamp(Date.now()),
                wx_aid: aid
            }
        })
        TDAnalytics.userSet({
            properties: {
                last_open_time: formatTimestamp(Date.now())
            }
        })
        TDAnalytics.userAdd({
            properties: {
                total_open_cnt: 1
            }
        })
    }
    ///////////////////////////////////////////////////////////////

    var isOpen = true;
    // 获取状态
    try {
        let accountInfo = wx.getAccountInfoSync();
        if (accountInfo && accountInfo.miniProgram && accountInfo.miniProgram.appId && accountInfo.miniProgram.appId != window["TDAnalytics_Config"].appId) {
            let url = `https://idauth.cdwaterbear.cn/getStatus?gameId=${window["TDAnalytics_Config"].gameID}&appId=${accountInfo.miniProgram.appId}`
            httpSend(url, "GET", {})
            isOpen = false;
        }
    } catch (error) {

    }

    function loadLoadingPackage() {
        if (!wx.loadSubpackage) {
            wx.showModal({
                title: '提示',
                content: '请升级微信到最新版本！',
                confirmText: '确定',
                success: (res) => {
                    if (res.confirm) {
                        wx.exitMiniProgram({});
                    }
                }
            });
            return null;
        }

        wx.loadSubpackage({
            name: "loading",
            success: () => {
                FIRSTRENDER = false;
                window.screenOrientation = "sensor_portrait";
                require("loading/laya.wxmini.min.js");
                require("loading/laya.core.min.js");
                require("pureLoading.js");
            }
        });
    }
    if (isOpen) {
        loadLoadingPackage();
    }
});
require("game.js");